truncate table t_d_ck_sjjy;qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('806', '校验证券内码一致，证券品种或者交易市场不同的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '
   <SQL>select a.c_sec_code     as 证券内码,
       a.c_km_code      as 现科目代码,
       a.c_km_name      as 现科目名称,
       a.facctcode      as 原科目代码,
       a.facctattr      as 原科目性质,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code     as 交易市场,
       a.src            as 数据源,
       a.fjjdm          as 组合,
       a.fyear          as 年份
  from md_km_map a
  join (select distinct c_sec_code,
                        c_sec_name,
                        c_sec_mkt_code,
                        c_mkt_code,
                        c_sec_var_code
          from t_p_sv_sec_base
         where n_check_state = ''1'') b
    on a.c_sec_code=b.c_sec_code  and (a.c_sec_var_code <> b.c_sec_var_code or
       a.c_mkt_code <> b.c_mkt_code)
 where trim(a.c_sec_code) is not null
   and a.fjjdm = #PORT</SQL>             ', null, '科目映射表校验', 'ZQNMYZZQPZHJYSCBT', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('807', '验证库存表中的证券代码与证券品种信息表中的证券代码一致，且证券品种、交易市场不一致的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.c_port_code as 组合代码,
       a.c_sec_code as 证券内码,
       a.d_stock as 库存日期,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code as 交易市场
  from t_d_ai_stock a
  join (select distinct c_sec_code,
                        c_sec_name,
                        c_sec_mkt_code,
                        c_mkt_code,
                        c_sec_var_code
          from t_p_sv_sec_base
          where n_check_state = ''1'') b
   on a.c_sec_code=b.c_sec_code
   and (a.c_sec_var_code <> b.c_sec_var_code or
       a.c_mkt_code <> b.c_mkt_code)
   where trim(a.c_sec_code) is not null
   and a.c_port_code = #PORT
   and a.d_stock between #START_DATE and #END_DATE</SQL>    ', null, '库存表校验', 'KCBZQDMZQPZJYSC', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('809', '校验估值表中科目代码、证券内码是否存在<SEC>', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select c_port_code as 组合代码,c_km_code as 科目代码,c_sec_code as 证券内码,d_aststat as 估值日期
     from t_r_fr_aststat
     where (c_sec_code like ''%<SEC>%'' or c_km_code like ''%<SEC>%'')
     and (d_aststat between #START_DATE and #END_DATE)
     and c_port_code in (select c_port_code
                           from t_e_exec_plan_rela
                           where c_plan_type = ''AO_LEVEL'')
     and c_port_code = #PORT</SQL>            ', null, '估值表校验', 'GZBKMDMZQNMSEC', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('810', '校验期初库存存在回购成科目不存在应收利息科目', 1, 'GM
', '20170718 13:32:20', 'GM
', '20170718 13:32:20', '<SQL>
select a.c_port_code as 组合代码,
       a.d_stock as 库存日期,
       a.c_km_code as 科目代码,
       a.c_km_name as 科目名称,
       a.c_sec_code as 证券内码,
       a.c_sec_var_code as 证券品种
  from t_d_ai_stock a
 where a.c_dai_code in (''MRFSJRZC'', ''MCHGJRZC'')
   and a.d_stock between #START_DATE and #END_DATE
   and c_port_code = #PORT
   and not exists
 (select 1
          from t_d_ai_stock b
         where b.c_port_code = a.c_port_code
           and b.d_stock = a.d_stock
           and b.c_sec_code = a.c_sec_code
           and b.c_dai_code in (''YSLX_ZQ'', ''YFLX_ZQ''))
</SQL>                    ', null, '库存表校验', 'QCKMCZHGKMBCZYSLXKM', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('816', '资金存放业务的总行或者支行不能为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>
select a.c_port_code as 组合代码,
       a.c_td_type as 交易类型,
       a.c_dv_type_sub as 业务类型,
       a.c_sec_code as 证券内码,
       c.c_sec_var_code as 证券品种,
       a.d_trade as 日期,
       a.d_sett_due as 结算日期,
       a.d_sett_fact as 实际结算日期,
       f.c_bank_name as 银行名称,
       g.c_branch_bank_name as 机构名称
  from T_D_AC_TRADE_DEP A
  LEFT JOIN T_P_SV_SEC_BASE C
    ON A.C_SEC_CODE = C.C_SEC_CODE
  LEFT JOIN (SELECT max(c_org_name) as c_bank_name, c_org_code as c_org_code
               FROM T_P_BI_ORG
              group by c_org_code) F
    ON C.c_bank_code = F.c_org_code
  LEFT JOIN (SELECT max(c_org_name) as c_branch_bank_name, c_org_code
               FROM T_P_BI_ORG
              group by c_org_code) G
    ON C.c_branch_bank_code = G.c_org_code
     where a.d_trade between #START_DATE and #END_DATE
       and a.c_port_code = #PORT
   and trim(f.c_bank_name) is null
</SQL>                           ', null, '资金存放业务校验', 'ZJCFYWZHHZHBNWK', 'ZJCFYWJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('811', '验证迁移的历史某一日期段内凭证表的科目代码是否在科目映射表中存在对应的V4.5的科目代码', 1, 'GM
', '20170718 13:32:20', 'GM
', '20170718 13:32:20', '<SQL>
 select a.fkmh as 原科目号,a.c_fset as 套账号,a.c_year as 年份,a.src as 原数据源,a.fdate as 日期,c.fjjdm as 原组合代码
     from md_fcwvch a
    join md_t_cssysjj c
          on a.c_fset = substr(c.fsetcode, -3)
         and a.src = c.src
    where a.fkmh not in (

                         select b.facctcode
                           from md_km_map b
                          where a.c_fset = b.fset
                            and a.c_year = b.fyear
                            and a.src = b.src)
         and a.fdate between #START_DATE and #END_DATE and c.fjjdm= #PORT
</SQL>               ', null, '历史凭证表校验', 'QYLSRQDNKMDMSFCZDYDM', 'LSPZBJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('812', '校验估值表存在但库存表不存在的情况', 1, 'GM
', '20170718 13:32:20', 'GM
', '20170718 13:32:20', '<SQL>
select a.c_port_code as 组合代码, a.d_aststat as 库存日期
  from t_r_fr_aststat a
 where a.d_aststat between #START_DATE and #END_DATE
 and a.c_port_code = #PORT
   and not exists (select 1
          from t_d_ai_stock b
         where a.c_port_code = b.c_port_code
           and a.d_aststat = b.d_stock)
 group by a.c_port_code, a.d_aststat
 order by a.c_port_code
</SQL>             ', null, '库存表校验', 'JYGZBCZDKCBBCZDQK', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('813', '验证迁移的历史某一日期段内凭证表凭证分录是否缺失', 1, 'GM
', '20170718 13:32:20', 'GM
', '20170718 13:32:20', '<SQL>select a.c_fset as 套账号,a.src as 数据源,a.fvchbh as 凭证分录号,a.fvchpdh as 凭证号,a.fdate as 日期,b.fjjdm as 原组合代码
        from md_fcwvch a
        join md_t_cssysjj b
          on a.c_fset = substr(b.fsetcode, -3)
         and a.src = b.src
       where a.fvchbh not in
             (select c.n_fl_num
                from t_d_ai_act_val c
               where a.fvchpdh = c.n_vch_num
                 and a.fdate = c.d_chk_acc
                 and b.fjjdm = c.c_port_code)
         and a.fdate between #START_DATE and #END_DATE and b.fjjdm= #PORT
</SQL>                  ', null, '历史凭证表校验', 'JYQYLSRQDNPZFLSFQS', 'LSPZBJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('814', '验证迁移的历史某一日期段内凭证表凭证号是否缺失', 1, 'GM
', '20170718 13:32:20', 'GM
', '20170718 13:32:20', '<SQL>
select a.c_fset as 套账号,a.src as 系统标识,a.fvchpdh as 凭证号,a.fdate as 凭证日期,b.fjjdm as 组合代码
        from md_fcwvch a
        join md_t_cssysjj b
          on a.c_fset = substr(b.fsetcode, -3)
         and a.src = b.src
       where a.fvchpdh not in
             (select c.n_vch_num
                from t_d_ai_act_val c
               where a.fvchpdh = c.n_vch_num
                 and a.fdate = c.d_chk_acc
                 and b.fjjdm = c.c_port_code)
         and a.fdate between #START_DATE and #END_DATE and b.fjjdm= #PORT
</SQL>', null, '历史凭证表校验', 'JYQYLSRQDNPZHSFQS', 'LSPZBJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('817', '银行间债券交易的交易分销机构是否为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>select a.c_port_code as 组合代码,
       a.d_trade as 交易流水日期,
       a.c_sec_code as 证券内码,
       a.c_sec_var_code as 证券品种,
       a.c_td_chan_code as 交易渠道,
       a.c_dt_code as 交易方式,
       a.c_fx_code as 发行代码
  from t_d_ac_trade_ivt a
 where a.c_td_type = ''ZQJY''
   and a.d_trade between #START_DATE and #END_DATE
   and a.c_port_code = #PORT
   and a.c_mkt_code = ''XCFE''
   and a.c_dt_code in (''ZQJY_FX'', ''ZQJY_CX'')
   and trim(a.c_fx_code) is null</SQL>     ', null, '银行间交易流水校验', 'YHJZQJYFXJGSFWK', 'YHJJYLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('818', '银行间债券交易的交易对手方是否为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>
select a.c_port_code as 组合代码,
       a.d_trade as 交易流水日期,
       a.c_sec_code as 证券内码,
       a.c_sec_var_code as 证券品种,
       a.c_td_chan_code as 交易渠道代码,
       a.c_dt_code as 发行方式,
       b.C_TD_CHAN_NAME as 交易渠道名称
  from t_d_ac_trade_ivt a
  LEFT JOIN T_P_AB_TD_CHAN b
    ON A.C_TD_CHAN_CODE = b.C_TD_CHAN_CODE
   AND A.C_MKT_CODE = b.C_MKT_CODE
   AND b.C_DV_CHAN_TYPE = ''CHAN_ORG''
   AND b.N_CHECK_STATE = 1
 where a.c_td_type = ''ZQJY''
   and a.d_trade between #START_DATE and #END_DATE
   and a.c_mkt_code = ''XCFE''
   and a.c_dt_code in (''ZQJY_BUY'', ''ZQJY_SELL'')
   and trim(a.c_td_chan_code) is null
</SQL>                            ', null, '银行间交易流水校验', 'YHJZQDSFSFWK', 'YHJJYLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('820', '交易流水数据交易平台不能为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>
select a.c_port_code as 组合代码,
       a.d_trade as 交易流水日期,
       a.c_sec_code as 证券内码,
       a.c_sec_var_code as 证券品种,
       a.c_td_type as 交易类型,
       a.c_dv_type_sub as 业务类型,
       a.c_mkt_code as 交易市场,
       a.c_td_chan_code as 交易渠道,
       a.c_dt_code as 交易方式,
       a.c_dv_plat as 交易平台
  from t_d_ac_trade_ivt a
 where a.d_trade between #START_DATE and #END_DATE
   and (a.c_dt_code like ''%BUY'' or a.c_dt_code like ''%SELL'' or
       a.c_dt_code in (''HGJY_ZHG'',''HGJY_NHG''))
   and trim(a.c_dv_plat) is null
   and a.c_mkt_code not in (''COTC'')
   and a.c_port_code = #PORT
</SQL>                                    ', null, '银行间交易流水校验', 'YHJHGDSFSFWK', 'YHJJYLSJY', 'V45估值并帐');qwq


insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('775', '库存表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'KCBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('776', '新股新债申购业务校验', 1, 'GM', ' 20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'XGXZSGYWJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('777', '校验同一笔凭证借贷是否相等', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>SELECT C_PORT_CODE as 组合代码,D_CHK_ACC as 核算日期,N_VCH_NUM as 凭证号,N_PORT_MONEY_J as 组合货币金额总额借方,N_PORT_MONEY_D as 组合货币金额总额贷方
  from (SELECT C.C_PORT_CODE,
               C.D_CHK_ACC,
               C.N_VCH_NUM,
               sum(N_PORT_MONEY_J) as N_PORT_MONEY_J,
               sum(N_PORT_MONEY_D) as N_PORT_MONEY_D
          from (SELECT SUM(CASE
                             WHEN N_WAY = 1 THEN
                              A.N_PORT_MONEY
                             ELSE
                              0
                           END) AS N_PORT_MONEY_J,
                       SUM(CASE
                             WHEN N_WAY = -1 THEN
                              A.N_PORT_MONEY
                             ELSE
                              0
                           END) AS N_PORT_MONEY_D,
                       A.N_VCH_NUM,
                       A.C_PORT_CODE,
                       A.D_CHK_ACC,
                       A.N_WAY
                  from T_D_AI_ACT_VAL A
                 WHERE N_CHECK_STATE = 1
                   and c_port_code = #PORT
                   AND C_PORT_CODE in (select c_port_code
                           from t_e_exec_plan_rela
                           where c_plan_type = ''AO_LEVEL'')
                   AND (D_CHK_ACC BETWEEN #START_DATE AND
                        #END_DATE)
                 GROUP BY N_VCH_NUM, C_PORT_CODE, D_CHK_ACC, A.N_WAY) C
         GROUP BY C.C_PORT_CODE, C.D_CHK_ACC, C.N_VCH_NUM) D
 WHERE ABS(N_PORT_MONEY_J) <> ABS(N_PORT_MONEY_D)</SQL>                             ', null, '凭证表校验', 'TYBPZJDJY', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('897', '校验港股品种信息上市代码与证券内码不一致的情况', 1, ' ', ' ', null, null, '<SQL>select a.c_sec_code     as 证券内码,
       a.c_sec_name     as 证券名称,
       a.c_sec_mkt_code as 上市代码,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code     as 交易市场
  from t_p_sv_sec_base a
 where a.c_sec_var_code like ''GP%''
   and substr(a.c_sec_code, 1, instr(a.c_sec_code, '' '', 1) - 1) <>
       a.c_sec_mkt_code
   and a.c_mkt_code in(''HKCG'',''HKCS'')</SQL> ', null, '辅助元素校验', 'JYGGSSDMHZQNM', 'FZYSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('868', '校验库存表损益类同一个科目存在一正一负的两条数据', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.c_port_code as 组合代码,
               a.d_stock as 库存日期,
               a.c_km_code as 科目代码,
               a.c_dai_code as 核算项目,
               a.n_port_money as 本币金额,
               a.c_sec_code as 证券内码,
         a.c_ca_code as 账户代码
  from t_d_ai_stock a
  join (select td_d_ai_stock,
               c_port_code,
               d_stock,
               c_km_code,
               c_dai_code,
               n_port_money,
               c_sec_code,
         c_ca_code
          from t_d_ai_stock) b
    on a.c_port_code = b.c_port_code
   and a.d_stock = b.d_stock
   and a.c_km_code = b.c_km_code
   and a.c_ca_code = b.c_ca_code
   and a.c_sec_code = b.c_sec_code
   and a.n_port_money + b.n_port_money = 0
 where trim(a.c_dai_code) is not null
   and a.n_port_money <> 0
   and b.n_port_money <> 0
   and (a.d_stock between #START_DATE and #END_DATE)
   and a.c_port_code in (select c_port_code
                           from t_e_exec_plan_rela
                          where c_plan_type = ''AO_LEVEL'')
   and a.c_km_code like ''6%''
   and a.c_port_code = #PORT</SQL>                        ', null, '库存表校验', 'JYKCBSYLTYGKMYZFSJ', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('874', '校验同一个组合下凭证科目代码是否在科目体系中存在', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select distinct d.c_port_code as 组合代码,
                d.c_km_code_t as 科目体系科目代码,
                d.c_km_name   科目名称,
                d.N_VCH_NUM   as 凭证号
  from t_d_ai_act_val d
 where not exists
 (select distinct A.c_port_code,
                        A.c_km_code_t,
                        A.c_km_name,
                        C.c_plan_code2,
                        C.c_port_code2
          from (select distinct a.c_port_code, a.c_km_code_t, a.c_km_name
                  from t_d_ai_act_val a
                 where a.c_port_code = #PORT
                   and a.d_chk_acc between  #START_DATE and #END_DATE) A
          left join (select c.c_plan_code as c_plan_code2,
                           c.c_port_code as c_port_code2
                      from t_e_exec_plan_rela c
                     where c.c_port_code = #PORT
                       and c.c_plan_type = ''AO_LEVEL'') C
            on A.c_port_code = C.c_port_code2
          left join (select b.c_plan_code,
                           b.c_km_code   as c_km_code2,
                           b.c_km_name   as c_km_name2
                      from t_f_sc_km b
                     where b.n_detail = 1) B
            on C.c_plan_code2 = B.c_plan_code
           and A.c_km_code_t = B.c_km_code2)
           and d.c_port_code = #PORT
           and d.d_trade between  #START_DATE and #END_DATE</SQL>   ', null, '凭证表校验', 'PZBKMDMSFZKMTXCZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('875', '校验凭证辅助元素币种是否存在', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select A.d_chk_acc as 核算日期,A.c_port_code as 组合代码,
A.c_km_code_t as 科目体系科目代码,A.c_sec_var_code as 证券品种,A.c_dta_code as 交易属性,A.c_dc_code as 币种,B.c_km_code as 科目代码,B.c_sec_var_code as 科目表证券品种,B.c_mkt_code as 交易市场,B.c_dta_code as 科目表交易属性,B.c_dc_code as 科目表币种 from
(select a.d_chk_acc,a.c_port_code,a.c_km_code_t,a.c_sec_var_code,a.c_dta_code,a.c_dc_code
from t_d_ai_act_val a
where a.c_port_code = #PORT
and a.d_chk_acc between #START_DATE and #END_DATE
and a.c_km_code_t <> '' '') A
join
(select b.c_km_code,b.c_sec_var_code,b.c_mkt_code,b.c_dta_code,
b.c_dc_code,b.n_detail
from t_f_sc_km b
where b.c_km_code <> '' ''
and b.n_detail = 1) B
on A.c_km_code_t = B.c_km_code
where (nvl(A.c_dc_code,'' '') <> nvl(B.c_dc_code,'' ''))
and B.n_detail = 1</SQL>   ', null, '凭证表校验', 'JYPZBFZYSBZSFCZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('869', '校验月末损益类科目余额是否为0', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select AA.c_port_code as 组合代码,AA.d_stock as 库存日期,
AA.c_km_code as 科目代码,AA.c_dai_code as 核算项目,AA.n_orig_money as 原币金额,AA.n_port_money as 本币金额 from
(select max(a.c_port_code) as c_port_code,
        a.d_stock,
        a.c_km_code as c_km_code,
        max(a.c_dai_code) as c_dai_code,
        sum(a.n_orig_money) as n_orig_money,
    sum(a.N_PORT_MONEY) as N_PORT_MONEY
        from t_d_ai_stock a
        where A.C_KM_CODE LIKE ''6%''
        and a.c_port_code = #PORT
        and a.d_stock = last_day(a.d_stock)
        and a.d_stock between #START_DATE and #END_DATE
    group by a.c_km_code,a.d_stock) AA
  where AA.n_orig_money <> 0
      and AA.N_PORT_MONEY <> 0</SQL>                    ', null, '库存表校验', 'JYYMSYLKMYESFWL', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('192', '科目体系校验', 1, ' ', ' ', null, null, null, null, null, 'KMTXJY', null, null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('773', '校验库存表中科目代码、证券内码是否存在<SEC>', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select c_port_code as 组合代码,c_km_code as 科目代码,c_sec_code as 证券内码, d_stock as 库存日期
     from t_d_ai_stock
     where (c_sec_code like ''%<SEC>%'' or c_km_code like ''%<SEC>%'')
     and (d_stock between #START_DATE and #END_DATE)
     and c_port_code in (select c_port_code
                           from t_e_exec_plan_rela
                           where c_plan_type = ''AO_LEVEL'')
     and c_port_code = #PORT</SQL>            ', null, '库存表校验', 'KCBKMDMZQNMSEC', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('780', '校验库存表核算项目、科目代码是否为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>select c_port_code as 组合代码, c_sec_code as 证券内码,d_stock as 库存日期, c_km_code as 科目代码,c_dai_code as 核算项目
         from t_d_ai_stock
         where (trim(c_dai_code) is null or trim(c_km_code) is null)
         and c_port_code in (select c_port_code
                           from t_e_exec_plan_rela
                           where c_plan_type = ''AO_LEVEL'')
         and c_port_code = #PORT
         and (d_stock between #START_DATE and #END_DATE)</SQL>  ', null, '库存表校验', 'KCBHSXMKMDM', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('781', '验证凭证表中的证券代码与证券品种信息表中的证券代码一致，且证券品种、交易市场不一致的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.c_port_code as 组合代码,
       a.c_sec_code as 证券内码,
       a.n_vch_num as 凭证号,
       a.d_chk_acc as 凭证日期,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code as 交易市场,
       b.c_sec_var_code as 证券基本信息表证券品种,
       b.c_mkt_code as 证券基本信息表交易市场
  from t_d_ai_act_val a
  join (select distinct c_sec_code,
                        c_sec_name,
                        c_sec_mkt_code,
                        c_mkt_code,
                        c_sec_var_code
         from t_p_sv_sec_base
         where n_check_state = ''1'') b
   on a.c_sec_code=b.c_sec_code
   and (a.c_sec_var_code <> b.c_sec_var_code or a.c_mkt_code <> b.c_mkt_code)
   where trim(a.c_sec_code) is not null
   and (a.d_chk_acc between #START_DATE and #END_DATE)
   and a.c_port_code = #PORT
</SQL>                                         ', null, '凭证表校验', 'PZBZQDMZQPZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('782', '验证估值表中的证券代码与证券品种信息表中的证券代码一致，且证券品种、交易市场不一致的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.c_port_code as 组合代码,
       a.c_sec_code as 证券内码,
       a.d_aststat as 估值日期,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code as 交易市场,
       b.c_sec_var_code as 证券品种信息表证券品种,
       b.c_mkt_code as 证券品种信息表交易市场
  from t_r_fr_aststat a
  join (select distinct c_sec_code,
                        c_sec_name,
                        c_sec_mkt_code,
                        c_mkt_code,
                        c_sec_var_code
          from t_p_sv_sec_base
         where n_check_state = ''1'') b
    on a.c_sec_code=b.c_sec_code
   and (a.c_sec_var_code <> b.c_sec_var_code or
       a.c_mkt_code <> b.c_mkt_code)
 where trim(a.c_sec_code) is not null
 and (a.d_aststat between #START_DATE and #END_DATE)
 and a.c_port_code = #PORT</SQL>     ', null, '估值表校验', 'GZBZQDMZQPZJYSC', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('783', '针对存放交易校验有首期是否存在到期数据', 1, 'GM
', '20170718 13:32:20', 'GM
', '20170718 13:32:20', '<SQL>select t.c_port_code as 组合代码,t.c_sec_code as 证券品种,t.d_trade as 交易流水日期,t.c_td_type as 交易类型
  from T_D_AC_TRADE_DEP t
 where t.c_dv_type_sub = ''CKTZ_SQ''
   and t.c_Iden_Sub = ''[root]''
   and t.c_port_code = #PORT
   and d_trade between #START_DATE and #END_DATE
   and not exists (select 1
          from T_D_AC_TRADE_DEP tt
         where t.c_iden = tt.c_iden_sub
           and tt.c_dv_type_sub = ''CKTZ_DQ'')
    and t.n_td_money <> (select sum(n_td_money)
          from T_D_AC_TRADE_DEP tt
          where t.c_iden = tt.c_iden_sub
          and tt.c_dv_type_sub = ''CKTZ_ZQ'')</SQL>            ', null, '银行间交易流水校验', 'ZDCFJYJYYSQSFCZDQSJ', 'YHJJYLSJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('858', '股东账务信息新老系统是否一致', 1, ' ', ' ', null, null, '<SQL>select d.fjjdm as 原组合, c.fgddm as 原股东代码, c.fszsh as 原交易市场
               from md_csgddm c
            left join (select * from md_t_cssysjj d where d.fjjdm = #PORT) d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
                where d.fjjdm = #PORT
                and not exists (select 交易市场,股东代码,组合,组合,股东代码,交易市场,
       case when 股东代码 = 原股东代码 then ''一致''
            else ''不一致'' end  是否一致
          from (select d.fjjdm as 原组合, c.fgddm as 原股东代码, c.fszsh as 原交易市场
               from md_csgddm c
            left join (select * from md_t_cssysjj d where d.fjjdm = #PORT) d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
                where d.fjjdm = #PORT) E
     left join
           (select b.c_mkt_code as 交易市场, A.c_rela_code as 股东代码, A.c_port_code as 组合
          from (select a.c_port_code, a.c_rela_code
                  from t_p_ab_port_rela a
                 where a.c_rela_type = ''RELA_SH_ACC''
                   and a.c_port_code = #PORT) A
          left join t_p_ab_sh_acc b
            on A.c_rela_code = b.c_sh_acc_code) F
    on 组合 = 原组合
    where 股东代码 = 原股东代码)</SQL>    ', null, '参数校验', 'GDZHXXXLYZ', 'CSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('859', '席位信息新老系统是否一致', 1, ' ', ' ', null, null, '<SQL>select d.fjjdm as 原组合, c.fqsxw as 原券商席位,c.fqsmc as 原券商名称, c.fxwlb as 原席位类型,c.fszsh as 深圳上海
               from md_csqsxw c
               left join md_t_cssysjj d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
          where not exists(select * from (select A.*, b.c_td_chan_code, b.c_mkt_code
          from (select a.c_port_code，a.c_rela_code，a.c_dv_type_code
                  from t_p_ab_port_rela a
                 where a.c_rela_type = ''RELA_TD_SEAT''
                   and a.c_port_code = #PORT) A
          left join t_p_ab_td_chan b
            on A.c_rela_code = b.c_td_chan_code) F
  left join (select d.fjjdm, c.fqsxw,c.fqsmc, c.fxwlb, c.fszsh
               from md_csqsxw c
               left join md_t_cssysjj d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
                where d.fjjdm = #PORT) E
    on F.c_port_code = E.fjjdm
    and F.c_rela_code = E.fqsxw)
    and d.fjjdm = #PORT</SQL>                                                                                                      ', null, '参数校验', 'XWXXXLXTYZ', 'CSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('784', '新股新债申购业务校验迁移的数据是否缺失', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>
/*新股新债申购业务校验   校验迁移的数据是否缺失*/
select b.fdate as 日期,
       b.fzqdm as 证券代码,
       b.fzqmc as 证券名称,
       b.fywlb as 业务类别,
       b.fzqje as 中签金额,
       b.fzqsl as 中签数量,
       b.c_fset as 套账号,
       c.fjjdm as 组合
  from md_XGYWXX b
  join (select fsetcode, fjjdm, src from md_t_cssysjj) c
    on substr(c.fsetcode, 2, 3) = b.c_fset
   and c.src = b.src
 where not exists (select *
          from t_d_ac_trade_IPO a
         where a.c_sec_var_code like ''GP%''
           and a.c_port_code = c.fjjdm
           and a.c_sec_code = b.fzqdm
           and a.d_trade = b.fdate)

</SQL>   ', null, '历史新股新债申购业务', 'XGXZSGYWJYQYDSJSFQS', 'LSXGXZSGYW', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('894', '校验当前凭证表对应的c_ca_code里面的值是否在现金账户里面', 1, ' ', ' ', null, null, '<SQL>select a.d_chk_acc as 凭证日期,
       a.c_port_code as 组合代码,
       a.c_km_code as 科目代码,
       a.c_km_name as 科目名称,
       a.c_ca_code as 现金账户,
       a.c_dv_acc_type as 账户类型,
       a.c_dai_code as 核算项目
  from t_d_ai_act_val a
 where a.c_dai_code in (''HBZJ'', ''YSLX_ZJ'', ''LXSR_ZJ'')
   and a.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and a.c_port_code = #PORT
   and not exists (select 1
          from t_p_bi_cash_acc b
         where a.c_ca_code = b.c_ca_code
           and a.c_dv_acc_type = b.c_dv_acc_type)</SQL>  ', null, '凭证表校验', 'JYPZBSFZXJ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('893', '校验当前估值表对应的c_ca_code里面的值是否在现金账户里面', 1, ' ', ' ', null, null, '<SQL>select a.d_aststat as 估值日期,
       a.c_port_code as 组合代码,
       a.c_km_code as 科目代码,
       a.c_km_name as 科目名称,
       a.c_ca_code as 现金账户,
       a.c_dv_acc_type as 账户类型,
       a.c_dai_code as 核算项目
  from t_r_fr_aststat a
 where a.c_dai_code in (''HBZJ'', ''YSLX_ZJ'', ''LXSR_ZJ'')
   and a.d_aststat  BETWEEN #START_DATE AND #END_DATE
   and a.c_port_code = #PORT
   and not exists (select 1
          from t_p_bi_cash_acc b
         where a.c_ca_code = b.c_ca_code)</SQL>            ', null, '估值表校验', 'JYGZBSFZXJ', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('855', '开放申赎表,凭证表,估值表,库存表辅助元素一致性校验', 1, 'GM', '20170718 13:32:20 ', 'GM', '20170718 13:32:20', '<SQL>select
case when AA.C_SEC_VAR_CODE != BB.C_SEC_VAR_CODE then ''开放申赎与凭证表证券品种有差异'' end as zqdiff1,case when AA.C_SEC_VAR_CODE != CC.C_SEC_VAR_CODE then ''开放申赎与估值表证券品种有差异'' end as zqdiff2,
case when AA.C_SEC_VAR_CODE != DD.C_SEC_VAR_CODE then ''开放申赎与库存表证券品种有差异'' end as zqdiff3,case when AA.C_MKT_CODE != BB.C_MKT_CODE then ''开放申赎与凭证表证券品种有差异'' end as scdiff1,
case when AA.C_MKT_CODE != CC.C_MKT_CODE then ''开放申赎与估值表证券品种有差异'' end as scdiff2,case when AA.C_MKT_CODE != DD.C_MKT_CODE then ''开放申赎与库存表证券品种有差异'' end as scdiff3,
case when AA.C_DTA_CODE != BB.C_DTA_CODE then ''开放申赎与凭证表证券品种有差异'' end as sxdiff1,case when AA.C_DTA_CODE != CC.C_DTA_CODE then ''开放申赎与估值表证券品种有差异'' end as sxdiff2,
case when AA.C_DTA_CODE != DD.C_DTA_CODE then ''开放申赎与库存表证券品种有差异'' end as sxdiff3,case when AA.C_DV_ISSUE_MODE != BB.C_DV_ISSUE_MODE then ''开放申赎与凭证表证券品种有差异'' end as fxdiff1,
case when AA.C_DV_ISSUE_MODE != CC.C_DV_ISSUE_MODE then ''开放申赎与估值表证券品种有差异'' end as fxdiff2,case when AA.C_DV_ISSUE_MODE != DD.C_DV_ISSUE_MODE then ''开放申赎与库存表证券品种有差异'' end as fxdiff3,
case when AA.C_DV_INVEST_CLS != BB.C_DV_INVEST_CLS then ''开放申赎与凭证表证券品种有差异'' end as tzdiff1,case when AA.C_DV_INVEST_CLS != CC.C_DV_INVEST_CLS then ''开放申赎与估值表证券品种有差异'' end as tzdiff2,
case when AA.C_DV_INVEST_CLS != DD.C_DV_INVEST_CLS then ''开放申赎与库存表证券品种有差异'' end as tzdiff3,case when AA.C_TD_CHAN_CODE != BB.C_TD_CHAN_CODE then ''开放申赎与凭证表证券品种有差异'' end as qddiff1,
case when AA.C_TD_CHAN_CODE != CC.C_TD_CHAN_CODE then ''开放申赎与估值表证券品种有差异'' end as qddiff2,case when AA.C_TD_CHAN_CODE != DD.C_TD_CHAN_CODE then ''开放申赎与库存表证券品种有差异'' end as qddiff3,
case when AA.C_DC_CODE != BB.C_DC_CODE then ''开放申赎与凭证表证券品种有差异'' end as hbdiff1,case when AA.C_DC_CODE != CC.C_DC_CODE then ''开放申赎与估值表证券品种有差异'' end as hbdiff2,
case when AA.C_DC_CODE != DD.C_DC_CODE then ''开放申赎与库存表证券品种有差异'' end as hbdiff3  from (select a.C_SEC_VAR_CODE,a.C_MKT_CODE,a.C_DTA_CODE,a.C_DV_ISSUE_MODE,a.C_DV_INVEST_CLS,a.C_TD_CHAN_CODE,a.C_DC_CODE,a.c_sec_code from t_d_ac_trade_sale a
 where a.C_DT_CODE like ''SQQR%'' or  a.C_DT_CODE  like ''SHQR%'' and a.c_port_code = #PORT and a.d_trade  between #START_DATE AND #END_DATE) AA
 left join (select b.C_SEC_VAR_CODE,b.C_MKT_CODE,b.C_DTA_CODE,b.C_DV_ISSUE_MODE,b.C_DV_INVEST_CLS,b.C_TD_CHAN_CODE,b.C_DC_CODE,b.c_sec_code,b.c_km_code from t_d_ai_act_val b
 where b.c_dai_code = ''ZQTZ_CB'' and b.C_DT_CODE = ''CWSS_QR'' or b.C_DT_CODE like ''CWSS_SHQR%'' and b.c_port_code = #PORT and b.d_trade between #START_DATE AND #END_DATE) BB  on  AA.c_sec_code = BB.c_sec_code
 left join (select c.C_SEC_VAR_CODE,c.C_MKT_CODE,c.C_DTA_CODE,c.C_DV_ISSUE_MODE,c.C_DV_INVEST_CLS,c.C_TD_CHAN_CODE,c.C_DC_CODE,c.c_sec_code,c.c_km_code from t_r_fr_aststat c
 where c.c_dai_code = ''ZQTZ_CB'' and c.c_port_code = #PORT  and c.D_ASTSTAT between #START_DATE AND #END_DATE) CC on BB.c_sec_code = CC.c_sec_code and  BB.c_km_code = CC.c_km_code
 left join (select d.C_SEC_VAR_CODE,d.C_MKT_CODE,d.C_DTA_CODE,d.C_DV_ISSUE_MODE,d.C_DV_INVEST_CLS,d.C_TD_CHAN_CODE,d.C_DC_CODE,d.c_sec_code,d.c_km_code from t_d_ai_stock d
 where d.c_dai_code = ''ZQTZ_CB'' and d.c_port_code = #PORT  and d.d_stock between #START_DATE AND #END_DATE) DD on BB.c_sec_code = DD.c_sec_code  and BB.c_km_code = DD.c_km_code</SQL> ', null, '辅助元素校验', 'KPGKYZJY', 'FZYSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('856', '新股新债申购业务表,凭证表,估值表,库存表辅助元素一致性校验', 1, 'GM ', '20170718 13:32:20 ', 'GM', '20170718 13:32:20', '<SQL>select
case when AA.C_SEC_VAR_CODE != BB.C_SEC_VAR_CODE then ''新股新债申购与凭证表证券品种有差异'' end as zqdiff1,case when AA.C_SEC_VAR_CODE != CC.C_SEC_VAR_CODE then ''新股新债申购与估值表证券品种有差异'' end as zqdiff2,
case when AA.C_SEC_VAR_CODE != DD.C_SEC_VAR_CODE then ''新股新债申购与库存表证券品种有差异'' end as zqdiff3,case when AA.C_MKT_CODE != BB.C_MKT_CODE then ''新股新债申购与凭证表交易市场有差异'' end as scdiff1,
case when AA.C_MKT_CODE != CC.C_MKT_CODE then ''新股新债申购与估值表交易市场有差异'' end as scdiff2,case when AA.C_MKT_CODE != DD.C_MKT_CODE then ''新股新债申购与库存表交易市场有差异'' end as scdiff3,
case when AA.C_DTA_CODE != BB.C_DTA_CODE then ''新股新债申购与凭证表交易属性有差异'' end as sxdiff1,case when AA.C_DTA_CODE != CC.C_DTA_CODE then ''新股新债申购与估值表交易属性有差异'' end as sxdiff2,
case when AA.C_DTA_CODE != DD.C_DTA_CODE then ''新股新债申购与库存表交易属性有差异'' end as sxdiff3,case when AA.C_DV_ISSUE_MODE != BB.C_DV_ISSUE_MODE then ''新股新债申购与凭证表发行方式有差异'' end as fxdiff1,case when AA.C_DV_ISSUE_MODE != CC.C_DV_ISSUE_MODE then ''新股新债申购与估值表发行方式有差异'' end as fxdiff2,case when AA.C_DV_ISSUE_MODE != DD.C_DV_ISSUE_MODE then ''新股新债申购与库存表发行方式有差异'' end as fxdiff3,case when AA.C_DV_INVEST_CLS != BB.C_DV_INVEST_CLS then ''新股新债申购与凭证表投资分类有差异'' end as tzdiff1,case when AA.C_DV_INVEST_CLS != CC.C_DV_INVEST_CLS then ''新股新债申购与估值表投资分类有差异'' end as tzdiff2,case when AA.C_DV_INVEST_CLS != DD.C_DV_INVEST_CLS then ''新股新债申购与库存表投资分类有差异'' end as tzdiff3,case when AA.C_TD_CHAN_CODE != BB.C_TD_CHAN_CODE then ''新股新债申购与凭证表交易渠道有差异'' end as qddiff1,case when AA.C_TD_CHAN_CODE != CC.C_TD_CHAN_CODE then  ''新股新债申购与估值表交易渠道有差异'' end as qddiff2,case when AA.C_TD_CHAN_CODE != DD.C_TD_CHAN_CODE then  ''新股新债申购与库存表交易渠道有差异'' end as qddiff3,case when AA.C_DC_CODE != BB.C_DC_CODE then ''新股新债申购与凭证表交易币种有差异'' end as hbdiff1,
case when AA.C_DC_CODE != CC.C_DC_CODE then ''新股新债申购与估值表交易币种有差异'' end as hbdiff2,case when AA.C_DC_CODE != DD.C_DC_CODE then ''新股新债申购与库存表交易币种有差异'' end as hbdiff3
 from (select a.C_SEC_VAR_CODE,a.C_MKT_CODE,a.C_DTA_CODE,a.C_DV_ISSUE_MODE,a.C_DV_INVEST_CLS,a.C_TD_CHAN_CODE,a.C_DC_CODE,a.c_sec_code from t_d_ac_trade_IPO a where a.C_DT_CODE like ''XGSG_QR%'' or  a.C_DT_CODE = ''XGSG_QR'' and a.c_port_code = #PORT and a.d_trade  between #START_DATE AND #END_DATE) AA
 left join (select b.C_SEC_VAR_CODE,b.C_MKT_CODE,b.C_DTA_CODE,b.C_DV_ISSUE_MODE,b.C_DV_INVEST_CLS,b.C_TD_CHAN_CODE,b.C_DC_CODE,b.c_sec_code,b.c_km_code from t_d_ai_act_val b where b.c_dai_code = ''ZQTZ_CB'' and b.C_DT_CODE = ''XGSG_QR'' or b.C_DT_CODE = ''XZSG_QR'' and b.c_port_code = #PORT and b.d_trade between #START_DATE AND #END_DATE) BB on  AA.c_sec_code = BB.c_sec_code left join (select c.C_SEC_VAR_CODE,c.C_MKT_CODE,c.C_DTA_CODE,c.C_DV_ISSUE_MODE,c.C_DV_INVEST_CLS,c.C_TD_CHAN_CODE,c.C_DC_CODE,c.c_sec_code,c.c_km_code from t_r_fr_aststat c where c.c_dai_code = ''ZQTZ_CB'' and c.c_port_code = #PORT  and c.D_ASTSTAT between #START_DATE AND #END_DATE) CC  on BB.c_sec_code = CC.c_sec_code and  BB.c_km_code = CC.c_km_code left join  (select d.C_SEC_VAR_CODE,d.C_MKT_CODE,d.C_DTA_CODE,d.C_DV_ISSUE_MODE,d.C_DV_INVEST_CLS,d.C_TD_CHAN_CODE,d.C_DC_CODE,d.c_sec_code,d.c_km_code from t_d_ai_stock d
 where d.c_dai_code = ''ZQTZ_CB'' and d.c_port_code = #PORT  and d.d_stock between #START_DATE AND #END_DATE) DD on BB.c_sec_code = DD.c_sec_code  and BB.c_km_code = DD.c_km_code</SQL>', null, '辅助元素校验', 'XPGKYZJY', 'FZYSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('857', '参数校验', 1, 'GM ', ' 20170718 13:32:20 ', 'GM ', '20170718 13:32:20 ', null, null, null, 'CSJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('860', '验证库存表每天的余额是否为0', 1, 'GM', '20170718 13:32:20', 'GM', '2017071813:32:20', '<SQL>select B.N_PORT_MONEY as 本币金额总值,B.N_ORIG_MONEY as 原币金额总值,B.组合代码,B.日期 from (
SELECT SUM(A.N_PORT_MONEY) as N_PORT_MONEY,
       SUM(A.N_ORIG_MONEY) as N_ORIG_MONEY,
       A.C_PORT_CODE as 组合代码,
       A.D_STOCK as 日期
  FROM T_D_AI_STOCK A
 WHERE A.D_STOCK BETWEEN #START_DATE AND #END_DATE
   AND A.C_PORT_CODE = #PORT
 GROUP BY A.C_PORT_CODE, A.D_STOCK) B
 where N_PORT_MONEY<>0 or N_ORIG_MONEY<>0</SQL>    ', null, '库存表校验', 'JYKCBMTDYESFW0', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('865', '校验资产净值和财务净值不一致的日期清单', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, '估值表校验', 'JYZCJZHCWJZBYZDRQ', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('861', '验证产品销售数据是否重复', 1, 'GM', '20170718 13:32:20', 'GM', '2017071813:32:20', '<SQL>select a.c_port_code as 组合代码, a.c_port_cls_code as 分级组合, a.c_sell_net_code as 销售网点, a.c_ds_code as 销售方式,a.d_sell as 销售日期, a.d_confirm as确认日期, a.d_sett as 结算日期, a.n_sell_amount as 确认份额, a.n_sell_money as 确认金额
  from T_D_AC_SELL_TA a
join (select * from t_p_ab_port b where  b.c_dat_code=''ASS_ZQTZJJ'') c
on a.c_port_code=c.c_port_code
 where (a.c_port_code, a.c_port_cls_code, a.c_sell_net_code, a.c_ds_code,
        a.d_sell, a.d_confirm, a.d_sett, a.n_sell_amount, a.n_sell_money) in
       (select a.c_port_code,
               a.c_port_cls_code,
               a.c_sell_net_code,
               a.c_ds_code,
               a.d_sell,
               a.d_confirm,
               a.d_sett,
               a.n_sell_amount,
               a.n_sell_money
          from T_D_AC_SELL_TA a
         where a.d_sell between #START_DATE AND #END_DATE
         group by a.c_port_code,
               a.c_port_cls_code,
               a.c_sell_net_code,
               a.c_ds_code,
               a.d_sell,
               a.d_confirm,
               a.d_sett,
               a.n_sell_amount,
               a.n_sell_money
        having count(1) > 1)
 order by a.c_port_code,a.d_sell,a.c_ds_code asc</SQL>   ', null, '库存表校验', 'JYCPXSSJSFCF', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('863', '校验持仓债券某天或者一段时间无每百元利息信息', 1, 'GM', '20170718 13:32:20', 'GM', '2017071813:32:20', '<SQL>select a.c_port_code as 组合代码,a.d_aststat as 库存日期,a.c_sec_code as 证券内码,a.c_sec_var_code as 证券品种,a.c_km_code as 科目代码,a.c_mkt_code as 交易市场
 from t_r_fr_aststat a where a.C_DAI_CODE = ''ZQTZ_CB''
                                and a.C_SEC_VAR_CODE like ''ZQ%''
                                and a.C_SEC_CODE <> '' ''
                                and a.c_port_code = #PORT
                                and a.d_aststat between #START_DATE and #END_DATE
                                and not exists(select 1 from T_D_SV_FI_INCOME b
                                where a.c_sec_code = b.c_sec_code
                                and  a.d_aststat = b.d_income)</SQL>                    ', null, '库存表校验', 'JYCCZQMTWMBYLX', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('864', '校验当前库存表对应的c_ca_code里面的值是否在现金账户里面', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.d_stock as 库存日期,
       a.c_port_code as 组合代码,
       a.c_km_code as 科目代码,
       a.c_km_name as 科目名称,
       a.c_ca_code as 帐户代码,
       a.c_dv_acc_type as 账户类型,
       a.c_dai_code as 核算项目
  from t_d_ai_stock a
 where a.c_dai_code in (''HBZJ'', ''YSLX_ZJ'', ''LXSR_ZJ'')
   and a.d_stock  BETWEEN #START_DATE AND #END_DATE
   and a.c_port_code = #PORT
   and not exists (select 1
          from t_p_bi_cash_acc b
         where a.c_ca_code = b.c_ca_code
 )</SQL>            ', null, '库存表校验', 'JYKCBPZBGZBSFYZ', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('866', '校验科目映射表中的交易席位不在产品关联信息表中的交易席位', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.fjjdm as 组合代码, a.fyear as 年份, a.c_km_code as 科目代码,   a.c_km_name as 科目名称, a.c_td_chan_code as 交易渠道
  from md_km_map a
 where a.fjjdm = #PORT
   and a.fyear BETWEEN to_char(#START_DATE, ''YYYY'') AND
       to_char(#END_DATE, ''YYYY'')
   and a.c_td_chan_code is not null
   and not exists (select 1
          from t_p_ab_port_rela b
         where b.c_rela_type = ''RELA_TD_SEAT''
           and b.c_rela_code = a.c_td_chan_code
           and b.c_port_code = a.fjjdm
           and b.c_dv_type_code <> ''SEAT_QUERY''
           and a.c_td_chan_code is not null)
</SQL>                ', null, '科目映射表校验', 'JYKMBZDJYXWBZCPGLXXB', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('867', '校验期货台账表中的期货公司哪些不在产品关联信息表中', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.C_PORT_CODE as 组合代码,a.D_TRADE as 执行日期,a.c_td_chan_code as 交易渠道 from T_D_AC_FUTURES a where a.C_PORT_CODE = #PORT and a.D_TRADE BETWEEN #START_DATE AND #END_DATE
and not exists (select 1 from t_p_ab_port_rela b
                 where b.c_rela_type = ''RELA_ORG''
                 and b.c_rela_code = a.c_td_chan_code
                 and b.c_port_code = a.c_port_code)</SQL>        ', null, '辅助元素校验', 'JYQHTZZDQHGSBZCPGLXX', 'FZYSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('895', '校验凭证表中的科目代码与科目表中对应科目体系的科目代码一致，且固定辅助元素项不一致的情况', 1, ' ', ' ', null, null, '<SQL>select distinct A.d_chk_acc       as 凭证日期,
                A.c_port_code     as 组合代码,
                A.c_sec_var_code  as 证券品种,
                A.c_mkt_code      as 交易市场,
                A.c_dta_code      as 交易属性,
                A.c_dv_issue_mode as 发行方式,
                A.c_dv_invest_cls as 投资分类,
                A.c_td_chan_code  as 交易渠道,
                A.c_dc_code       as 币种,
                A.c_sec_code      as 证券内码,
                A.c_fee_code      as 费用代码,
                A.c_dv_acc_type   as 帐户类型
  from (select a.d_chk_acc,
               a.c_port_code,
               a.c_km_code_t,
               a.c_sec_var_code,
               a.c_mkt_code,
               a.c_dta_code,
               a.c_dv_issue_mode,
               a.c_dv_invest_cls,
               a.c_td_chan_code,
               a.c_dc_code,
               a.c_sec_code,
               a.c_fee_code,
               a.c_dv_acc_type
          from t_d_ai_act_val a
         where a.c_port_code = #PORT
           and a.d_chk_acc between #START_DATE and #END_DATE
           and a.c_km_code_t <> '' '') A
  join (select c.c_port_code,c.c_plan_code from t_e_exec_plan_rela c
                          where c.c_plan_type = ''AO_LEVEL'') C
       on A.C_PORT_CODE = C.C_PORT_CODE
  join (select b.c_km_code,
               b.c_sec_var_code,
               b.c_mkt_code,
               b.c_dta_code,
               b.c_dv_issue_mode,
               b.c_dv_invest_cls,
               b.c_td_chan_code,
               b.c_dc_code,
               b.c_sec_code,
               b.c_fee_code,
               b.c_dv_acc_type,
               b.c_plan_code,
               b.n_detail
          from t_f_sc_km b
         where b.c_km_code <> '' ''
           and b.n_detail = 1
           and b.c_sec_var_code <> ''[NA]''
           and b.c_mkt_code <> ''[NA]''
           and b.c_mkt_code <> ''[MKT]''
           and b.c_dta_code <> ''[NA]''
           and b.c_dv_issue_mode <> ''[NA]''
           and b.c_dv_invest_cls <> ''[NA]''
           and b.c_td_chan_code <> ''<TD_CHAN>''
           and b.c_dc_code <> ''[NA]''
           and b.c_sec_code <> ''[NA]''
           and b.c_sec_code <> ''<SEC>''
           and b.c_fee_code <> ''[NA]''
           and b.c_fee_code <> ''<FEE>''
           and b.c_dv_acc_type <> ''[NA]''
           and b.c_ca_code <> ''<CA>'') B
    on A.c_km_code_t = B.c_km_code
   and C.C_PLAN_CODE = B.C_PLAN_CODE
 where (nvl(A.c_sec_var_code, '' '') <> nvl(B.c_sec_var_code, '' ''))
    or (nvl(A.c_mkt_code, '' '') <> nvl(B.c_mkt_code, '' ''))
    or (nvl(A.c_dta_code, '' '') <> nvl(B.c_dta_code, '' ''))
    or (nvl(A.c_dv_issue_mode, '' '') <> nvl(B.c_dv_issue_mode, '' ''))
    or (nvl(A.c_dv_invest_cls, '' '') <> nvl(B.c_dv_invest_cls, '' ''))
    or (nvl(A.c_td_chan_code, '' '') <> nvl(B.c_td_chan_code, '' ''))
    or (nvl(A.c_dc_code, '' '') <> nvl(B.c_dc_code, '' ''))
    or (nvl(A.c_sec_code, '' '') <> nvl(B.c_sec_code, '' ''))
    or (nvl(A.c_fee_code, '' '') <> nvl(B.c_fee_code, '' ''))
    or (nvl(A.c_dv_acc_type, '' '') <> nvl(B.c_dv_acc_type, '' ''))
   and A.c_km_code_t <> '' ''
   and B.c_km_code <> '' ''
   and B.n_detail = 1</SQL>      ', null, '凭证表校验', 'JYPZBYKMDMXTFZYSBT', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('896', '校验非货币组合是否存在期初单位净值', 1, ' ', ' ', null, null, '
           <SQL>select a.c_port_code as 组合代码,a.d_aststat as 估值日期
  from t_r_fr_aststat a
 where a.c_key_code = ''QCDWJZ''
   and exists (select 1
          from t_p_ab_port b
         where a.c_port_code = b.c_port_code
           and b.c_dat_cls not in (''CLS_HB''))
            and  exists(select 1 from t_r_fr_aststat c where a.c_port_code=c.c_port_code and a.d_aststat=c.d_aststat and a.c_key_code <>''QCDWJZ'')
           and a.c_port_code = #PORT
           and a.d_aststat between #START_DATE and #END_DATE
           </SQL>   ', null, '估值表校验', 'JYFHBSFCZDWJZ', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('876', '校验库存表中所有科目之和不等于等于0的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select AA.c_port_code as 组合代码,AA.n_orig_money 原币金额,AA.n_port_money as 本币金额,AA.c_dai_code as 核算项目 from
 (select max(a.c_port_code) as c_port_code,
 a.d_stock,
 max(a.c_dai_code) as c_dai_code,
 sum(a.n_orig_money) as n_orig_money,
 sum(a.n_port_money) as n_port_money
 from t_d_ai_stock a
 where a.c_port_code = #PORT
 and a.d_stock between #START_DATE and #END_DATE
 group by a.d_stock) AA
 where AA.n_orig_money <> 0
 and AA.n_port_money <> 0</SQL>              ', null, '库存表校验', 'JYKCBSYKMHBWL', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('877', '校验运营费用设置节假日设置是否为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.c_port_code as 组合代码,a.c_fee_code as 费用代码,c_dc_code as 币种,a.c_hday_code as 节假日群 from  t_p_ab_inve_fee a where a.c_hday_code = '''' and a.c_port_code = #PORT</SQL>            ', null, '辅助元素校验', 'JYYYFYSZJJR', 'FZYSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('785', '校验判断表中辅助元素存在SEC、[NA]、CA等有问题的科目', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>
  /*校验判断科目映射表中辅助元素存在SEC、[NA]、CA等有问题的科目*/
   select a.c_sec_code as 证券内码,
        a.c_km_code as 科目代码,
        a.c_km_name as 科目名称,
        a.c_sec_var_code as 证券品种,
        a.c_mkt_code as 交易市场,
        a.c_ca_code as 交易账户,
        a.src as 数据源,
        a.facctcode as 原科目代码,
        a.fjjdm as 组合代码,
        a.fyear as 年份
  from md_km_map a
 where (trim(a.c_sec_code) like ''%<SEC>%''
    or trim(a.c_sec_code) like ''%<NA>%''
    or trim(a.c_sec_var_code) like ''%[NA]%''
    or trim(a.c_dta_code) like ''%[NA]%''
    or trim(a.c_dv_issue_mode) like ''%[NA]%''
    or trim(a.c_port_cls_code) like ''%[NA]%''
    or trim(a.c_port_cls_code) like ''%<PORT_CLS>%''
    or trim(a.c_ca_code) like ''%<CA>%''
    or trim(a.c_fee_code) like ''%[NA]%''
    or trim(a.c_net_code) like ''%[NA]%''
    or trim(a.c_dt_code) like ''%[NA]%''
    or trim(a.c_mkt_code) like ''%[NA]%''
    or trim(a.c_dv_acc_type) like ''%[NA]%''
    or trim(a.c_dc_code) like ''%[NA]%''
    or trim(a.c_dv_fee_type) like ''%[NA]%''
    or trim(a.c_td_chan_code) like ''%[NA]%''
    or trim(a.c_td_chan_code) like ''%<TD_CHAN>%'')
    and a.fjjdm = #PORT/*组合代码*/
</SQL>                                                                                                                                                             ', '<SQL>update md_km_map set c_sec_code='' ''  where (trim(c_sec_code) like ''%<SEC>%''
or trim(c_sec_code) like ''%<NA>%'') and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_sec_var_code='' ''  where trim
(c_sec_var_code) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_dta_code='' ''  where trim(c_dta_code) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_dv_issue_mode='' ''  where trim(c_dv_issue_mode) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_port_cls_code='' ''  where (trim(c_port_cls_code) like ''%[NA]%''
or trim(c_port_cls_code) like ''%<PORT_CLS>%'') and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_ca_code='' ''  where
trim(c_ca_code) like ''%<CA>%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_fee_code='' ''  where trim(c_fee_code) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_net_code='' ''  where trim(c_net_code) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_dt_code='' ''  where trim(c_dt_code) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_mkt_code='' ''  where trim(c_mkt_code) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_dv_acc_type='' ''  where trim(c_dv_acc_type) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_dc_code='' ''  where trim(c_dc_code) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_dv_fee_type='' ''  where trim(c_dv_fee_type) like ''%[NA]%''
and fjjdm = #FJJDM</SQL><SQL>update md_km_map set c_td_chan_code='' ''  where (trim(c_td_chan_code) like ''%[NA]%''
or trim(c_td_chan_code) like ''%<TD_CHAN>%'') and fjjdm = #FJJDM</SQL>', '科目映射表校验', 'FZYSCZSECNA', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('786', '新股新债申购业务校验有申请没收确认的异常情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>
/*新股新债申购校验   校验有申请没收确认的异常情况*/
SELECT ipo.c_port_code as 组合代码, ipo.c_dt_code as 交易属性, ipo.d_trade as 新股新债申购日期,ipo.c_iden as 自增序列号,ipo.c_iden_sub as 关联ID号 from t_d_ac_trade_IPO IPO
 where C_DT_CODE in (''XZSG_SQ'',''XGSG_SQ'')
 AND C_IDEN_SUB = ''[root]''
 and IPO.c_port_code = #PORT
 and IPO.d_trade between #START_DATE and #END_DATE
 AND NOT exists (select 1
          from t_d_ac_trade_IPO PB WHERE PB.C_IDEN_SUB = IPO.C_IDEN AND C_DT_CODE IN(''XZSG_QR'',''XGSG_QR''))</SQL>                                      ', null, '新股新债申购业务校验', 'SGYWJYYSQMSQRDYC', 'XGXZSGYWJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('787', '针对回购交易校验有首期是否存在到期数据', 1, 'GM
', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select t.c_port_code as 组合代码,t.d_trade as 交易流水日期,t.c_sec_code as 证券内码 from T_D_AC_TRADE_IVT t where t.c_TD_TYPE LIKE ''HGJY%''
    and t.c_Iden_Sub =''[root]''
    AND t.c_dv_type_sub = ''HGJY_SQ''
    and t.c_port_code = #PORT
    and t.d_trade between #START_DATE and #END_DATE
    and not exists(select 1 from T_D_AC_TRADE_IVT tt where t.c_iden = tt.c_iden_sub and tt.c_dv_type_sub = ''HGJY_DQ'')
    and n_check_state = 1</SQL>        ', null, '银行间交易流水校验', 'ZDHGJYJYYSQSFCZDQSJ', 'YHJJYLSJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('794', '开放申赎业务校验有申请没收确认的异常情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>
/*开放申赎业务校验   校验有申请没收确认的异常情况*/
SELECT ipo.c_port_code as 组合代码,ipo.d_date as 执行日期,ipo.c_sec_code as 证券内码 FROM t_d_ac_trade_sale IPO
WHERE ipo.c_iden_sub = ''[root]''
and c_dt_code = ''CWSS_SGSQ''
and ipo.c_port_code = #PORT
and d_trade between #START_DATE and #END_DATE
and NOT exists (select 1 from t_d_ac_trade_sale c
 where c.c_iden_sub = ipo.c_iden and c_dt_code = ''CWSS_SGQR'')
</SQL>      ', null, '开放申赎业务校验', 'KFSSYWJYYSQMQS', 'KFSSYWJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('795', '校验表存放交易迁移过来的数据是否有缺失', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select b.fdate as 执行日期, b.c_fset as 套账号, b.fjxts as 计息天数, b.fywlb as 业务类别, b.fcfyhkm as 存放银行科目, c.fjjdm as 组合
  from md_YHCKYWNEW b
  left join (select fsetcode, fjjdm, src from md_t_cssysjj) c
    on substr(c.fsetcode, 2, 3) = b.c_fset
   and c.src = b.src
 where c.fjjdm = #PORT
   and b.fdate between #START_DATE and #END_DATE
   and not exists (select 1
          from t_d_ac_trade_dep a
         where a.c_port_code = c.fjjdm
           and a.d_trade = b.fdate
           and a.d_trade between #START_DATE and #END_DATE
           and a.c_port_code = #PORT)
</SQL>                     ', null, '历史银行间交易流水', 'JYBESFYSJQS', 'LSYHJJYLS', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('796', '估值表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'GZBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('797', '凭证表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'PZBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('798', '科目映射表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'KMYSBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('799', '辅助元素校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'FZYSJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('801', '校验表回购交易迁移过来的数据是否有缺失', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select b.fdate as 执行日期,
       b.fzqdm as 证券内码,
       b.fjyxwh as 交易席位,
       b.fbje as 买入金额,
       b.fbsl as 买入数量,
       b.c_fset as 套账号,
       c.fjjdm as 组合代码,
       b.fzqbz as 证券标志
  from md_HZJKQS b
  join (select fsetcode, fjjdm, src from md_t_cssysjj) c
    on substr(c.fsetcode, 2, 3) = b.c_fset
   and c.src = b.src
   and b.fzqbz = ''HG''
 where not exists (select *
          from T_D_AC_TRADE_IVT a
         where a.c_sec_var_code like ''HG%''
           and a.c_port_code = c.fjjdm
           and a.c_sec_code = b.fzqdm
           and a.d_trade = b.fdate
           and b.fdate between #START_DATE and #END_DATE
           and c.fjjdm = #PORT)</SQL>                           ', null, '历史银行间交易流水', 'JYBSFYSJQS', 'LSYHJJYLS', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('819', '银行间债券交易的交易对手方是否与2.5对手方一致', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>
select c_port_code as 组合代码,c_sec_code as 证券内码,d_trade as 流水交易日期,c_td_no as 成交编号,c_td_chan_code as 交易渠道代码,c_td_chan_name as 交易渠道名称,fdsf as 对手方名称,fdsf_code as 对手方代码
  from (select t1.*, t2.fdsf,t2.fdsf_code
          from (select t1.*, t2.c_td_chan_name
                  from (select c_port_code, c_sec_code, d_trade, c_td_no, c_td_chan_code
                          from t_d_ac_trade_ivt a
                         where a.d_trade between #START_DATE and #END_DATE
                           and a.c_td_type = ''ZQJY''  and a.c_dt_code in (''ZQJY_BUY'',''ZQJY_SELL'')
                           and a.c_mkt_code = ''XCFE''  and a.c_td_no is not null
                           and a.c_port_code = #PORT ) t1
      join (select max(c_td_chan_code) as c_td_chan_code，c_td_chan_name
      from t_p_ab_td_chan a  where a.c_dv_chan_type = ''CHAN_ORG'' and c_desc like ''%交易对手方%''
      group by c_td_chan_name) t2
      on t2.c_td_chan_code = t1.c_td_chan_code) t1
      left join (select t3.fjjdm, t4.fscdm || '' CY'' as fzqdm, t1.fdate, t1.fremark, t1.fdsf,t2.c_td_chan_code as
fdsf_code  from (select c_fset,src,fzqdm,fdate as fdate,fgljyf as fdsf,fremark from md_yhzqxx
                             where fdate between #START_DATE and #END_DATE ) t1
                      left join (select replace(fsetcode, ''A'', '''') as fsetcode, fjjdm, src
                                  from md_t_cssysjj) t3
                        on t3.fsetcode = t1.c_fset and t3.src = t1.src
                       join (select max(c_td_chan_code) as c_td_chan_code，c_td_chan_name from t_p_ab_td_chan a
               where a.c_dv_chan_type = ''CHAN_ORG'' and c_desc like ''%交易对手方%''
             group by c_td_chan_name) t2
              on t2.c_td_chan_name = t1.fdsf join (select distinct fzqdm,fscdm from md_cszqxx where fszsh = ''Y'') t4  on t4.fzqdm = t1.fzqdm) t2
            on t2.fjjdm = t1.c_port_code
           and t2.fzqdm = t1.c_sec_code
           and t2.fremark = t1.c_td_no) t
 where c_td_chan_name <> fdsf
</SQL>      ', null, '银行间交易流水校验', 'YHJZQDSFSFYZ', 'YHJJYLSJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('802', '校验存放业务，应收利息科目没有对应的存放投资科目', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>
select a.c_sec_code as 证券内码,
        a.c_sec_var_code as 证券品种,
        a.c_mkt_code as 交易市场,
        a.facctcode as 原科目代码,
        a.facctname as 原科目名称,
        a.facctattr as  原科目性质,
        a.c_plan_code as 方案,
        a.c_km_code as 现科目代码,
        a.c_dai_code as 现核算项目,
        a.fjjdm as 组合代码,
        a.fyear as 年份
   from md_km_map a
  where trim(a.c_sec_code) is not null
    and a.c_dai_code = ''YSLX_ZQ''
    and a.c_sec_var_code like ''CK%''
    and a.c_sec_code not in
        (select b.c_sec_code
           from md_km_map b
          where a.c_plan_code = b.c_plan_code
            and a.fjjdm = b.fjjdm
            and a.fyear = b.fyear
            and a.src = b.src
            and b.c_dai_code = ''HBZC_CK'')
    and a.fjjdm = #PORT</SQL>   ', null, '科目映射表校验', 'CFYWYSLXKM', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('803', '校验证券内码不存在证券基本信息中的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>
/*校验科目映射表中的证券内码不存在证券基本信息中的情况*/
 select a.c_sec_code as 证券内码,
        a.c_km_code as 现科目代码,
        a.c_km_name as 现科目名称,
        a.facctcode as 原科目代码,
        a.facctattr as 原科目性质,
        a.c_sec_var_code as 证券品种,
        a.c_mkt_code as 交易市场,
        a.src as 数据源,
        a.fjjdm as 组合代码,
        a.fyear as 年份
  from md_km_map a
 where trim(a.c_sec_code) is not null
   and a.c_sec_code not in (select distinct c_sec_code
                              from t_p_sv_sec_base
                             where n_check_state = ''1'')
   and a.fjjdm = #PORT/*组合代码*/
</SQL>       ', null, '科目映射表校验', 'ZQNMBCZZQJBXX', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('804', '校验存放业务，存放投资科目没有对应的应收利息科目', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.c_sec_code as 证券内码,
        a.c_sec_var_code as 证券品种,
        a.c_mkt_code as 交易市场,
        a.facctcode as 原科目代码,
        a.facctname as 原科目名称,
        a.facctattr as 原科目性质,
        a.c_plan_code as 方案代码,
        a.c_km_code as 现科目代码,
        a.c_dai_code as 核算项目,
        a.fjjdm as 组合代码,
        a.fyear as 年份
   from md_km_map a
  where trim(a.c_sec_code) is not null
    and a.c_dai_code = ''HBZC_CK''
    and a.c_sec_var_code like ''CK%''
    and a.c_sec_code not in
        (select b.c_sec_code
           from md_km_map b
          where a.c_plan_code = b.c_plan_code
            and a.fjjdm = b.fjjdm
            and a.fyear = b.fyear
            and a.src = b.src
            and b.c_dai_code = ''YSLX_ZQ'') and a.fjjdm = #PORT</SQL> ', null, '科目映射表校验', 'YCKTZYSLXKMBCZCKTZ', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('805', '校验凭证表中科目代码、证券内码是否存在<SEC>', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select c_port_code as 组合代码,c_km_code as 科目代码,c_sec_code as 证券内码,n_vch_num as 凭证号
     from t_d_ai_act_val
     where (c_sec_code like ''%<SEC>%'' or c_km_code like ''%<SEC>%'')
     and (d_chk_acc between #START_DATE and #END_DATE)
     and c_port_code in (select c_port_code
                           from t_e_exec_plan_rela
                           where c_plan_type = ''AO_LEVEL'')
     and c_port_code = #PORT</SQL>             ', null, '凭证表校验', 'PZBKMDMZQNMSEC', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('359', '校验买卖交易凭证与交易流水是否一致', 0, ' ', ' ', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_dta_code      as 交易属性,
       b.c_mkt_code      as 交易市场,
       b.c_dv_issue_mode as 发行方式,
       b.c_dv_invest_cls as 投资分类,
       b.c_dai_code      as 核算项目,
        b.c_dt_code as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额
  from t_d_ai_act_val b
 where b.c_dai_code = ''ZQTZ_CB''
   and (b.c_dt_code like ''%BUY'' or b.c_dt_code like ''%SELL'' or
       b.c_dt_code like ''%DF'')
   and not exists (select 1
          from t_d_ac_trade_ivt c
         where b.d_chk_acc = c.d_trade
           and b.c_dt_code = c.c_dt_code
           and b.c_port_code = c.c_port_code
           and b.c_sec_code = c.c_sec_code
           and b.c_mkt_code=c.c_mkt_code
           and b.c_dta_code=c.c_dta_code
           and b.c_dv_issue_mode=c.c_dv_issue_mode
           and b.c_dv_invest_cls=c.c_dv_invest_cls)
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT
 </SQL>', null, '凭证表校验', 'JYMMJYPZSFYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('361', '校验新股新债业务交易凭证与流水是否一致', 0, ' ', ' ', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_dta_code      as 交易属性,
       b.c_mkt_code      as 交易市场,
       b.c_dv_issue_mode as 发行方式,
       b.c_dv_invest_cls as 投资分类,
       b.c_dai_code      as 核算项目,
       b.c_dt_code as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额
  from t_d_ai_act_val b
 where b.c_dai_code in(''ZQTZ_CB'')
   and b.c_dt_code in (''XGSG_QR'',''XZSG_QR'')
   and not exists (select 1
          from t_d_ac_trade_ipo c
         where b.d_chk_acc = c.d_trade
           and b.c_dt_code = c.c_dt_code
           and b.c_port_code = c.c_port_code
           and b.c_sec_code = c.c_sec_code
           and b.c_mkt_code=c.c_mkt_code
           and b.c_dta_code= c.c_dta_code
           and b.c_dv_issue_mode=c.c_dv_issue_mode
           and b.c_dv_invest_cls=c.c_dv_invest_cls)
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT</SQL>', null, '凭证表校验', 'JYXGXZYWJYPZSFYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('362', '校验资金存放业务凭证与流水是否一致', 0, ' ', ' ', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_dta_code      as 交易属性,
       b.c_mkt_code      as 交易市场,
       b.c_dv_issue_mode as 发行方式,
       b.c_dv_invest_cls as 投资分类,
       b.c_dai_code      as 核算项目,
       b.c_dt_code as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额
  from t_d_ai_act_val b
 where b.c_dai_code in(''HBZC_CK'',''YSLX_ZQ'')
   and b.c_dt_code in (''CKTZ_SQ'',''CKTZ_DQ'',''RCJT_CKLX'')
   and not exists (select 1
          from T_D_AC_TRADE_DEP c
         where b.d_chk_acc >= c.d_trade
           and b.c_port_code = c.c_port_code
           and b.c_sec_code = c.c_sec_code)
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT</SQL>', null, '凭证表校验', 'JYZJCFYWPZSFYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('902', '校验凭证表中的存放品种与存放品种信息不一致的情况', 1, ' ', ' ', null, null, '<SQL>select a.c_port_code    as 组合代码,
       a.d_chk_acc      as 业务日期,
       a.c_km_code      as 科目代码,
       a.c_km_name      as 科目名称,
       a.c_desc         as 描述,
       a.c_sec_code     as 证券代码,
       a.c_sec_var_code as 证券品种
  from t_d_ai_act_val a
 where a.c_sec_var_code like ''CK%''
   and not exists (select 1
          from t_p_sv_sec_base b
         where a.c_sec_code = b.c_sec_code
           and b.c_sec_var_code like ''CK%'')
    and a.c_port_code = #PORT
    and a.d_chk_acc between #START_DATE
    and #END_DATE</SQL>                          ', null, '凭证表校验', 'JYPZCFPZHCFXXBYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('903', '校验期货品种信息上市代码与证券内码不一致的情况', 1, ' ', ' ', null, null, '<SQL>select a.c_sec_code     as 证券内码,
       a.c_sec_name     as 证券名称,
       a.c_sec_mkt_code as 上市代码,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code as 交易市场
  from t_p_sv_sec_base a
 where a.c_sec_var_code like ''QH%''
   and substr(a.c_sec_code, 1, instr(a.c_sec_code, '' '', 1) - 1) <>
       a.c_sec_mkt_code</SQL>                    ', null, '辅助元素校验', 'JYZQNFHGPDMYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('889', '校验股东代码一致时，交易市场不一致的情况', 1, ' ', ' ', null, null, '<SQL>select A.交易市场设置是否一致,A.交易市场代码,A.组合关联代码,A.组合,"2.5组合","2.5股东代码","2.5深圳上海"
         from (select case
         when (F.c_mkt_code = ''XSHG'' and E.fszsh = ''H'') or
              (F.c_mkt_code = ''XSHE'' and E.fszsh = ''S'') or
              (F.c_mkt_code = ''CCFX'' and E.fszsh = ''J'') or
              (F.c_mkt_code = ''CGEX'' and E.fszsh = ''A'') or
              (F.c_mkt_code = ''NEEQ'' and E.fszsh = ''E'') then
          '' ''
         else
          ''交易市场设置不一致''
       end as 交易市场设置是否一致,
       F.c_mkt_code as 交易市场代码,
       F.c_rela_code as 组合关联代码,
       F.c_port_code as 组合,
       E.fjjdm as "2.5组合",
       E.fgddm as "2.5股东代码",
       E.fszsh as "2.5深圳上海"
  from (select b.c_mkt_code, A.c_rela_code, A.c_port_code
          from (select a.c_port_code, a.c_rela_code
                  from t_p_ab_port_rela a
                 where a.c_rela_type = ''RELA_SH_ACC''
                   and a.c_port_code = #PORT) A
          left join t_p_ab_sh_acc b
            on A.c_rela_code = b.c_sh_acc_code) F
  left join (select d.fjjdm, c.fgddm, c.fszsh
               from md_csgddm c
               left join md_t_cssysjj d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src) E
    on F.c_port_code = E.fjjdm
    and F.c_rela_code = E.fgddm) A
    where A.交易市场设置是否一致 <> '' ''</SQL>  ', null, '参数校验', 'JYGDYZSCBYZ', 'CSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('880', '历史参数校验', 1, 'GM ', '20170718 13:32:20 ', 'GM ', '20170718 13:32:20 ', null, null, null, 'LSCSJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('881', '历史估值表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSGZBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('901', '校验凭证表与估值表中存放业务父级科目代码一致且科目代码或者证券内码不一致的情况', 1, ' ', ' ', null, null, '<SQL>select a.c_port_code    as 组合代码,
       a.d_chk_acc      as 业务日期,
       a.c_km_code      as 科目代码,
       a.c_km_name      as 科目名称,
       a.c_desc         as 描述,
       a.c_sec_code     as 证券代码,
       a.c_sec_var_code as 证券品种
  from t_d_ai_act_val a
 where a.c_sec_var_code like ''CK%''
   and a.c_dai_code in (''HBZC_CK'', ''YSLX_ZQ'')
   and exists
 (select 1
          from t_r_fr_aststat b
         where a.c_port_code = b.c_port_code
           and a.d_chk_acc = b.d_aststat
           and a.c_sec_var_code = b.c_sec_var_code
           and a.c_km_code_t = b.c_km_code_t
           and (a.c_km_code <> b.c_km_code or a.c_sec_code <> b.c_sec_code)
           and b.c_sec_var_code like ''CK%'')
           and a.c_port_code = #PORT
           and a.d_chk_acc between #START_DATE  and #END_DATE</SQL>   ', null, '凭证表校验', 'JYPZGZZQNMBYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('882', '历史凭证表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSPZBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('890', '校验交易席位一致时，市场是否一致', 1, ' ', ' ', null, null, '<SQL>select A.组合代码,A.组合关联类型,A.类型代码,A.券商名称,A.席位类别,A.深圳上海,A.交易市场设置是否一致,A.席位类型设置是否一致 from
(select F.c_port_code as 组合代码,
       F.c_rela_code as 组合关联类型,
       F.c_dv_type_code as 类型代码,
       E.fqsmc as 券商名称,
       E.fxwlb as 席位类别,
       E.fszsh as 深圳上海,
       case
         when (F.c_mkt_code = ''XSHG'' and E.fszsh = ''H'') or
              (F.c_mkt_code = ''XSHE'' and E.fszsh = ''S'') then
          ''交易市场设置一致''
         else
          ''交易市场设置不一致''
       end as "交易市场设置是否一致",
       case
         when (F.c_dv_type_code = ''SEAT_COM'' and E.fxwlb = ''PT'') or
              (F.c_dv_type_code = ''SEAT_QUERY'' and E.fxwlb = ''CX'') or
              (F.c_dv_type_code = ''SEAT_MAIN'' and E.fxwlb = ''ZY'') or
              (F.c_dv_type_code = ''SEAT_IND'' and E.fxwlb = ''ZS'') or
              (F.c_dv_type_code = ''SEAT_TAG'' and E.fxwlb = ''ZB'') then
          ''席位类型设置一致''
         else
          ''席位类型设置不一致''
       end as 席位类型设置是否一致
  from (select A.*, b.c_td_chan_code, b.c_mkt_code
          from (select a.c_port_code，a.c_rela_code，a.c_dv_type_code
                  from t_p_ab_port_rela a
                 where a.c_rela_type = ''RELA_TD_SEAT''
                   and a.c_port_code = #PORT) A
          left join t_p_ab_td_chan b
            on A.c_rela_code = b.c_td_chan_code) F
  left join (select d.fjjdm, c.fqsxw,c.fqsmc, c.fxwlb, c.fszsh
               from md_csqsxw c
               left join md_t_cssysjj d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
                where d.fjjdm = #PORT) E
    on F.c_port_code = E.fjjdm
    and F.c_rela_code = E.fqsxw) A
    where A.席位类型设置是否一致 = ''席位类型设置一致''
    and A.交易市场设置是否一致 <> ''交易市场设置一致''</SQL>                   ', null, '参数校验', ' JYXWYZSCBYZ', 'CSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('883', '历史辅助元素校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSFZYSJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('884', '历史开放申赎业务校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSKFSSYWJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('885', '历史科目映射表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSKMYSBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('886', '历史库存表校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSKCBJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('193', '校验科目表中辅助元素相同的科目', 1, ' ', ' ', null, null, '<SQL>select km.c_km_code,km.c_plan_code,km.c_dv_km_cls,km.c_dta_code,km.c_dv_issue_mode,km.c_dv_var_dur,km.c_dv_invest_cls,km.c_port_cls_code,km.c_dai_code,km.c_ca_code,km.c_sec_code,km.c_fee_code,km.c_net_code,km.c_dt_code,km.c_mkt_code, km.c_sec_var_code,km.c_dv_acc_type,km.c_dc_code,km.c_dv_fee_type,km.c_ds_code,km.c_td_chan_code,km.c_cai_curr,km.c_org_code,km.c_dv_invest_mode,km.c_dv_sec_dur,km.c_wart_type,km.c_exer_mode
  from (select a.c_km_code,a.c_plan_code,c_dv_km_cls,c_dta_code,c_dv_issue_mode,c_dv_var_dur,c_dv_invest_cls,c_port_cls_code,c_dai_code,c_ca_code,c_sec_code,c_fee_code,c_net_code,c_dt_code,c_mkt_code,c_sec_var_code,c_dv_acc_type,c_dc_code,c_dv_fee_type,c_ds_code,c_td_chan_code,c_cai_curr,b.c_org_code,b.c_dv_invest_mode,b.c_dv_sec_dur,b.c_wart_type,b.c_exer_mode
  from t_f_sc_km a left join t_f_sc_km_aux b
  on a.c_km_code = b.c_km_code and a.c_plan_code = b.c_plan_code
  where exists (select 1 from t_e_exec_plan_rela d where d.c_plan_type=''AO_LEVEL'' and d.c_port_code=#PORT and a.c_plan_code=d.c_plan_code) and n_detail = ''1'' and n_check_state = ''1'') km
  join (select a.c_dv_km_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_dv_var_dur,a.c_dv_invest_cls,a.c_port_cls_code,a.c_dai_code,a.c_ca_code,a.c_sec_code,a.c_fee_code,a.c_net_code,a.c_dt_code,a.c_mkt_code,a.c_sec_var_code,a.c_dv_acc_type,a.c_dc_code,a.c_dv_fee_type,a.c_ds_code,a.c_td_chan_code,a.c_cai_curr,b.c_org_code,b.c_dv_invest_mode,b.c_dv_sec_dur,b.c_wart_type,b.c_exer_mode
  from (select c.c_km_code,c.c_plan_code,c.c_dv_km_cls,c.c_dta_code,c.c_dv_issue_mode,c.c_dv_var_dur,c.c_dv_invest_cls,c.c_port_cls_code,c.c_dai_code,c.c_ca_code,c.c_sec_code,c.c_fee_code,c.c_net_code,c.c_dt_code,c.c_mkt_code,c.c_sec_var_code,c.c_dv_acc_type,c.c_dc_code,c.c_dv_fee_type,c.c_ds_code,c.c_td_chan_code,c.c_cai_curr from t_f_sc_km c
  where exists (select 1 from t_e_exec_plan_rela d where d.c_plan_type=''AO_LEVEL'' and d.c_port_code=#PORT and c.c_plan_code=d.c_plan_code) and n_detail = ''1'' and n_check_state = ''1'') a
          left join t_f_sc_km_aux b on a.c_km_code = b.c_km_code and a.c_plan_code = b.c_plan_code
         group by a.c_dv_km_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_dv_var_dur,a.c_dv_invest_cls,a.c_port_cls_code,a.c_dai_code,a.c_ca_code,a.c_sec_code,a.c_fee_code,a.c_net_code,a.c_dt_code,a.c_mkt_code,a.c_sec_var_code,a.c_dv_acc_type,a.c_dc_code,a.c_dv_fee_type,a.c_ds_code,a.c_td_chan_code,a.c_cai_curr,b.c_org_code,b.c_dv_invest_mode,b.c_dv_sec_dur,b.c_wart_type,b.c_exer_mode
        having count(*) > 1) c
    on km.c_dv_km_cls = c.c_dv_km_cls
   and km.c_dta_code = c.c_dta_code
   and km.c_dv_issue_mode = c.c_dv_issue_mode
   and km.c_dv_var_dur = c.c_dv_var_dur
   and km.c_dv_invest_cls = c.c_dv_invest_cls
   and km.c_port_cls_code = c.c_port_cls_code
   and km.c_dai_code = c.c_dai_code
   and km.c_ca_code = c.c_ca_code
   and km.c_sec_code = c.c_sec_code
   and km.c_fee_code = c.c_fee_code
   and km.c_net_code = c.c_net_code
   and km.c_dt_code = c.c_dt_code
   and km.c_mkt_code = c.c_mkt_code
   and km.c_sec_var_code = c.c_sec_var_code
   and km.c_dv_acc_type = c.c_dv_acc_type
   and km.c_dc_code = c.c_dc_code
   and km.c_dv_fee_type = c.c_dv_fee_type
   and km.c_ds_code = c.c_ds_code
   and km.c_td_chan_code = c.c_td_chan_code
   and km.c_cai_curr = c.c_cai_curr
   and km.c_org_code = c.c_org_code
   and km.c_dv_invest_mode = c.c_dv_invest_mode
   and km.c_dv_sec_dur = c.c_dv_sec_dur
   and km.c_wart_type = c.c_wart_type
   and km.c_exer_mode = c.c_exer_mode</SQL>', null, '科目体系校验', 'KMTXJY_FZYS', 'KMTXJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('887', '历史新股新债申购业务', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSXGXZSGYW', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('888', '历史银行间交易流水', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'LSYHJJYLS', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('788', '银行间交易流水校验', 1, 'GM
', '20170718 13:32:20', 'GM
', '20170718 13:32:20', null, null, null, 'YHJJYLSJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('789', '校验凭证表核算项目、科目代码是否为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>select c_port_code as 组合代码,c_sec_code as 证券内码,n_vch_num as 凭证号,d_chk_acc as 凭证日期,c_dai_code as 核算项目,c_km_code as 科目代码
  from t_d_ai_act_val
       where n_check_state = ''1''
       and (trim(c_dai_code) is null or trim(c_km_code) is null)
       and c_port_code in (select c_port_code
                           from t_e_exec_plan_rela
                           where c_plan_type = ''AO_LEVEL'')
       and c_port_code = #PORT
       and (d_chk_acc between #START_DATE and #END_DATE)</SQL>                   ', null, '凭证表校验', 'PZBHSXMKMDM', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('790', '校验资产统计表目及核算项目存在两条数据且一正一负', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select
  a.c_port_code as 组合代码,a.d_aststat as 估值日期,a.c_km_code as 科目代码,a.c_key_name as 项目名称,a.c_sec_code as 证券内码,a.c_sec_var_code as 证券品种,a.n_port_mv as 本位币市值,b.n_port_mv as 本位币市值2
  from t_r_fr_aststat a
  join (select c_port_code,
               d_aststat,
               c_km_code,
               c_km_name,
               c_dai_code,
               c_nav_type,
               n_port_mv,
               c_key_code,
               c_key_name,
               c_fee_code,
               c_sec_var_code
          from t_r_fr_aststat) b
    on a.c_port_code = b.c_port_code
   and a.d_aststat = b.d_aststat
   and a.c_km_code = b.c_km_code
   and a.c_dai_code = b.c_dai_code
   and a.n_port_mv + b.n_port_mv = 0

 where trim(a.c_dai_code) is not null
   and a.c_port_code = #PORT /*组合代码*/
   and (a.d_aststat between #START_DATE and
 #END_DATE) /*估值日期*/
   and a.c_nav_type not like ''%TOTAL%''
   and a.c_nav_type not like ''CHECK%''
   and a.n_port_mv <> 0
   and b.n_port_mv <> 0</SQL>         ', null, '估值表校验', 'JYKCBZTYFKMJHSXMCZLT', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('792', '开放申赎业务校验迁移的数据是否缺失', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>
/*开放申赎业务校验   校验迁移的数据是否缺失*/
select b.fdate as 原开放申赎日期, b.fjjdm as 原组合代码, b.fjjmc as 原组合名称, b.fywlb as 原业务类别, b.fje as 原金额, b.fsl as 原数量, b.c_fset as 套账号
  from md_JJYWXX b
  join (select fsetcode, fjjdm, src from md_t_cssysjj) c
    on substr(c.fsetcode, 2, 3) = b.c_fset
   and c.src = b.src
 where not exists (select 1
          from t_d_ac_trade_sale a
         where a.c_sec_var_code like ''JJ%''
           or a.c_sec_var_code like ''LC%''
           and a.c_port_code = c.fjjdm
           and substr(a.c_sec_code,0,6)  = b.fjjdm
           and a.d_trade = b.fdate)
  and fywlb in(''基金赎回'',''申购申请'',''申购确认'')
  and b.fjjdm = #PORT</SQL>        ', null, '历史开放申赎业务校验', 'KFSSYWJYQYSJSFQS', 'LSKFSSYWJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('793', '开放申赎业务校验', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', null, null, null, 'KFSSYWJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('872', '校验估值表中的科目代码与科目表中对应科目体系的科目代码一致，且固定辅助元素项不一致的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select distinct A.d_aststat       as 估值日期,
                A.c_port_code     as 组合代码,
                A.c_sec_var_code  as 证券品种,
                A.c_mkt_code      as 交易市场,
                A.c_dta_code      as 交易属性,
                A.c_dv_issue_mode as 发行方式,
                A.c_dv_invest_cls as 投资分类,
                A.c_td_chan_code  as 交易渠道,
                A.c_dc_code       as 币种,
                A.c_sec_code      as 证券内码,
                A.c_fee_code      as 费用代码,
                A.c_dv_acc_type   as 帐户类型
  from (select a.d_aststat,
               a.c_port_code,
               a.c_km_code_t,
               a.c_sec_var_code,
               a.c_mkt_code,
               a.c_dta_code,
               a.c_dv_issue_mode,
               a.c_dv_invest_cls,
               a.c_td_chan_code,
               a.c_dc_code,
               a.c_sec_code,
               a.c_fee_code,
               a.c_dv_acc_type
          from T_R_FR_ASTSTAT a
         where a.c_port_code = #PORT
           and a.d_aststat between #START_DATE and #END_DATE
           and a.c_km_code_t <> '' '') A
  join (select c.c_port_code,c.c_plan_code from t_e_exec_plan_rela c
                          where c.c_plan_type = ''AO_LEVEL'') C
       on A.C_PORT_CODE = C.C_PORT_CODE
  join (select b.c_km_code,
               b.c_sec_var_code,
               b.c_mkt_code,
               b.c_dta_code,
               b.c_dv_issue_mode,
               b.c_dv_invest_cls,
               b.c_td_chan_code,
               b.c_dc_code,
               b.c_sec_code,
               b.c_fee_code,
               b.c_dv_acc_type,
               b.c_plan_code,
               b.n_detail
          from t_f_sc_km b
         where b.c_km_code <> '' ''
           and b.n_detail = 1
           and b.c_sec_var_code <> ''[NA]''
           and b.c_mkt_code <> ''[NA]''
           and b.c_mkt_code <> ''[MKT]''
           and b.c_dta_code <> ''[NA]''
           and b.c_dv_issue_mode <> ''[NA]''
           and b.c_dv_invest_cls <> ''[NA]''
           and b.c_td_chan_code <> ''<TD_CHAN>''
           and b.c_dc_code <> ''[NA]''
           and b.c_sec_code <> ''[NA]''
           and b.c_sec_code <> ''<SEC>''
           and b.c_fee_code <> ''[NA]''
           and b.c_fee_code <> ''<FEE>''
           and b.c_dv_acc_type <> ''[NA]''
           and b.c_dv_acc_type <> ''<CA>'') B
    on A.c_km_code_t = B.c_km_code
   and C.C_PLAN_CODE = B.C_PLAN_CODE
 where (nvl(A.c_sec_var_code, '' '') <> nvl(B.c_sec_var_code, '' ''))
    or (nvl(A.c_mkt_code, '' '') <> nvl(B.c_mkt_code, '' ''))
    or (nvl(A.c_dta_code, '' '') <> nvl(B.c_dta_code, '' ''))
    or (nvl(A.c_dv_issue_mode, '' '') <> nvl(B.c_dv_issue_mode, '' ''))
    or (nvl(A.c_dv_invest_cls, '' '') <> nvl(B.c_dv_invest_cls, '' ''))
    or (nvl(A.c_td_chan_code, '' '') <> nvl(B.c_td_chan_code, '' ''))
    or (nvl(A.c_dc_code, '' '') <> nvl(B.c_dc_code, '' ''))
    or (nvl(A.c_sec_code, '' '') <> nvl(B.c_sec_code, '' ''))
    or (nvl(A.c_fee_code, '' '') <> nvl(B.c_fee_code, '' ''))
    or (nvl(A.c_dv_acc_type, '' '') <> nvl(B.c_dv_acc_type, '' ''))
   and A.c_km_code_t <> '' ''
   and B.c_km_code <> '' ''
   and B.n_detail = 1</SQL>   ', null, '估值表校验', 'JYGZBYKMDMXTFZYSBT', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('873', '校验科目代码一致，固定辅助核算项不一致的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select case
         when CC.C_SEC_VAR_CODE != BB.C_SEC_VAR_CODE then
          ''估值表凭证表核算项目有差异''
       end as 估值表凭证表核算项目是否有差异,
       case
         when DD.C_SEC_VAR_CODE != CC.C_SEC_VAR_CODE then
          ''库存表估值表核算项目有差异''
       end as 库存表估值表核算项目是否有差异,
       case
         when BB.C_SEC_VAR_CODE != DD.C_SEC_VAR_CODE then
          ''凭证表库存表核算项目有差异''
       end as 凭证表库存表核算项目是否有差异
  from (select b.C_SEC_VAR_CODE,
               b.C_MKT_CODE,
               b.C_DTA_CODE,
               b.C_DV_ISSUE_MODE,
               b.C_DV_INVEST_CLS,
               b.C_TD_CHAN_CODE,
               b.C_DC_CODE,
               b.c_sec_code,
               b.c_km_code,
               b.c_dai_code
          from t_d_ai_act_val b
         where b.c_port_code = #PORT
           and b.d_trade between #START_DATE AND #END_DATE) BB
  left join (select c.C_SEC_VAR_CODE,
                    c.C_MKT_CODE,
                    c.C_DTA_CODE,
                    c.C_DV_ISSUE_MODE,
                    c.C_DV_INVEST_CLS,
                    c.C_TD_CHAN_CODE,
                    c.C_DC_CODE,
                    c.c_sec_code,
                    c.c_km_code,
                    c.c_dai_code
               from t_r_fr_aststat c
              where c.c_port_code = #PORT
                and c.D_ASTSTAT between #START_DATE AND #END_DATE) CC
    on BB.c_km_code = CC.c_km_code
  left join (select d.C_SEC_VAR_CODE,
                    d.C_MKT_CODE,
                    d.C_DTA_CODE,
                    d.C_DV_ISSUE_MODE,
                    d.C_DV_INVEST_CLS,
                    d.C_TD_CHAN_CODE,
                    d.C_DC_CODE,
                    d.c_sec_code,
                    d.c_km_code,
                    d.c_dai_code
               from t_d_ai_stock d
              where d.c_port_code = #PORT
                and d.d_stock between #START_DATE AND #END_DATE) DD
    on BB.c_km_code = DD.c_km_code
</SQL>      ', null, '科目映射表校验', 'JYKMDMYZHSXBYZ', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('800', '校验估值表核算项目、科目代码是否为空', 1, 'GM', '20170718 13:32:20', 'GM', '20170718
13:32:20', '<SQL>select ID_R_FR_ASTSTAT as 自增序列号 ,c_port_code as 组合代码,d_aststat as 估值日期
  from t_r_fr_aststat
  where (trim(c_dai_code) is null or trim(c_km_code) is null)
   and c_port_code in (select c_port_code
                         from t_e_exec_plan_rela
                        where c_plan_type = ''AO_LEVEL'')
                        and c_nav_type <> ''TOTAL''
                        and c_nav_type <> ''TOTAL_ALL''
                        and c_nav_type <> ''CHECK''
   and c_port_code = #PORT
   and (d_aststat between #START_DATE AND #END_DATE)</SQL>', null, '估值表校验', 'GZBHSXMKMDM', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('871', '校验库存表中的科目代码与科目表中对应科目体系的科目代码一致，且固定辅助元素项不一致的情况', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select distinct A.d_stock        as 库存日期,
                A.c_port_code    as 组合代码,
                A.c_km_code_t    as 科目体系科目代码,
                A.c_sec_var_code as 证券品种,
                A.c_dta_code     as 交易属性
  from (select a.d_stock,
               a.c_port_code,
               a.c_km_code_t,
               a.c_sec_var_code,
               a.c_mkt_code,
               a.c_dta_code,
               a.c_dv_issue_mode,
               a.c_dv_invest_cls,
               a.c_td_chan_code,
               a.c_dc_code,
               a.c_sec_code,
               a.c_fee_code,
               a.c_dv_acc_type
          from t_d_ai_stock a
         where a.c_port_code = #PORT
           and a.d_stock between #START_DATE and #END_DATE
           and a.c_km_code_t <> '' '') A
  join (select c.c_port_code,c.c_plan_code
                           from t_e_exec_plan_rela c
                          where c.c_plan_type = ''AO_LEVEL'') C
       on A.C_PORT_CODE = C.C_PORT_CODE
  join (select b.c_km_code,
               b.c_sec_var_code,
               b.c_mkt_code,
               b.c_dta_code,
               b.c_dv_issue_mode,
               b.c_dv_invest_cls,
               b.c_td_chan_code,
               b.c_dc_code,
               b.c_sec_code,
               b.c_fee_code,
               b.c_dv_acc_type,
               b.c_plan_code,
               b.n_detail
          from t_f_sc_km b
         where b.c_km_code <> '' ''
           and b.n_detail = 1
           and b.c_sec_var_code <> ''[NA]''
           and b.c_mkt_code <> ''[NA]''
           and b.c_mkt_code <> ''[MKT]''
           and b.c_dta_code <> ''[NA]''
           and b.c_dv_issue_mode <> ''[NA]''
           and b.c_dv_invest_cls <> ''[NA]''
           and b.c_td_chan_code <> ''<TD_CHAN>''
           and b.c_dc_code <> ''[NA]''
           and b.c_sec_code <> ''[NA]''
           and b.c_sec_code <> ''<SEC>''
           and b.c_fee_code <> ''[NA]''
           and b.c_fee_code <> ''<FEE>''
           and b.c_dv_acc_type <> ''[NA]''
           and b.c_dv_acc_type <> ''<CA>'') B
    on A.c_km_code_t = B.c_km_code
   and C.C_PLAN_CODE = B.C_PLAN_CODE
 where (nvl(A.c_sec_var_code, '' '') <> nvl(B.c_sec_var_code, '' ''))
    or (nvl(A.c_mkt_code, '' '') <> nvl(B.c_mkt_code, '' ''))
    or (nvl(A.c_dta_code, '' '') <> nvl(B.c_dta_code, '' ''))
    or (nvl(A.c_dv_issue_mode, '' '') <> nvl(B.c_dv_issue_mode, '' ''))
    or (nvl(A.c_dv_invest_cls, '' '') <> nvl(B.c_dv_invest_cls, '' ''))
    or (nvl(A.c_td_chan_code, '' '') <> nvl(B.c_td_chan_code, '' ''))
    or (nvl(A.c_dc_code, '' '') <> nvl(B.c_dc_code, '' ''))
    or (nvl(A.c_sec_code, '' '') <> nvl(B.c_sec_code, '' ''))
    or (nvl(A.c_fee_code, '' '') <> nvl(B.c_fee_code, '' ''))
    or (nvl(A.c_dv_acc_type, '' '') <> nvl(B.c_dv_acc_type, '' ''))
   and A.c_km_code_t <> '' ''
   and B.c_km_code <> '' ''
   and B.n_detail = 1</SQL>                    ', null, '库存表校验', 'JYKCBYKMDMXTFZYSBT', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('904', '资金存放业务校验', 1, ' ', ' ', null, null, null, null, null, 'ZJCFYWJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('891', '校验凭证表中当天是否存在手工凭证', 1, ' ', ' ', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_chk_acc   as 业务日期,
       a.c_km_code   as 科目代码,
       a.c_km_name   as 科目名称,
       a.c_desc      as 凭证摘要,
       a.c_dt_code   as 凭证类型
  from t_d_ai_act_val a
 where a.c_dt_code in (''RCJT_ZDYPZ'')
   and a.c_port_code = #PORT
   and a.d_chk_acc between #START_DATE and #END_DATE</SQL>    ', null, '凭证表校验', 'JYPZBCZSGPZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('774', '校验库存表中同一个科目及核算项目存在两条数据且一正一负', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>select a.td_d_ai_stock as 自增序列号, a.c_port_code as 组合代码, a.d_stock as 库存日期, a.c_km_code as 科目代码, a.c_dai_code as 核算项目, a.n_port_money as 本币金额, a.c_sec_code as 证券内码
  from t_d_ai_stock a
  join (select td_d_ai_stock, c_port_code, d_stock, c_km_code, c_dai_code, n_port_money, c_sec_code
   from t_d_ai_stock) b
    on a.c_port_code = b.c_port_code and a.d_stock = b.d_stock  and a.c_km_code = b.c_km_code
     and a.c_dai_code = b.c_dai_code  and a.n_port_money + b.n_port_money = 0
 where trim(a.c_dai_code) is not null  and a.n_port_money <> 0  and b.n_port_money <> 0
  and (a.d_stock between #START_DATE and #END_DATE)
   and a.c_port_code in (select c_port_code  from t_e_exec_plan_rela  where c_plan_type = ''AO_LEVEL'')
   and a.c_km_code not like ''6%''  and a.c_port_code = #PORT
union all select a.td_d_ai_stock, a.c_port_code, a.d_stock,  a.c_km_code, a.c_dai_code, a.n_port_money,
 a.c_sec_code
  from t_d_ai_stock a
  join (select td_d_ai_stock, c_port_code, d_stock, c_km_code, c_dai_code, n_port_money, c_sec_code
          from t_d_ai_stock) b
    on a.c_port_code = b.c_port_code  and a.d_stock = b.d_stock  and a.c_km_code = b.c_km_code
    and a.c_dai_code = b.c_dai_code and a.n_port_money + b.n_port_money = 0
   and a.c_sec_code = b.c_sec_code
 where trim(a.c_dai_code) is not null  and a.n_port_money <> 0  and b.n_port_money <> 0
   and (a.d_stock between #START_DATE and #END_DATE)
   and a.c_port_code in (select c_port_code  from t_e_exec_plan_rela where c_plan_type = ''AO_LEVEL'')
   and a.c_km_code like ''6%'' and a.c_port_code = #PORT</SQL>     ', null, '库存表校验', 'KCBTYKMHSXMCZLTSJ', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('821', '银行间回购交易的交易对手方是否与2.5对手方一致', 1, 'GM', '20170718 13:32:20', 'GM', '20170718 13:32:20', '<SQL>
select c_port_code as 组合代码,c_sec_code as 证券内码,d_trade as 交易流水日期,c_td_no as 成交编号,c_td_chan_code as 交易渠道,c_td_chan_name as 交易渠道名称,fdsf as 对手方,fdsf_code as 对手方代码
  from (select t1.*, t2.fdsf,t2.fdsf_code
   from (select t1.*, t2.c_td_chan_name
    from (select c_port_code, c_sec_code, d_trade, c_td_no, c_td_chan_code
      from t_d_ac_trade_ivt a
       where a.d_trade between #START_DATE and #END_DATE and a.c_td_type = ''HGJY'' and a.c_mkt_code = ''XCFE''
        and a.c_td_no is not null and a.c_port_code = #PORT ) t1
     join (select max(c_td_chan_code) as c_td_chan_code，c_td_chan_name  from t_p_ab_td_chan a
       where a.c_dv_chan_type = ''CHAN_ORG'' and c_desc like ''%交易对手方%''  group by        c_td_chan_name) t2
       on t2.c_td_chan_code = t1.c_td_chan_code) t1
          left join (select t3.fjjdm, t1.fzqdm, t1.fdate,t1.fdqdate, t1.fremark, t1.fdsf,t2.c_td_chan_code as fdsf_code from (select c_fset, src, fzqdm || '' CY'' as fzqdm, fjydate as fdate, fghdate as fdqdate， fdsf, fremark
       from md_yhhgxx
      where fjydate between #START_DATE and #END_DATE ) t1
      left join (select replace(fsetcode, ''A'', '''') as fsetcode, fjjdm, src from md_t_cssysjj) t3
        on t3.fsetcode = t1.c_fset
      and t3.src = t1.src
    join (select max(c_td_chan_code) as c_td_chan_code，c_td_chan_name
     from t_p_ab_td_chan a
 where a.c_dv_chan_type = ''CHAN_ORG'' and c_desc like ''%交易对手方%'' group by c_td_chan_name) t2
    on t2.c_td_chan_name = t1.fdsf) t2  on t2.fjjdm = t1.c_port_code  and t2.fzqdm = t1.c_sec_code
     and t2.fremark = t1.c_td_no) t
 where c_td_chan_name <> fdsf
</SQL>        ', null, '银行间交易流水校验', 'YHJHGDSFSFYZ', 'YHJJYLSJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('1', '验证库存表存在而估值表不存在的情况', 1, ' ', ' ', null, null, '<SQL>select  a.c_port_code as 组合代码, a.d_stock as 库存日期
  from t_d_ai_stock a
 where a.d_stock between #START_DATE and #END_DATE
   and not exists (select 1
          from t_r_fr_aststat b
         where a.c_port_code = b.c_port_code
           and a.d_stock = b.d_aststat)
   and a.c_port_code = #PORT
  group by a.c_port_code, a.d_stock
 order by a.c_port_code</SQL>    ', null, '库存表校验', 'JYKCBCZEGZBBCZDQK', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('898', '校验估值表成本科目的估值数量及估值市值与库存表中库存数量及库存市值是否一致', 1, ' ', ' ', null, null, '<SQL>select 组合代码,业务日期,证券内码,科目代码,科目名称,交易属性,发行方式,投资分类,交易市场,估值数量,库存数量,估值市值,库存市值 from(select a.c_port_code as 组合代码,
       a.d_stock as 业务日期,
       a.c_sec_code as 证券内码,
       a.c_km_code as 科目代码,
       a.c_km_name as 科目名称,
       a.c_dta_code as 交易属性,
       a.c_dv_issue_mode as 发行方式,
       a.c_dv_invest_cls as 投资分类,
       a.c_mkt_code as 交易市场,
       a.n_amount as 库存数量,
       e.n_amount_gz as 估值数量,
       (a.n_port_money + nvl(c.n_port_money, 0)) as 库存市值,
       e.n_port_mv_gz as 估值市值
  from t_d_ai_stock a
  left join (select b.c_port_code,
                    b.d_stock,
                    b.c_sec_code,
                    b.c_km_code,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_dv_var_dur,
                    b.c_dv_invest_cls,
                    b.c_mkt_code,
                    b.n_amount,
                    b.n_port_money
               from t_d_ai_stock b
              where b.c_dai_code = ''ZQTZ_GYBD'') c
    on a.c_port_code = c.c_port_code
   and a.d_stock = c.d_stock
   and a.c_sec_code = c.c_sec_code
   and a.c_dta_code = c.c_dta_code
   and a.c_dv_issue_mode = c.c_dv_issue_mode
   and a.c_dv_var_dur = c.c_dv_var_dur
   and a.c_dv_invest_cls = c.c_dv_invest_cls
   and a.c_mkt_code = c.c_mkt_code
  left join (select d.c_port_code,
                    d.d_aststat,
                    d.c_km_code,
                    d.n_amount    as n_amount_gz,
                    d.n_port_mv   as n_port_mv_gz
               from t_r_fr_aststat d) e
    on a.c_port_code = e.c_port_code
   and a.d_stock = e.d_aststat
   and a.c_km_code = e.c_km_code
 where a.c_port_code = #PORT
   and a.d_stock between #START_DATE and #END_DATE
   and a.c_dai_code = ''ZQTZ_CB''
   and (nvl(a.n_amount, 0) <> nvl(e.n_amount_gz, 0) or
       nvl(a.n_port_money, 0) + nvl(c.n_port_money, 0) <>
       nvl(e.n_port_mv_gz, 0)))</SQL>                                            ', null, '估值表校验', 'JYGZBSJHKCBBJ', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('899', '校验科目映射表中港股的证券内码与品种信息中的证券内码不一致的情况', 1, ' ', ' ', null, null, '<SQL>select a.c_sec_code     as 证券内码,
       a.c_km_name      as 证券名称,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code     as 交易市场,
       a.c_km_code      as 科目代码
  from md_km_map a
 where a.c_sec_var_code like ''GP%''
   and trim(a.c_sec_code) is not null
   and a.c_mkt_code in (''HKCG'', ''HKCS'')
   and not exists
 (select 1
          from t_p_sv_sec_base b
         where b.c_sec_var_code like ''GP%''
           and substr(a.c_sec_code, 1, instr(a.c_sec_code, '' '', 1) - 1) <>
               b.c_sec_mkt_code)
    and a.fjjdm = #PORT
    and a.fyear between to_char(#START_DATE, ''YYYY'') and
       to_char(#END_DATE, ''YYYY'')</SQL>                    ', null, '科目映射表校验', 'JYKMYSZZQNMBYZ', 'KMYSBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('356', '校验回购交易业务流水与凭证是否一致', 0, ' ', ' ', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_mkt_code      as 交易市场,
       b.c_dai_code      as 核算项目,
       b.c_dt_code as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额
  from t_d_ai_act_val b
 where b.c_dai_code in(''MRFSJRZC'',''MRFSJRZC'')
  and b.c_sec_var_code like''HG%''
  and  b.c_dt_code like ''%SQ'' 
   and not exists (select 1
          from t_d_ac_trade_ivt c
         where b.d_chk_acc = c.d_trade
           and substr(b.c_dt_code,1,8) = c.c_dt_code
           and b.c_port_code = c.c_port_code
           and b.c_sec_code = c.c_sec_code
           and b.c_mkt_code=c.c_mkt_code)
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT
 </SQL>', null, '凭证表校验', 'JYHGJYYWLSSFYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('357', '校验开放申赎业务交易凭证与流水是否一致', 0, ' ', ' ', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_dta_code      as 交易属性,
       b.c_mkt_code      as 交易市场,
       b.c_dv_issue_mode as 发行方式,
       b.c_dv_invest_cls as 投资分类,
       b.c_dai_code      as 核算项目,
       b.c_dt_code as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额
  from t_d_ai_act_val b
 where b.c_dai_code in(''ZQTZ_CB'')
   and b.c_dt_code in (''CWSS_QR'',''CWSS_SHQR'')
   and not exists (select 1
          from t_d_ac_trade_sale c
         where b.d_chk_acc = c.d_trade
           and c.c_dt_code = case when b.c_dt_code=''CWSS_QR'' then trim(substr(c.c_dt_code,1,5)||''SGQR'') else b.c_dt_code end
           and b.c_port_code = c.c_port_code
           and b.c_sec_code = c.c_sec_code
           and b.c_mkt_code=c.c_mkt_code
           and b.c_dta_code= c.c_dta_code
           and b.c_dv_issue_mode=c.c_dv_issue_mode
           and b.c_dv_invest_cls=c.c_dv_invest_cls)
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT</SQL>', null, '凭证表校验', 'JYKFSSUWJYPZSFYZ', 'PZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('900', '校验科目映射表中期货的证券内码与品种信息中的证券内码不一致的情况', 1, ' ', ' ', null, null, '<SQL>select a.c_sec_code     as 证券内码,
       a.c_km_name      as 证券名称,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code     as 交易市场,
       a.c_km_code      as 科目代码
  from md_km_map a
 where a.c_sec_var_code like ''QH%''
   and trim(a.c_sec_code) is not null
   and not exists
 (select 1
          from t_p_sv_sec_base b
         where b.c_sec_var_code like ''QH%''
           and substr(a.c_sec_code, 1, instr(a.c_sec_code, '' '', 1) - 1) <>
               b.c_sec_mkt_code)
    and a.fjjdm = #PORT
    and a.fyear between to_char(#START_DATE, ''YYYY'') and
       to_char(#END_DATE, ''YYYY'')</SQL>                    ', null, '科目映射表校验', 'JYKMYSZQHNMBYZ', 'KMYSBJY', 'V45估值并帐');qwq

	   
insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('905', '业务流水校验', 0, 'GH', '20180608 18:32:20', null, null, null, null, null, 'YWLSJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('906', '校验产品分红数据新老系统是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.fjjdm           as 组合代码,
       a.fjjjdm          as 原分级组合代码,
       c.c_port_cls_code as 现分级组合代码,
       a.fh_type         as 原权益类型,
       c.c_ds_code       as 现权益类型,
       a.fh_rq           as 原除权日期,
       c.d_exr           as 现除权日期， a.fh_je as 原基准份额,
       c.n_ben_share     as 现基准份额,
       a.fh_fe           as 原权益金额,
       c.n_equ_money     as 现权益金额,
       a.fh_dwje         as 原除权前单位净值,
       c.n_unit_money_pt as 现除权前单位净值,
       a.fh_aftdwje      as 原除权
  from (select b.fjjdm,
               nvl(SUBSTR(A.FJJDM, 5, 10), '' '') as fjjjdm,
               fh_rq,
               case
                 when FH_TYPE = ''1'' then
                  ''AE_CF''
                 when FH_TYPE = ''2'' then
                  ''AE_BCFH''
                 when FH_TYPE = ''3'' then
                  ''AE_JZFH''
                 when FH_TYPE = ''4'' then
                  ''AE_CEFH''
                 else
                  ''AE_FH''
               end as fh_type,
               fh_fe,
               fh_je,
               fh_dwje,
               fh_aftdwje
          from md_jjhz_fh a
          join md_t_cssysjj b
            on substr(a.fjjdm, 0, 4) = b.fsetcode
           and a.src = b.src) a
  left join t_p_ab_ass_equ c
    on c.c_port_code = a.fjjdm
   and nvl(c.c_port_cls_code, '' '') = nvl(fjjjdm, '' '')
   and c.d_exr = a.fh_rq
   and c.c_ds_code = a.fh_type </SQL> ', null, '参数校验', 'JYCPFHSJXLXTSFYZ', 'CSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('907', '校验存放业务流水新老系统是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code,
       a.d_trade,
       a.d_sett_fact,
       e.fdate,
       a.n_td_money,
       a.n_income
  from T_D_AC_TRADE_DEP a
  left join (select *
          from md_yhckywnew b
          left join md_t_cssysjj c
         on b.c_fset = substr(c.fsetcode, 2, 3)
           and b.src = c.src
           and b.fjylb = ''到期'')e
           on a.d_trade=e.findate and a.d_sett_fact<>e.fdate
           and a.n_td_money=e.fckje
           and a.c_port_code=e.fjjdm
 where a.c_dv_type_sub = ''CKTZ_SQ''
   and exists (select *
          from md_yhckywnew b
          left join md_t_cssysjj c
         on b.c_fset = substr(c.fsetcode, 2, 3)
           and b.src = c.src
           and b.fjylb = ''到期''
           where a.d_trade=b.findate and a.d_sett_fact<>b.fdate
           and a.n_td_money=b.fckje
           and a.c_port_code=c.fjjdm) </SQL> ', null, '参数校验', 'JYCFYWLSXLXTSFYZ', 'CSJY', 'V45估值并帐');qwq
		   
insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('908', '校验对价派息业务凭证与流水是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_dta_code      as 交易属性,
       b.c_mkt_code      as 交易市场,
       b.c_dv_issue_mode as 发行方式,
       b.c_dv_invest_cls as 投资分类,
       b.c_dai_code      as 核算项目,
       b.c_dt_code       as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额,
       b.c_data_idf      as 数据来源
  from t_d_ai_act_val b
 where b.c_dai_code = ''YSLX_ZQ''
   and b.c_dt_code in (''DJPX_DF'', ''DJPX_FHPX'', ''DJPX_HLTZ'')
   and not exists
 (select 1
          from t_d_ac_trade_en a
         where a.c_port_code = b.c_port_code
           and a.d_trade = b.d_chk_acc
           and a.c_dt_code = b.c_dt_code
           and a.c_sec_code = b.c_sec_code
           and a.c_sec_var_code = b.c_sec_var_code
           and a.c_mkt_code = b.c_mkt_code
           and a.c_dta_code = b.c_dta_code
           and a.c_dv_issue_mode = b.c_dv_issue_mode
           and a.c_dv_invest_cls = b.c_dv_invest_cls)  
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
           and b.c_port_code = #PORT</SQL> ', null, '业务流水校验', 'JYDJPXYWPZYLSSFYZ', 'YWLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('909', '校验估值表存在且对应的库存表不存在的情况', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select distinct a.c_port_code as 组合代码, a.d_aststat as 估值日期
  from t_r_fr_aststat a
 where not exists (select 1
          from t_d_ai_stock b
         where a.c_port_code = b.c_port_code
           and a.d_aststat = b.d_stock)
where a.c_port_code = #PORT
   and a.d_aststat between #START_DATE and #END_DATE </SQL> ', null, '估值表校验', 'JYGZBCZQDYKCBBCZDQK', 'GZBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('910', '校验库存表中科目代码是否存在余额表中', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code     as 组合代码,
       a.d_stock         as 库存日期,
       a.c_km_code       as 科目代码,
       a.c_km_name       as 科目名称,
       a.c_sec_code      as 证券内码,
       a.c_sec_var_code  as 证券品种,
       a.c_mkt_code      as 交易市场,
       a.c_dta_code      as 交易属性,
       a.c_dv_issue_mode as 发行方式,
       a.c_dv_invest_cls as 投资分类,
       a.c_dai_code      as 核算项目,
       a.n_amount        as 持仓数量,
       a.n_port_money    as 持仓金额
  from t_d_ai_stock a
 where not exists (select 1
          from t_f_bm_bal b
         where a.c_port_code = b.c_port_code
           and a.d_stock = b.d_bal
           and a.c_km_code = b.c_km_code)
   and a.c_year_month <> ''201712''
   and a.c_year_month <> ''201800''
   and a.c_port_code = #PORT
   and a.d_stock between #START_DATE and #END_DATE</SQL>', null, '库存表校验', 'JYKCBKMDMSFCZYEB', 'KCBJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('911', '校验凭证表中科目代码是否存在余额表中', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code     as 组合代码,
       a.d_chk_acc         as 库存日期,
       a.c_km_code       as 科目代码,
       a.c_km_name       as 科目名称,
       a.c_sec_code      as 证券内码,
       a.c_sec_var_code  as 证券品种,
       a.c_mkt_code      as 交易市场,
       a.c_dta_code      as 交易属性,
       a.c_dv_issue_mode as 发行方式,
       a.c_dv_invest_cls as 投资分类,
       a.c_dai_code      as 核算项目,
       a.n_amount        as 持仓数量,
       a.n_port_money    as 持仓金额
  from t_d_ai_act_val a
 where not exists (select 1
          from t_f_bm_bal b
         where a.c_port_code = b.c_port_code
           and a.d_chk_acc = b.d_bal
           and a.c_km_code = b.c_km_code)
   and a.c_port_code = #PORT
   and a.d_stock between #START_DATE and #END_DATE</SQL>', null, '凭证表校验', 'JYPZBKMDMSFCZYEB', 'PZBJY', 'V45估值并帐');qwq
   
insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('912', '校验余额表的科目是否存在库存表中', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_bal       as 库存日期,
       a.c_km_code   as 科目代码,
       a.c_km_name   as 科目名称,
       a.n_a_bal     as 持仓数量,
       a.n_m_bal     as 持仓金额
  from t_f_bm_bal a
 where a.n_detail = 1
   and not exists (select 1
          from t_d_ai_stock b
         where a.c_port_code = b.c_port_code
           and a.d_bal = b.d_stock
           and a.c_km_code = b.c_km_code)
   and (a.n_a_bal <> 0 or a.n_pm_bal <> 0)
   and a.c_port_code = #PORT
   and a.d_stock between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYYEBKMCZKCB', 'YWLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('913', '校验证券流通业务凭证与流水是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select 
  b.c_port_code as 组合代码,
  b.d_chk_acc as 业务日期,
  b.c_dt_code as 交易方式,
  b.c_mkt_code as 交易市场,
  b.c_sec_code as 证券内码,
  b.c_sec_var_code as 证券品种,
  b.c_dai_code as 核算项目,
  b.c_dta_code as 交易属性,
  b.c_dv_issue_mode as 发行方式,
  b.c_dv_invest_cls as 投资分类
  from t_d_ai_act_val b
 where b.c_dai_code = ''ZQTZ_CB''
   and b.c_dt_code = ''ZQLT_ZQLT''
   and b.c_dv_issue_mode like ''WSS%''
   and not exists (
   select 1 from T_D_AC_TRADE_SL c
   where b.c_port_code = c.c_port_code
   and b.d_chk_acc = c.d_trade
   --and nvl(case when c.c_dt_code = '' '' then '' '' else ''ZQLT'' end, '' '') = nvl(c.c_dt_code, '' '') 此字段在此环境下没有意义，不需要添加
   and b.c_sec_code = c.c_sec_code
   and b.c_sec_var_code = c.c_sec_var_code
   and b.c_dc_code = c.c_dc_code
   and b.c_mkt_code = c.c_mkt_code
   and b.c_dta_code = c.c_dta_code
   and b.c_dv_issue_mode = c.c_dv_issue_mode
   and b.c_dv_invest_cls = c.c_dv_invest_cls
   )
   and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT </SQL>', null, '业务流水校验', 'JYZQLTYWPZYLSSFYZ', 'YWLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('914', '校验证券送配业务凭证与流水是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select 
  b.c_port_code as 组合代码,
  b.d_chk_acc as 业务日期,
  b.c_dt_code as 交易方式,
  b.c_mkt_code as 交易市场,
  b.c_sec_code as 证券内码,
  b.c_sec_var_code as 证券品种,
  b.c_dai_code as 核算项目,
  b.c_dta_code as 交易属性,
  b.c_dv_issue_mode as 发行方式,
  b.c_dv_invest_cls as 投资分类
  from t_d_ai_act_val b
 where b.c_dai_code = ''ZQTZ_CB''
   and b.c_dt_code in (''ZQSP_JJHB'',''ZQSP_JJFC'',''ZQSP_SG'',''ZQSP_PG'',''ZQSP_CF'')
   and not exists (
   select 1 from T_D_AC_TRADE_DS c
   where b.c_port_code = c.c_port_code
   and b.d_chk_acc = c.d_trade
   and b.c_dt_code = c.c_dt_code
   and b.c_sec_code = c.c_sec_code_i
   and b.c_sec_var_code = c.c_sec_var_code_i
   and b.c_dc_code = c.c_dc_code_i
   and b.c_mkt_code = c.c_mkt_code_i
   and b.c_dta_code = c.c_dta_code_i
   and b.c_dv_issue_mode = c.c_dv_issue_mode_i
   and b.c_dv_invest_cls = c.c_dv_invest_cls_i
   )
   and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT</SQL>', null, '业务流水校验', 'JYZQSPYWPZYLSSFYZ', 'YWLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('915', '校验证券转换业务凭证与流水是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_dta_code      as 交易属性,
       b.c_mkt_code      as 交易市场,
       b.c_dv_issue_mode as 发行方式,
       b.c_dv_invest_cls as 投资分类,
       b.c_dai_code      as 核算项目,
       b.c_dt_code       as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额,
       b.c_data_idf      as 数据来源
  from t_d_ai_act_val b
 where b.c_dai_code = ''ZQTZ_CB''
   and b.c_dt_code in (''ZQZH_FBZLOF'',''ZQZH_XSTZ'',
                       ''ZQZH_DMBG'',
                       ''ZQZH_CFL'',
                       ''ZQZH_HG'',
                       ''ZQZH_JJZH'',
                       ''ZQZH_ZQDH'',
                       ''ZQZH_ZSTZ'',
                       ''ZQZH_ZTG'',
                       ''ZQZH_ZZG'',
                       ''ZQZH_GFSG_GGT'',
                       ''ZQZH_QZZH'')
   and not exists
 (select 1
          from t_d_ac_trade_se a
         where a.c_port_code = b.c_port_code
           and a.d_trade = b.d_chk_acc
           and a.c_dt_code = b.c_dt_code
           and (a.c_sec_code = b.c_sec_code or a.c_sec_code_i = b.c_sec_code)
           and (a.c_sec_var_code = b.c_sec_var_code or a.c_sec_var_code_i=b.c_sec_var_code)
          and (a.c_mkt_code = b.c_mkt_code or a.c_mkt_code_i=b.c_mkt_code)
          and (a.c_dta_code = b.c_dta_code or a.c_dta_code_i=b.c_dta_code)
           and (a.c_dv_issue_mode = b.c_dv_issue_mode or a.c_dv_issue_mode_i=b.c_dv_issue_mode)
           and (a.c_dv_invest_cls = b.c_dv_invest_cls or a.c_dv_issue_mode_i=b.c_dv_invest_cls))
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
   and b.c_port_code = #PORT</SQL>', null, '业务流水校验', 'JYZQZHYEPZYLSSFYZ', 'YWLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('916', '校验资金追加提取业务凭证与流水是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select b.c_port_code     as 组合代码,
       b.d_chk_acc       as 业务日期,
       b.c_sec_code      as 证券内码,
       b.c_sec_var_code  as 证券品种,
       b.c_dta_code      as 交易属性,
       b.c_mkt_code      as 交易市场,
       b.c_dv_issue_mode as 发行方式,
       b.c_dv_invest_cls as 投资分类,
       b.c_dai_code      as 核算项目,
       b.c_dt_code       as 交易方式,
       b.n_way           as 借贷方向,
       b.c_km_code       as 科目代码,
       b.c_desc          as 摘要,
       b.n_amount        as 数量,
       b.n_port_money    as 本币金额,
       b.c_data_idf      as 数据来源,
       b.*
  from t_d_ai_act_val b
 where b.c_dai_code in (''YFK_SHK'', ''YFK_QTK'','''')
   and b.c_dt_code in (''ZJZJTQ_ZJ'', ''ZJZJTQ_TQ'')
   and not exists
 (select 1
          from t_d_ac_trade_zjzj a
         where a.c_port_code = b.c_port_code
           and a.c_dc_code=b.c_dc_code  
           and a.c_td_type = b.c_dt_code
           and (a.d_sett_due = b.d_chk_acc or a.d_sett=b.d_chk_acc)
           and nvl(a.c_sec_code, '' '') = nvl(b.c_sec_code, '' '')
           and nvl(a.c_mkt_code, '' '') = nvl(b.c_mkt_code, '' '')
           and nvl(a.c_dta_code, '' '') = nvl(b.c_dta_code, '' '')
           and nvl(a.c_dv_issue_mode, '' '') = nvl(b.c_dv_issue_mode, '' '')
           and nvl(a.c_dv_invest_cls, '' '') = nvl(b.c_dv_invest_cls, '' '')
           and nvl(a.c_sec_var_code, '' '') = nvl(b.c_sec_var_code, '' ''))
           and b.d_chk_acc  BETWEEN #START_DATE AND #END_DATE
           and b.c_port_code = #PORT</SQL>', null, '业务流水校验', 'JYZJZJTQYWPZYLSSFYZ', 'YWLSJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('917', '校验产品权益信息权益金额、除权日期、权益类型、税前单位净值是否为空', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code     as 组合代码,
       a.d_exr           as 除权日期,
       a.n_ben_share     as 基准份额,
       a.n_equ_money     as 权益金额,
       a.n_unit_money_pt as 税前单位净值,
       a.n_unit_money_at as 税前单位净值
  from t_p_ab_ass_equ a
 where (trim(a.d_exr) is null
    or trim(a.c_ds_code) is null
    or a.n_equ_money = 0
    or a.n_ben_share = 0
    or a.n_equ_money = 0)
     and a.c_port_code = #PORT and a.d_exr between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYCPQYXXQYJEDSFWK', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('918', '校验产品销售数据确认日期、结算日期是否正确', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.c_port_cls_code as 分级组合,
       a.c_ds_code as 销售方式,
       a.d_sell as 交易日期,
       a.d_confirm as 确认日期,
       getday_hday(''CN'', a.d_sell, nvl(b.n_confirm, 0), ''W'') as 计算确认日期,
       a.d_sett as 结算日期,
       getday_hday(''CN'', a.d_sell, nvl(b.n_sett, 0), ''W'') as 计算结算日期,
       a.n_sell_amount as 确认份额,
       a.n_sell_money as 确认金额,
       a.n_sett_money as 清算金额,
       b.n_confirm as 确认天数,
       b.n_sett as 结算天数
  from t_d_ac_sell_ta a
  left join t_p_co_sett b
    on a.c_port_code = b.c_port_code
   and a.c_ds_code = b.c_ds_code
   and a.c_port_cls_code = b.c_port_cls_code
 where (a.d_confirm <>
       getday_hday(''CN'', a.d_sell, nvl(b.n_confirm, 0), ''W'') or
       a.d_sett <> getday_hday(''CN'', a.d_sell, nvl(b.n_sett, 0), ''W''))
       and a.c_port_code = #PORT
       and a.d_sell between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYCPXSSJQRJSRISFZQ', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('919', '校验产品信息新老系统中成立日期、产品简称、产品名称、产品类型是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.c_ass_code as 资产代码,
       a.c_port_name as 现组合名称,
       b.fjjmc as 原组合名称,
       a.d_build as 现成立日期,
       b.fjjcldate as 原成立日期,
       a.d_close as 现结束日期,
       b.fmoddate as 原结束日期,
       a.c_dat_code as 现资产类型,
       case
         when b.fjjlx = 0 then
          ''ASS_ZQTZJJ''
         when b.fjjlx = 1 then
          ''ASS_ZCGLJH''
         when b.fjjlx = 2 then
          ''ASS_XTZCCP''
         when b.fjjlx = 3 then
          ''ASS_QYNJJJ''
         when b.fjjlx = 4 then
          ''ASS_RQFII''
         else
          ''ASS_ZCGLJH''
       end as 原资产类型,
       a.c_dat_cls as 资产类别,
       case
         when b.fjjlb = 4 then
          ''CLS_ETF''
         when b.fjjlb = 11 then
          ''CLS_LJ''
         when b.fjjlb = 5 then
          ''CLS_HB''
         else
          ''CLS_PT''
       end 资产类别
  from t_p_ab_port a
  left join md_t_cssysjj b
    on a.c_port_code = b.fjjdm
 where a.c_port_name <> b.fjjmc
    or a.d_build <> b.fjjcldate
   and a.c_dat_code <> case
         when b.fjjlx = 0 then
          ''ASS_ZQTZJJ''
         when b.fjjlx = 1 then
          ''ASS_ZCGLJH''
         when b.fjjlx = 2 then
          ''ASS_XTZCCP''
         when b.fjjlx = 3 then
          ''ASS_QYNJJJ''
         when b.fjjlx = 4 then
          ''ASS_RQFII''
         else
          ''ASS_ZCGLJH''
       end
    or a.c_dat_cls <> case
         when b.fjjlb = 4 then
          ''CLS_ETF''
         when b.fjjlb = 11 then
          ''CLS_LJ''
         when b.fjjlb = 5 then
          ''CLS_HB''
         else
          ''CLS_PT''
       end</SQL>', null, '参数校验', 'JYJYCPXXXLXTZSJSFYZ', 'CSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('920', '校验存款交易流水中流水标识、银行总行是否为空', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code    as 组合代码,
       a.c_dv_type_sub  as 业务类型,
       a.c_sec_code     as 证券内码,
       a.c_vir_sec_code as 流水标识,
       a.d_sett_due     as 起始日期,
       a.d_sett_fact    as 截止日期,
       a.n_td_money     as 存单金额,
       a.n_income       as 所含利息,
       a.n_rate         as 计息利率,
       a.c_td_no        as 存单编号,
       b.c_org_code     as 所属机构,
       b.c_bank_code    as 银行总行
  from t_d_ac_trade_dep a
  left join (select *
               from t_p_sv_sec_base b
              where b.n_check_state = 1
                and b.c_sec_var_code like ''CK%'') b
    on (a.c_vir_sec_code = b.c_sec_code or a.c_sec_code = b.c_sec_code)
 where a.n_check_state = 1
   and (trim(a.c_vir_sec_code) is null or trim(b.c_org_code) is null or
       trim(b.c_bank_code) is null)
      and a.c_port_code = #PORT</SQL>', null, '业务流水校验', 'JYCKJYLSSFWK', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('921', '校验分级组合设置新老系统是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select c.fjjdm               as 组合代码,
       c.fjjjjdm             as 分级组合代码,
       c.fxsmc               as 分级组合名称,
       c.d_to_list           as 原成立日期,
       c.c_dv_port_cls_type  as 原分级类型,
       e.c_dv_port_cls_type  as 现分级类型,
       c.c_dv_port_cls_level as 原分级级别,
       e.c_dv_port_cls_level as 现分级级别,
       c.c_dv_port_cls       as 原分级级别类型,
       e.c_dv_port_cls       as 现分级级别类型,
       c.d_to_list           as 原成立日期,
       e.d_to_list           as 现成立日期
  from (select a.fjjdm as fjjjjdm,
               b.fjjdm,
               a.fxsmc,
               decode(fhstype,
                      ''按货币基金销售费费率级别进行核算'',
                      ''PCT_FEE'',
                      ''PCT_CREAT'') c_dv_port_cls_type,
               case
                 when fjjtype = ''申购赎回费份额'' then
                  ''PCLF_SGSHFE''
                 when fjjtype = ''销售费率份额'' then
                  ''PCLF_XSFLFE''
                 when fjjtype like ''%看涨%'' then
                  ''PCLC_RISE''
                 when fjjtype like ''%看跌%'' then
                  ''PCLC_FAIL''
                 when fjjtype = ''优先级份额'' or fjjtype = ''创新类小康级别'' then
                  ''PCLC_FIRST''
                 when fjjtype = ''普通级份额'' or fjjtype = ''创新类普通级别'' then
                  ''PCLC_COMMO''
                 when fjjtype = ''进取级份额'' or fjjtype = ''创新类远见级别'' then
                  ''PCLC_AHEAD''
                 else
                  ''PCLC_COMMO''
               end c_dv_port_cls_level,
               fdate as d_to_list,
               ''PORT_'' || a.ffundjb as c_dv_port_cls,
               ''CNY'' as c_dc_code,
               decode(fhstype,
                      ''按货币基金销售费费率级别进行核算'',
                      ''SYFP_FE'',
                      ''SYFP_BF'')
          from md_fxsflv a
          join md_t_cssysjj b
            on a.fzjjdm = b.fsetcode
           and a.fsub = ''0''
           and a.fbz = ''1''
           and a.src = b.src) c
  left join t_p_aa_port_cls e
    on c.fjjdm = e.c_port_code
   and c.fjjjjdm = e.c_port_cls_code
 where (trim(e.c_port_cls_code) is null
    or c.c_dv_port_cls_type <> e.c_dv_port_cls_type
    or c.c_dv_port_cls_level <> e.c_dv_port_cls_level
    or c.c_dv_port_cls <> e.c_dv_port_cls
    or c.d_to_list <> e.d_to_list) and a.c_port_code = #PORT</SQL>', null, '参数校验', 'JYFZZHSZXLXTSFYZ', 'CSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('922', '校验估值表中估值指标项是否存在', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_aststat as 业务日期,
       case
         when a.c_key_code = ''SSZB'' then ''实收资本''
         when a.c_key_code = ''ZCHJ'' then ''资产合计''
         when a.c_key_code = ''ZCJZ'' then ''资产净值''
         when a.c_key_code = ''DWJZ'' then ''单位净值''
         when a.c_key_code = ''LJDWJZ'' then ''累计单位净值''
         when a.c_key_code = ''QCDWJZ'' then ''期初单位净值''
         when a.c_key_code = ''ZRDWJZ'' then ''昨日单位净值''
         when a.c_key_code = ''LJPXJE'' then ''累计派现金额''
         when a.c_key_code = ''DWKFPSY'' then ''单位可分配收益''
         when a.c_key_code = ''KFPSY'' then ''可分配收益''
         when a.c_key_code = ''SXSY'' then ''实现收益''
         else ''''
       end as 科目名称,
       case
         when a.c_key_code = ''SSZB'' then ''SSZB''
         when a.c_key_code = ''ZCHJ'' then ''ZCHJ''
         when a.c_key_code = ''ZCJZ'' then ''ZCJZ''
         when a.c_key_code = ''DWJZ'' then ''DWJZ''
         when a.c_key_code = ''LJDWJZ'' then ''LJDWJZ''
         when a.c_key_code = ''QCDWJZ'' then ''QCDWJZ''
         when a.c_key_code = ''ZRDWJZ'' then ''ZRDWJZ''
         when a.c_key_code = ''LJPXJE'' then ''LJPXJE''
         when a.c_key_code = ''DWKFPSY'' then ''DWKFPSY''
         when a.c_key_code = ''KFPSY'' then ''KFPSY''
         when a.c_key_code = ''SXSY'' then ''SXSY''
         else ''''
       end as 项目代码
  from t_r_fr_aststat a
 where not exists (select 1
          from t_r_fr_aststat b
         where a.c_port_code = b.c_port_code
           and a.d_aststat = b.d_aststat
           and b.c_nav_type in (''TOTAL'', ''TOTAL_ALL'')
           and b.c_key_code in (''DWJZ'',''LJDWJZ'',''QCDWJZ'',''ZRDWJZ'',''LJPXJE'',''DWKFPSY'',''KFPSY'',''SXSY'',''SSZB'',''ZCHJ'',''ZCJZ''))
   and a.c_nav_type in (''TOTAL'', ''TOTAL_ALL'')
   and a.c_key_code in (''DWJZ'', ''LJDWJZ'', ''QCDWJZ'', ''ZRDWJZ'',''LJPXJE'',''DWKFPSY'',''KFPSY'', ''SXSY'',''SSZB'',''ZCHJ'',''ZCJZ'')
   and exists (select 1
          from t_p_ab_port c
         where a.c_port_code = c.c_port_code
           and c.c_dat_cls <> ''CLS_HB'')
   and a.c_port_code = #PORT
   and a.d_aststat between #START_DATE and #END_DATE
union all
select a.c_port_code as 组合代码,
       a.d_aststat as 业务日期,
       case
         when a.c_key_code = ''SSZB'' then ''实收资本''
         when a.c_key_code = ''ZCHJ'' then ''资产合计''
         when a.c_key_code = ''ZCJZ'' then ''资产净值''
         when a.c_key_code = ''BRSY'' then ''本日收益''
         when a.c_key_code = ''QRNHSYL'' then ''七日年化收益率''
         when a.c_key_code = ''JJLJWFSY'' then ''基金累计万份收益''
         when a.c_key_code = ''MWFSY'' then ''每万份收益''
         else ''''
       end as 科目名称,
       case
         when a.c_key_code = ''SSZB'' then ''SSZB''
         when a.c_key_code = ''ZCHJ'' then ''ZCHJ''
         when a.c_key_code = ''ZCJZ'' then ''ZCJZ''
         when a.c_key_code = ''BRSY'' then ''BRSY''
         when a.c_key_code = ''QRNHSYL'' then ''QRNHSYL''
         when a.c_key_code = ''JJLJWFSY'' then ''JJLJWFSY''
         when a.c_key_code = ''MWFSY'' then ''MWFSY''
         else ''''
       end as 项目代码
  from t_r_fr_aststat a
 where not exists (select 1
          from t_r_fr_aststat b
         where a.c_port_code = b.c_port_code
           and a.d_aststat = b.d_aststat
           and b.c_nav_type in (''TOTAL'', ''TOTAL_ALL'')
           and b.c_key_code in (''BRSY'',''MWFSY'',''QRNHSYL'',''JJLJWFSY'',''MWFSY'',''SSZB'',''ZCHJ'',''ZCJZ''))
   and a.c_nav_type in (''TOTAL'', ''TOTAL_ALL'')
   and a.c_key_code in (''BRSY'',''MWFSY'',''QRNHSYL'',''JJLJWFSY'',''MWFSY'',''SSZB'',''ZCHJ'',''ZCJZ'')
   and exists (select 1
          from t_p_ab_port c
         where a.c_port_code = c.c_port_code
           and c.c_dat_cls = ''CLS_HB'')
   and a.c_port_code = #PORT
   and a.d_aststat between #START_DATE and #END_DATE</SQL>', null, '估值表校验', 'JYGZBGZZBCZ', 'GZBJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('923', '校验股东账务信息新老系统是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select d.fjjdm as 原组合, c.fgddm as 原股东代码, c.fszsh as 原交易市场
               from md_csgddm c
            left join (select * from md_t_cssysjj d where d.fjjdm = #PORT) d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
                where d.fjjdm = #PORT
                and not exists (select 交易市场,股东代码,组合,组合,股东代码,交易市场,
       case when 股东代码 = 原股东代码 then ''一致''
            else ''不一致'' end  是否一致
          from (select d.fjjdm as 原组合, c.fgddm as 原股东代码, c.fszsh as 原交易市场
               from md_csgddm c
            left join (select * from md_t_cssysjj d where d.fjjdm = #PORT) d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
                where d.fjjdm = #PORT) E
     left join
           (select b.c_mkt_code as 交易市场, A.c_rela_code as 股东代码, A.c_port_code as 组合
          from (select a.c_port_code, a.c_rela_code
                  from t_p_ab_port_rela a
                 where a.c_rela_type = ''RELA_SH_ACC''
                   and a.c_port_code = #PORT) A
          left join t_p_ab_sh_acc b
            on A.c_rela_code = b.c_sh_acc_code) F
    on 组合 = 原组合
    where 股东代码 = 原股东代码)</SQL>', null, '参数校验', 'JYGDZWXLYZ', 'CSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('924', '校验股票、债券估值表与库存表持仓数据是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_aststat as 业务日期,
       a.c_sec_code as 证券内码,
       nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) as 本币估值市值,
       nvl(b.n_port_money, 0) as 本币库存市值,
       nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) - nvl(b.n_port_money, 0) as 本币市值差异,
       nvl(a.n_orig_cost, 0) as 原币估值成本,
       nvl(b.n_orig_money, 0) as 原币库存成本,
       nvl(a.n_orig_cost, 0) - nvl(b.n_orig_money, 0) as 原币成本差异,
       nvl(a.n_amount, 0) as 估值数量,
       nvl(b.n_amount, 0) as 持仓数量,
       nvl(a.n_amount, 0) - nvl(b.n_amount, 0) as 数量差异,
       round(a.n_va_price, 2) as 估值行情,
       round(a.n_port_mv / a.n_amount, 2) as 计算行情,
       round(a.n_va_price, 2) - round(a.n_port_mv / a.n_amount, 2) as 行情差异,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code as 交易市场,
       a.c_dv_invest_cls as 投资分类,
       a.c_dv_issue_mode as 发行方式
  from t_r_fr_aststat a
  left join (select c.c_port_code,
                    c.d_stock,
                    c.c_km_code,
                    c.c_sec_code,
                    c.c_sec_var_code,
                    c.c_dai_code,
                    c.c_dta_code,
                    c.c_dv_issue_mode,
                    c.c_dv_invest_cls,
                    c.c_mkt_code,
                    c.n_amount,
                    nvl(c.n_orig_money, 0) as n_orig_money,
                    nvl(c.n_port_money, 0) + nvl(e.n_port_money, 0) as n_port_money
               from t_d_ai_stock c
               left join t_d_ai_stock e
                 on c.c_port_code = e.c_port_code
                and c.d_stock = e.d_stock
                and c.c_sec_code = e.c_sec_code
                and c.c_sec_var_code = e.c_sec_var_code
                and c.c_mkt_code = e.c_mkt_code
                and c.c_dta_code = e.c_dta_code
                and c.c_dv_invest_cls = e.c_dv_invest_cls
                and c.c_dv_issue_mode = e.c_dv_issue_mode
                and e.c_dai_code = ''ZQTZ_YZJ''
              where (c.c_sec_var_code like ''GP%'' or
                    c.c_sec_var_code like ''ZQ%'')
                and c.c_dai_code = ''ZQTZ_CB'') b
    on a.c_port_code = b.c_port_code
   and a.d_aststat = b.d_stock
   and a.c_sec_code = b.c_sec_code
   and a.c_sec_var_code = b.c_sec_var_code
   and a.c_mkt_code = b.c_mkt_code
   and a.c_dta_code = b.c_dta_code
   and a.c_dai_code = b.c_dai_code
   and a.c_dv_invest_cls = b.c_dv_invest_cls
   and a.c_dv_issue_mode = b.c_dv_issue_mode
   and a.c_km_code = b.c_km_code
 where (a.c_sec_var_code like ''GP%'' or b.c_sec_var_code like ''ZQ%'')
   and a.n_amount <> 0
   and a.c_dai_code = ''ZQTZ_CB''
   and (nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) - nvl(b.n_port_money, 0) <> 0 or
       nvl(a.n_orig_cost, 0) - nvl(b.n_orig_money, 0) <> 0 or
       nvl(a.n_amount, 0) - nvl(b.n_amount, 0) <> 0 or
       round(a.n_va_price, 2) - round(a.n_port_mv / a.n_amount, 2) <> 0 or
       trim(a.c_dv_issue_mode) is null)
   and a.c_port_code = #PORT
   and a.d_aststat between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYGZKCBCCYZ', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('925', '校验核算级别方案中部分核算项目的辅助元素是否缺失', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_plan_code as 方案代码,
       a.c_dai_code  as 核算项目,
       a.n_code_dta  as 交易属性,
       a.n_code_sec  as 证券内码,
       a.n_var_sec   as 证券品种,
       a.n_mkt       as 交易市场,
       a.n_issue     as 发行方式,
       a.n_var_inv   as 投资分类,
       a.n_code_acc as 账户代码,
       a.n_var_acc as 账户类型
  from t_p_ao_dai a
 where (a.c_dai_code in (''ZQTZ_CB'',
                         ''ZQTZ_GYBD'',
                         ''ZQTZ_YZJ'',
                         ''YSLX_ZQ'',
                         ''YSK_GL'',
                         ''GYBD'',
                         ''TZSY_CJSR'',
                         ''TZSY_HLSR'') and
       (a.n_code_dta = 0 or a.n_code_sec = 0 or a.n_mkt = 0 or
       a.n_issue = 0 or a.n_var_inv = 0 or a.n_var_sec = 0))
    or (a.c_dai_code in (''MRFSJRZC'', ''MCHGJRZC'', ''YSLX_ZQ'') and
       (a.n_code_sec = 0 or a.n_var_sec = 0 or a.n_mkt = 0))
    or (a.c_dai_code in (''YSGJ_CB'', ''YSGJ_CDCB'', ''YSGJ_GYBD'') and
       (a.n_code_dta = 0 or a.n_code_sec = 0 or a.n_var_sec = 0 or
       a.n_mkt = 0))
    or (a.c_dai_code in (''HBZJ'', ''YSLX_ZJ'') and
       (a.n_code_acc = 0 or a.n_var_acc = 0))</SQL>', null, '业务流水校验', 'JYHSJBFAYSQS', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('926', '校验回购估值表与库存表持仓数据是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_aststat as 业务日期,
       a.c_sec_code as 证券内码,
       nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) as 本币估值市值,
       nvl(b.n_port_money, 0) as 本币库存市值,
       nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) - nvl(b.n_port_money, 0) as 本币市值差异,
       nvl(a.n_orig_cost, 0) as 原币估值成本,
       nvl(b.n_orig_money, 0) as 原币库存成本,
       nvl(a.n_orig_cost, 0) - nvl(b.n_orig_money, 0) as 原币成本差异,
       nvl(a.n_amount, 0) as 估值数量,
       nvl(b.n_amount, 0) as 持仓数量,
       nvl(a.n_amount, 0) - nvl(b.n_amount, 0) as 数量差异,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code as 交易市场,
       a.c_dv_invest_cls as 投资分类,
       a.c_dv_issue_mode as 发行方式
  from t_r_fr_aststat a
  left join (select c.c_port_code,
                    c.d_stock,
                    c.c_km_code,
                    c.c_sec_code,
                    c.c_sec_var_code,
                    c.c_dai_code,
                    c.c_dta_code,
                    c.c_dv_issue_mode,
                    c.c_dv_invest_cls,
                    c.c_mkt_code,
                    c.n_amount,
                    nvl(c.n_orig_money, 0) as n_orig_money,
                    nvl(c.n_port_money, 0)  as n_port_money
               from t_d_ai_stock c
              where c.c_sec_var_code like ''HG%''
                and c.c_dai_code in(''MRFSJRZC'',''MCHGJRZC'')) b
    on a.c_port_code = b.c_port_code
   and a.d_aststat = b.d_stock
   and a.c_sec_code = b.c_sec_code
   and a.c_sec_var_code = b.c_sec_var_code
   and a.c_mkt_code = b.c_mkt_code
   and a.c_dta_code = b.c_dta_code
   and a.c_dai_code = b.c_dai_code
   and a.c_dv_invest_cls = b.c_dv_invest_cls
   and a.c_dv_issue_mode = b.c_dv_issue_mode
   and a.c_km_code = b.c_km_code
 where a.c_sec_var_code like ''HG%''
   and a.c_dai_code in (''MRFSJRZC'',''MCHGJRZC'')
   and (nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) - nvl(b.n_port_money, 0) <> 0 or
       nvl(a.n_orig_cost, 0) - nvl(b.n_orig_money, 0) <> 0 or
       nvl(a.n_amount, 0) - nvl(b.n_amount, 0) <> 0)
   and a.c_port_code = #PORT
   and a.d_aststat between #START_DATE and #END_DATE</SQL>', null, '估值表校验', 'JYHGGZBYKCBCCYZ', 'GZBJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('927', '校验回购交易业务流水中辅助元素及成交数量、成交金额、清算金额是否为空', 0, 'GH', '20180608 18:32:20', null, null, 'select a.c_port_code      as 组合代码,
       a.d_trade          as 业务日期,
       a.c_td_type        as 交易类型,
       a.c_dt_code        as 交易方式,
       a.c_sec_code       as 证券代码,
       a.c_sec_var_code   as 证券品种,
       a.c_mkt_code       as 交易市场,
       a.c_dta_code       as 交易属性,
       a.c_dv_invest_cls  as 投资分类,
       a.c_dv_issue_mode  as 发行方式,
       a.c_org_code       as 交易手方,
       a.n_td_amount      as 成交数量,
       a.n_td_money       as 成交金额,
       a.n_td_money_port  as 本币成交金额,
       a.n_sett_money_due as 清算金额
  from t_d_ac_trade_ivt a
  left join (select c.c_sec_code,
                    c.c_sec_name,
                    c.c_sec_var_code,
                    c.c_mkt_code
               from t_p_sv_sec_base c
              where c.n_check_state = 1
                and c.c_sec_var_code like ''HG%'') b
    on a.c_sec_code = b.c_sec_code
   and a.c_sec_var_code = b.c_sec_var_code
   and a.c_mkt_code = b.c_mkt_code
 where a.c_sec_var_code like ''HG%''
   and (trim(a.c_mkt_code) is null or trim(a.c_sec_var_code) is null or
       (a.c_mkt_code = ''XCFE'' and trim(a.c_org_code) is null) or
       trim(a.c_td_type) is null or trim(a.c_dt_code) is null or
       a.n_td_amount = 0 or a.n_td_money = 0 or a.n_sett_money_due = 0)
        and a.c_port_code = #PORT and a.d_trade between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYHGJYLSWK', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('928', '校验交易费用子表的数据是否存在交易主表中', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_iden      as 序列,
       a.c_iden_rela as 关联主表ID,
       b.c_iden      as 主表序列,
       b.c_port_code as 组合代码,
       b.d_trade     as 交易日期
  from t_d_ac_trade_ivt_fee a
  left join t_d_ac_trade_ivt b
    on a.c_iden_rela = b.c_iden
 where not exists
 (select 1 from t_d_ac_trade_ivt b where a.c_iden_rela = b.c_iden)</SQL>', null, '业务流水校验', 'JYJYZBCZZBZ', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('929', '校验交易流水中的佣金与对应凭证表中的应付佣金是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_iden as 主表序列,
       a.c_port_code as 组合代码,
       a.d_trade as 交易日期,
       nvl(b.n_fee_money, 0) as 费用金额,
       nvl(f.n_port_money, 0) as 应付佣金,
       a.c_sec_code as 证券代码,
       a.c_sec_var_code as 证券品种,
       a.c_mkt_code as 交易市场,
       a.c_dt_code as 交易方式,
       a.c_dta_code as 交易属性,
       a.c_dv_issue_mode as 发行方式,
       a.c_dv_invest_cls as 投资分类,
       a.c_td_chan_code as 交易席位,
       b.c_iden as 序列,
       b.c_iden_rela as 关联主表ID,
       b.c_fee_code as 费用代码
  from t_d_ac_trade_ivt a
  join t_d_ac_trade_ivt_fee b
    on a.c_iden = b.c_iden_rela
  left join (select c.c_port_code,
                    c.d_chk_acc,
                    c.c_sec_code,
                    c.c_sec_var_code,
                    c.c_mkt_code,
                    c.c_dta_code,
                    c.c_dv_issue_mode,
                    c.c_dv_invest_cls,
                    c.c_dt_code,
                    e.n_port_money
               from (select *
                       from t_d_ai_act_val
                      where c_dai_code in (''ZQTZ_CB'', ''MRFSJRZC'', ''MCHGJRZC'')) c
               join t_d_ai_act_val e
                 on c.c_port_code = e.c_port_code
                and c.d_chk_acc = e.d_chk_acc
                and c.n_vch_num = e.n_vch_num
              where e.c_dai_code = ''YFK_FY_YJ'') f
    on a.c_port_code = f.c_port_code
   and a.d_trade = f.d_chk_acc
   and a.c_sec_code = f.c_sec_code
   and nvl(a.c_sec_var_code, '' '') = nvl(f.c_sec_var_code, '' '')
   and nvl(a.c_mkt_code, '' '') = nvl(f.c_mkt_code, '' '')
   and nvl(a.c_dta_code, '' '') = nvl(f.c_dta_code, '' '')
   and nvl(a.c_dv_issue_mode, '' '') = nvl(f.c_dv_issue_mode, '' '')
   and nvl(a.c_dv_invest_cls, '' '') = nvl(f.c_dv_invest_cls, '' '')
   and a.c_dt_code = case
         when a.c_sec_var_code like ''HG%'' then
          substr(f.c_dt_code, 1, 8)
         else
          f.c_dt_code
       end
 where b.c_fee_code in (''YFL_YJ'')
   and nvl(b.n_fee_money, 0) - nvl(f.n_port_money, 0) <> 0
   and a.d_trade between #START_DATE and #END_DATE
   and a.c_port_code= #PORT</SQL>', null, '业务流水校验', 'JYJYLSYJYPZYJYZ', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('930', '校验节假日群中是否存在CY或者cy', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_hday_code as 节假日代码, a.c_hday_name as 节假日期名称
  from t_p_bi_hday a
 where a.c_hday_code not in (''CY'')
    or a.c_hday_code in (''cy'')
    or not exists
 (select 1 from t_p_bi_hday_sub b where a.c_hday_code = b.c_hday_code)</SQL>', null, '参数校验', 'JYJJRCZCY', 'CSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('931', '校验库存表中持仓的券的投资分类、发行方式及应付交易费用的费用代码、交易市场是否为空', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code     as 组合代码,
       a.d_stock         as 库存日期,
       a.c_km_code       as 科目代码,
       a.c_km_name       as 科目名称,
       a.c_dai_code      as 核算项目,
       a.c_sec_code      as 证券代码,
       a.c_sec_var_code  as 证券代码,
       a.c_mkt_code      as 交易市场,
       a.c_dta_code      as 交易属性,
       a.c_dv_invest_cls as 投资分类,
       a.c_dv_issue_mode as 发行方式,
       a.c_ca_code       as 账户代码,
       a.c_fee_code      as 费用代码,
       a.c_dv_km_cls     as 科目类别
  from t_d_ai_stock a
 where trim(a.c_km_code) is null
    or trim(a.c_km_name) is null
    or trim(a.c_dai_code) is null
    or trim(a.c_dv_km_cls) is null
    or (a.c_dai_code = ''YFK_FY_JY'' and
        (trim(a.c_fee_code) is null or trim(a.c_mkt_code) is null))
    or (a.c_dai_code in (''ZQTZ_CB'',
                         ''ZQTZ_GYBD'',
                         ''ZQTZ_YZJ'',
                         ''YSLX_ZQ'',
                         ''YSK_GL'',
                         ''YFLX_ZQ'',
                         ''GYBD'',
                         ''TZSY_CJSR'',
                         ''TZSY_HLSR'') and
        (a.c_sec_var_code like ''ZQ%'' or a.c_sec_var_code like ''GP%'' or
        a.c_sec_var_code like ''JJ%'' or a.c_sec_var_code like ''LC%'') and
        (trim(a.c_dv_issue_mode) is null or
        trim(a.c_dv_issue_mode) = ''[NA]'' or
        trim(a.c_dv_invest_cls) is null or
        trim(a.c_dv_invest_cls) = ''[NA]''))
        and a.c_port_code = #PORT
        and a.d_stock between #START_DATE and #END_DATE</SQL>', null, '库存表校验', 'JYKCBCCJWK', 'KCBJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('932', '校验理财估值表与库存表持仓数据是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_aststat as 业务日期,
       a.c_sec_code as 证券内码,
       nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) as 本币估值市值,
       nvl(b.n_port_money, 0) as 本币库存市值,
       nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) - nvl(b.n_port_money, 0) as 本币市值差异,
       nvl(a.n_orig_cost, 0) as 原币估值成本,
       nvl(b.n_orig_money, 0) as 原币库存成本,
       nvl(a.n_orig_cost, 0) - nvl(b.n_orig_money, 0) as 原币成本差异,
       nvl(a.n_amount, 0) as 估值数量,
       nvl(b.n_amount, 0) as 持仓数量,
       nvl(a.n_amount, 0) - nvl(b.n_amount, 0) as 数量差异,
       a.n_va_price as 估值行情,
       nvl(f.n_va_price, 0) as 证券行情行情,
       a.n_va_price - nvl(f.n_price_close, 0) as 行情差异,
       a.c_sec_var_code as 估值证券品种,
       b.c_sec_var_code as 库存证券品种,
       a.c_mkt_code as 估值交易市场,
       b.c_mkt_code as 库存交易市场,
       a.c_dv_invest_cls as 估值投资分类,
       b.c_dv_invest_cls as 库存投资分类,
       a.c_dv_issue_mode as 估值发行方式,
       b.c_dv_issue_mode as 库存发行方式
  from t_r_fr_aststat a
  left join (select c.c_port_code,
                    c.d_stock,
                    c.c_km_code,
                    c.c_sec_code,
                    c.c_sec_var_code,
                    c.c_dai_code,
                    c.c_dta_code,
                    c.c_dv_issue_mode,
                    c.c_dv_invest_cls,
                    c.c_mkt_code,
                    c.n_amount,
                    nvl(c.n_orig_money, 0) as n_orig_money,
                    nvl(c.n_port_money, 0) + nvl(e.n_port_money, 0) as n_port_money
               from t_d_ai_stock c
               left join t_d_ai_stock e
                 on c.c_port_code = e.c_port_code
                and c.d_stock = e.d_stock
                and c.c_sec_code = e.c_sec_code
                and c.c_sec_var_code = e.c_sec_var_code
                and c.c_mkt_code = e.c_mkt_code
                and c.c_dta_code = e.c_dta_code
                and c.c_dv_invest_cls = e.c_dv_invest_cls
                and c.c_dv_issue_mode = e.c_dv_issue_mode
                and e.c_dai_code = ''ZQTZ_YZJ''
              where (c.c_sec_var_code like ''LC%'' or c.c_sec_var_code like''JJ%'')
                and c.c_dai_code = ''ZQTZ_CB'') b
    on a.c_port_code = b.c_port_code
   and a.d_aststat = b.d_stock
   and a.c_sec_code = b.c_sec_code
   and a.c_km_code = b.c_km_code
  left join t_d_ai_val_pr f
    on a.c_port_code = f.c_port_code
   and a.c_sec_code = f.c_val_pr_code
   and a.d_aststat = f.d_val_acct
 where (a.c_sec_var_code like ''LC%'' or a.c_sec_var_code like''JJ%'')
   and a.n_amount <> 0
   and a.c_dai_code = ''ZQTZ_CB''
   and (nvl(a.n_port_mv, 0) - nvl(a.n_port_iv, 0) - nvl(b.n_port_money, 0) <> 0 or
       nvl(a.n_orig_cost, 0) - nvl(b.n_orig_money, 0) <> 0 or
       nvl(a.n_amount, 0) - nvl(b.n_amount, 0) <> 0 or
       a.n_va_price - nvl(f.n_va_price, 0) <> 0 or
       trim(a.c_dv_issue_mode) is null or
       a.c_sec_var_code <> b.c_sec_var_code or
       a.c_mkt_code <> b.c_mkt_code or a.c_dta_code <> b.c_dta_code or
       a.c_dai_code <> b.c_dai_code or
       a.c_dv_invest_cls <> b.c_dv_invest_cls or
       a.c_dv_issue_mode <> b.c_dv_issue_mode)
   and f.n_va_price > 0
   and a.c_port_code = #PORT
   and a.d_aststat between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYLCGZBYKCBCCYZ', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('933', '校验凭证表中结息、手工凭证、自定义凭证等异常情况', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code    as 组合代码,
       a.d_chk_acc      as 业务日期,
       a.c_km_code      as 科目代码,
       a.c_km_name      as 科目名称,
       a.n_vch_num      as 凭证号,
       a.n_fl_num       as 凭证分录,
       a.c_dai_code     as 核算项目,
       a.c_dt_code      as 交易方式,
       a.c_desc         as 摘要,
       a.n_amount       as 数量,
       a.n_port_money   as 本币金额,
       a.c_sec_code     as 证券内码,
       a.c_sec_var_code as 证券品种,
       a.c_ca_code      as 账户代码,
       a.c_fee_code     as 费用代码,
       a.c_data_idf     as 凭证来源
  from t_d_ai_act_val a
 where a.c_dt_code in (''ZDYPZ'')
    or a.c_dva_item_code in (''ZDYPZ'')
    or a.c_data_idf in (''H'')
    or (trim(a.c_ca_code) is not null and
       a.c_dai_code not in (''HBZJ'', ''YSLX_ZJ'', ''LXSR_ZJ''))
    or (a.c_km_code in (''1204.09.01'', ''6011.09.01'', ''6011.09.02'') and
       a.c_dai_code not in (''YSLX_ZQ'', ''LXSR_ZQ''))
    or (trim(a.c_ca_code) is null and a.c_dai_code in (''LXSR_ZJ''))
    or (a.c_dva_item_code in (''SZJZYW'') and a.c_dt_code in (''ZJLX'') and
       a.c_dai_code in (''YSLX_ZJ'') and a.c_desc like ''%结息%'' and not exists
        (select *
           from t_d_ac_trade_sett c
          where a.c_port_code = c.c_port_code
            and a.d_chk_acc = c.d_trade
            and a.c_ca_code = c.c_ca_code
            and c.c_ie_code = ''ZJLX''
            and c.c_dv_sz_type = ''SZLX_SK''
            and a.n_port_money = c.n_money_rec))
            and a.c_port_code = #PORT
            and a.d_sett between #START_DATE and #END_DATE
        order by a.c_port_code, a.d_chk_acc, a.n_vch_num</SQL>', null, '凭证表校验', 'JYPZBYCQK', 'PZBJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('934', '校验现金账户设置的账户类型是否设置到明细类型', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_ca_code     as 账户代码,
       a.c_ca_name     as 账户名称,
       a.c_dv_acc_type as 账户类型,
       a.c_dc_code     as 交易币种
  from t_p_bi_cash_acc a
 where (a.c_dv_acc_type like ''ACC_EX_RES%'' or
       a.c_dv_acc_type like ''ACC_LOW_EX_RES%'' or
       a.c_dv_acc_type like ''ACC_TD_BAIL%'')
   and a.c_dv_acc_type not in (''ACC_EX_RES_CG'',
                               ''ACC_EX_RES_CS'',
                               ''ACC_EX_RES_QH'',
                               ''ACC_EX_RES_GGT'',
                               ''ACC_EX_RES_SGT'',
                               ''ACC_LOW_EX_RES_CG'',
                               ''ACC_LOW_EX_RES_CS'',
                               ''ACC_TD_BAIL_CG'',
                               ''ACC_TD_BAIL_CS'',
                               ''ACC_TD_BAIL_QH'',
                               ''ACC_TD_BAIL_GGT'',
                               ''ACC_TD_BAIL_SGT'')</SQL>', null, '业务流水校验', 'JYXJZHSZSFSZDMX', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('935', '校验新老系统的席位是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select d.fjjdm as 原组合, c.fqsxw as 原券商席位,c.fqsmc as 原券商名称, c.fxwlb as 原席位类型,c.fszsh as 深圳上海
               from md_csqsxw c
               left join md_t_cssysjj d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
          where not exists(select * from (select A.*, b.c_td_chan_code, b.c_mkt_code
          from (select a.c_port_code，a.c_rela_code，a.c_dv_type_code
                  from t_p_ab_port_rela a
                 where a.c_rela_type = ''RELA_TD_SEAT''
                   and a.c_port_code = #PORT) A
          left join t_p_ab_td_chan b
            on A.c_rela_code = b.c_td_chan_code) F
  left join (select d.fjjdm, c.fqsxw,c.fqsmc, c.fxwlb, c.fszsh
               from md_csqsxw c
               left join md_t_cssysjj d
                 on c.fsetcode = d.fsetcode
                and c.src = d.src
                where d.fjjdm = #PORT) E
    on F.c_port_code = E.fjjdm
    and F.c_rela_code = E.fqsxw)
    and d.fjjdm = #PORT</SQL>', null, '参数校验', 'JYXLXTXWYZ', 'CSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('936', '校验银行间回购质押券信息新老系统是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select h.c_port_code    as 组合代码,
       h.d_trade        as 交易日期,
       h.d_sett_fact    as 结算日期,
       h.d_sett_first   as 到期日期,
       g.c_sec_code     as 证券内码,
       g.c_sec_code_tag as 质押证券,
       g.n_td_amount    as 现质押数量,
       f.fgzdysl        as 原抵押数量
  from t_d_ac_trade_zyw g
  join t_d_ac_trade_ivt h
    on g.c_iden_rela = h.c_iden
  left join (select e.fjjdm,
                    a.fzqdm,
                    b.fscdm,
                    a.fqsrq,
                    a.fjyrq,
                    a.fdqrq,
                    a.fgzdysl,
                    a.fsqjj,
                    a.fdqjj,
                    a.fpxje
               from md_jjhgdyzq a
               join (select fzqdm, fscdm from md_cszqxx group by fzqdm, fscdm) b
                 on substr(a.fgzdydm, -6) = b.fzqdm
               left join (select c_sec_code,
                                c_sec_var_code,
                                c_mkt_code,
                                c_sec_mkt_code
                           from t_p_sv_sec_base
                          where c_sec_var_code like ''ZQ%''
                            and c_mkt_code = ''XCFE'') c
                 on b.fscdm = c.c_sec_mkt_code
               join md_T_cssysjj e
                 on a.fsetcode = e.fsetcode
                and a.src = e.src) f
    on h.c_port_code = f.fjjdm
   and h.d_trade = f.fjyrq
   and h.d_sett_fact = f.fqsrq
   and h.d_sett_first = f.fdqrq
   and trim(substr(g.c_sec_code, 0, instr(g.c_sec_code, '' '') - 1)) =
       f.fzqdm
   and trim(substr(g.c_sec_code_tag, 0, instr(g.c_sec_code_tag, '' '') - 1)) =
       f.fscdm
 where h.c_mkt_code = ''XCFE''
   and h.c_dv_type_sub = ''HGJY_SQ''
   and (trim(f.fzqdm) is null or g.n_td_amount <> nvl(f.fgzdysl, 0))
   and a.c_port_code = #PORT and a.d_trade between #START_DATE and #END_DATE</SQL>', null, '参数校验', 'JYYHJHGZYJYZ', 'CSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('937', '校验债券交易业务流水中辅助元素及成交数量、成交金额、清算金额是否为空', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code      as 组合代码,
       a.d_trade          as 业务日期,
       a.c_td_type        as 交易类型,
       a.c_dt_code        as 交易方式,
       a.c_sec_code       as 证券代码,
       a.c_sec_var_code   as 证券品种,
       a.c_mkt_code       as 交易市场,
       a.c_dta_code       as 交易属性,
       a.c_dv_invest_cls  as 投资分类,
       a.c_dv_issue_mode  as 发行方式,
       a.c_org_code       as 交易手方,
       a.n_td_amount      as 成交数量,
       a.n_td_money       as 成交金额,
       a.n_td_money_port  as 本币成交金额,
       a.n_sett_money_due as 清算金额
  from t_d_ac_trade_ivt a
  left join (select c.c_sec_code,
                    c.c_sec_name,
                    c.c_sec_var_code,
                    c.c_mkt_code
               from t_p_sv_sec_base c
              where c.n_check_state = 1
                and c.c_sec_var_code like ''ZQ%'') b
    on a.c_sec_code = b.c_sec_code
   and a.c_sec_var_code = b.c_sec_var_code
   and a.c_mkt_code = b.c_mkt_code
 where a.c_sec_var_code like ''ZQ%''
   and (trim(a.c_dta_code) is null or trim(a.c_dv_invest_cls) is null or
       trim(a.c_dv_issue_mode) is null or trim(a.c_mkt_code) is null or
       trim(a.c_sec_var_code) is null or
       (a.c_mkt_code = ''XCFE'' and trim(a.c_org_code) is null) or
       trim(a.c_td_type) is null or trim(a.c_dt_code) is null or
       a.n_td_amount = 0 or a.n_td_money = 0 or a.n_sett_money_due = 0)
        and a.c_port_code = #PORT and a.d_trade between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYZJJYLSWK', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('938', '校验资金追加提取业务中辅助元素是否为空', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_trade     as 交易日期,
       a.d_sett      as 确认日期,
       a.d_sett_due  as 结算日期,
       a.c_td_type   as 业务类型,
       a.c_dc_code   as 交易币种,
       a.n_td_money  as 交易金额,
       a.n_td_amount as 资产数量,
       a.n_qr_amount as 确认份额,
       a.c_dta_code  as 交易属性,
       a.c_mkt_code  as 交易市场,
       a.c_dv_act    as 核算方式
  from t_d_ac_trade_zjzj a
 where (trim(a.c_td_type) is null or trim(a.n_qr_amount) = 0 or
       trim(a.n_td_money) = 0 or trim(a.n_td_amount) = 0 or
       trim(a.n_qr_amount) = 0)
       and a.c_port_code = #PORT
       and a.d_sett between #START_DATE and #END_DATE</SQL>', null, '业务流水校验', 'JYZJZJTQWK', 'YWLSJY', 'xbrl信批');qwq
		  
insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('939', '校验2.5券品和4.5的起息日，票面价值，证券品种等基本信息是否一致', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select distinct 
       FPMJE as 票面金额,
       FJXQSR as 计息起始日,
       FJXJZR as 计息截止日,
       FPMLV as 票面利率 
       from MD_CSZQXX x
       left join T_P_SV_SEC_BASE y 
       on x.FSCDM = y.C_SEC_MKT_CODE
		  and y.C_MKT_CODE = case when x.fszsh = ''S'' then ''XSHE''
                             when x.fszsh in (''Y'',''S'') then ''XCFE''
                             when x.fszsh in (''G'',''H'') then ''XSHG'' end
       where y.C_SEC_VAR_CODE like ''ZQ_%''
           and not exists (
             select N_FV_ISSUE,D_AI_BEGIN,D_AI_END,N_FV_IR from T_P_SV_SEC_BASE y 
                 where round(x.fpmje,4) = round(y.n_fv_issue,4)
                       and x.fjxqsr = y.d_ai_begin
                       and x.fjxjzr = y.d_ai_end
                       and round(x.fpmlv,4) = round(y.n_fv_ir,4)                                 
            )</SQL>', '<SQL>update MD_CSZQXX x set x.fszsh = 
			( select max(distinct MD_HZJKHZ.fszsh) 
				from MD_HZJKHZ ,MD_CSZQXX 
				where MD_HZJKHZ.FZQDM = MD_CSZQXX.FZQDM and MD_HZJKHZ.FZQDM = x.FZQDM 
			)
			where x.fszsh = '' '' or x.fszsh is null</SQL>
			<SQL>update MD_CSZQXX set fszsh = ''Y'' WHERE fszsh IS NULL or fszsh ='' ''</SQL>', '业务流水校验', 'JY24JPJBXXYZ', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('940', '检验前一天的资产净值+当天发生是否等于当天的资产净值', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select id_r_fr_aststat as 资产统计表ID,
       c_port_code as 组合,
       D_ASTSTAT as 日期,
       N_ORIG_MV_Z as 原币,
       N_PORT_MV_Z as 本币
 from T_R_FR_ASTSTAT a
 left join (
      select (N_ORIG_MV - (N_ORIG_MV_P + N_ORIG_MONEY_ZC + N_ORIG_MONEY_GT - N_ORIG_MONEY_FZ)) AS N_ORIG_MV_Z,
             (N_PORT_MV - (N_PORT_MV_P + N_PORT_MONEY_ZC + N_PORT_MONEY_GT - N_PORT_MONEY_FZ)) AS N_PORT_MV_Z
      from (
            ( select nvl(sum(N_ORIG_MONEY * N_WAY),0) as N_ORIG_MONEY_ZC， nvl(sum(N_PORT_MONEY  * N_WAY),0) as N_PORT_MONEY_ZC 
                from T_D_AI_ACT_VAL 
                where C_PORT_CODE = #PORT and  C_DV_KM_CLS =''KC_ZC'' and d_trade=#START_DATE)a
                
            left join 
            ( select nvl(sum(N_ORIG_MONEY * N_WAY),0) as N_ORIG_MONEY_GT， nvl（sum(N_PORT_MONEY * N_WAY),0） as N_PORT_MONEY_GT  
                from T_D_AI_ACT_VAL 
                where C_PORT_CODE = #PORT and  C_DV_KM_CLS =''KC_GT'' and d_trade=#START_DATE)b
            on 1=1

            left join
            ( select nvl(sum（N_ORIG_MONEY * N_WAY),0) as N_ORIG_MONEY_FZ， nvl(sum（N_PORT_MONEY  * N_WAY),0) as N_PORT_MONEY_FZ 
                from T_D_AI_ACT_VAL 
                where C_PORT_CODE = #PORT and  C_DV_KM_CLS =''KC_FZ'' and d_trade=#START_DATE)c      
             on 1=1  
             
             LEFT JOIN
             (select distinct nvl(N_ORIG_MV,0) as N_ORIG_MV_P ，nvl(N_PORT_MV,0) as N_PORT_MV_P  
                from T_R_FR_ASTSTAT 
                where C_PORT_CODE=#PORT and D_ASTSTAT=#START_DATE -1 and C_KEY_CODE=''ZCJZ'')d
             ON 1=1
             
             LEFT JOIN
             (select distinct nvl(N_ORIG_MV,0) as N_ORIG_MV，nvl(N_PORT_MV,0) as N_PORT_MV 
                from T_R_FR_ASTSTAT 
                where C_PORT_CODE=#PORT and D_ASTSTAT=#START_DATE and C_KEY_CODE=''ZCJZ'')e
             ON 1=1    
      )
 ) z
 on 1=1
where C_PORT_CODE=#PORT and D_ASTSTAT=#START_DATE and C_KEY_CODE=''ZCJZ'' and (z.N_ORIG_MV_Z !=0 or z.N_PORT_MV_Z !=0)</SQL>', null, '业务流水校验', 'JYZCJZFSQK', 'YWLSJY', 'xbrl信批');qwq

declare
	content clob;
begin
	content:='<SQL>select C_PORT_CODE as 组合代码,
       D_ASTSTAT as 校验日期,
       c_key_name as 证券名称,
       n_amount as 当日数量, 
       n_amount_p as 前一天数量,
       nvl(n_td_amount_c,0) as 交易流水数量汇总,
       nvl(n_td_amount_d,0) as 证券送配数量汇总,
       nvl(n_td_amount_e,0) as 开放申赎数量汇总,
       nvl(n_td_amount_f,0) as 新股新债数量汇总,
       nvl(n_td_amount_g,0) as 行权投资数量汇总,
       nvl(n_td_amount_h,0) as 远期投资数量汇总 
 from (
    select a.n_amount as n_amount,
           b.n_amount as n_amount_p,
           c.N_TD_AMOUNT_C as n_td_amount_c,
           d.N_TD_AMOUNT_D as n_td_amount_d,
           e.N_TD_AMOUNT_E as n_td_amount_e,
           f.N_TD_AMOUNT_F as n_td_amount_f,
           g.N_TD_AMOUNT_G as n_td_amount_g,
           h.N_TD_AMOUNT_H as n_td_amount_h,
           a.D_ASTSTAT as D_ASTSTAT,
           a.C_PORT_CODE as C_PORT_CODE,
           a.c_key_name as  c_key_name
    from(
        ( select * from T_R_FR_ASTSTAT 
             where D_ASTSTAT = #START_DATE and C_PORT_CODE = #PORT and C_NAV_TYPE=''SEC''
        )a 
        left join 
        ( select * from T_R_FR_ASTSTAT 
             where D_ASTSTAT = #START_DATE-1 and C_PORT_CODE = #PORT and C_NAV_TYPE=''SEC'')b
        on a.C_PORT_CODE = b.C_PORT_CODE and a.C_SEC_CODE = b.C_SEC_CODE
           and a.C_SEC_VAR_CODE = b.C_SEC_VAR_CODE and a.C_MKT_CODE = b.C_MKT_CODE 
           and a.C_DTA_CODE = b.C_DTA_CODE and a.C_DV_ISSUE_MODE = b.C_DV_ISSUE_MODE
           and a.C_DV_INVEST_CLS = b.C_DV_INVEST_CLS
        left join 
        ( select nvl(sum(nvl(x.N_TD_AMOUNT,0) * y.N_CAPI_WAY),0) as N_TD_AMOUNT_C,
               C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS              
               from T_D_AC_TRADE_IVT x
               join T_S_DT_TD_MODE y
               on x.C_DT_CODE = y.C_DT_CODE
               where x.C_DT_CODE = y.C_DT_CODE and x.D_TRADE = #START_DATE  and x.C_PORT_CODE = #PORT
               group by C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS 
         )c
         on a.C_PORT_CODE = c.C_PORT_CODE and a.C_SEC_CODE = c.C_SEC_CODE
            and a.C_SEC_VAR_CODE = c.C_SEC_VAR_CODE and a.C_MKT_CODE = c.C_MKT_CODE 
            and a.C_DTA_CODE = c.C_DTA_CODE and a.C_DV_ISSUE_MODE = c.C_DV_ISSUE_MODE
            and a.C_DV_INVEST_CLS = c.C_DV_INVEST_CLS
        left join 
        ( select nvl(sum(nvl(x.N_TD_AMOUNT,0) * y.N_CAPI_WAY),0) as N_TD_AMOUNT_D,
               C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS              
               from T_D_AC_TRADE_DS x
               join T_S_DT_TD_MODE y
               on x.C_DT_CODE = y.C_DT_CODE
               where x.C_DT_CODE = y.C_DT_CODE and x.D_TRADE = #START_DATE  and x.C_PORT_CODE = #PORT
               group by C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS 
         )d
         on a.C_PORT_CODE = d.C_PORT_CODE and a.C_SEC_CODE = d.C_SEC_CODE
            and a.C_SEC_VAR_CODE = d.C_SEC_VAR_CODE and a.C_MKT_CODE = d.C_MKT_CODE 
            and a.C_DTA_CODE = d.C_DTA_CODE and a.C_DV_ISSUE_MODE = d.C_DV_ISSUE_MODE
            and a.C_DV_INVEST_CLS = d.C_DV_INVEST_CLS
        left join 
        ( select nvl(sum(nvl(x.N_TD_AMOUNT,0) * y.N_CAPI_WAY),0) as N_TD_AMOUNT_E,
               C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS              
               from T_D_AC_TRADE_SALE x
               join T_S_DT_TD_MODE y
               on x.C_DT_CODE = y.C_DT_CODE
               where x.C_DT_CODE = y.C_DT_CODE and x.D_TRADE = #START_DATE  and x.C_PORT_CODE = #PORT
               group by C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS 
        )e
        on a.C_PORT_CODE = e.C_PORT_CODE and a.C_SEC_CODE = e.C_SEC_CODE
           and a.C_SEC_VAR_CODE = e.C_SEC_VAR_CODE and a.C_MKT_CODE = e.C_MKT_CODE 
           and a.C_DTA_CODE = e.C_DTA_CODE and a.C_DV_ISSUE_MODE = e.C_DV_ISSUE_MODE
           and a.C_DV_INVEST_CLS = e.C_DV_INVEST_CLS
        left join 
        ( select nvl(sum(nvl(x.N_TD_AMOUNT,0) * y.N_CAPI_WAY),0) as N_TD_AMOUNT_F,
               C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS              
               from T_D_AC_TRADE_IPO x
               join T_S_DT_TD_MODE y
               on x.C_DT_CODE = y.C_DT_CODE
               where x.C_DT_CODE = y.C_DT_CODE and x.D_TRADE = #START_DATE  and x.C_PORT_CODE = #PORT
               group by C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS 
        )f
        on a.C_PORT_CODE = f.C_PORT_CODE and a.C_SEC_CODE = f.C_SEC_CODE
           and a.C_SEC_VAR_CODE = f.C_SEC_VAR_CODE and a.C_MKT_CODE = f.C_MKT_CODE 
           and a.C_DTA_CODE = f.C_DTA_CODE and a.C_DV_ISSUE_MODE = f.C_DV_ISSUE_MODE
           and a.C_DV_INVEST_CLS = f.C_DV_INVEST_CLS 
        left join 
        ( select nvl(sum(nvl(x.N_TD_AMOUNT,0) * y.N_CAPI_WAY),0) as N_TD_AMOUNT_G,
               C_PORT_CODE,C_SEC_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS              
               from T_D_AC_TRADE_EX x
               join T_S_DT_TD_MODE y
               on x.C_DT_CODE = y.C_DT_CODE
               where x.C_DT_CODE = y.C_DT_CODE and x.D_TRADE = #START_DATE  and x.C_PORT_CODE = #PORT
               group by C_PORT_CODE,C_SEC_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS 
        )g 
        on a.C_PORT_CODE = g.C_PORT_CODE and a.C_SEC_CODE = g.C_SEC_CODE 
           and a.C_DTA_CODE = g.C_DTA_CODE and a.C_DV_ISSUE_MODE =g.C_DV_ISSUE_MODE
           and a.C_DV_INVEST_CLS = g.C_DV_INVEST_CLS
        left join 
        ( select nvl(sum(nvl(x.N_TD_AMOUNT,0) * y.N_CAPI_WAY),0) as N_TD_AMOUNT_H,
               C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS              
               from T_D_AC_TRADE_FW x
               join T_S_DT_TD_MODE y
               on x.C_DT_CODE = y.C_DT_CODE
               where x.C_DT_CODE = y.C_DT_CODE and x.D_TRADE = #START_DATE  and x.C_PORT_CODE = #PORT
               group by C_PORT_CODE,C_SEC_CODE,C_SEC_VAR_CODE,C_MKT_CODE,C_DTA_CODE,C_DV_ISSUE_MODE,C_DV_INVEST_CLS 
        )h
        on a.C_PORT_CODE = h.C_PORT_CODE and a.C_SEC_CODE = h.C_SEC_CODE
           and a.C_SEC_VAR_CODE = h.C_SEC_VAR_CODE and a.C_MKT_CODE = h.C_MKT_CODE 
           and a.C_DTA_CODE = h.C_DTA_CODE and a.C_DV_ISSUE_MODE = h.C_DV_ISSUE_MODE
    )
) where n_amount != (n_amount_p + nvl(n_td_amount_c,0) + nvl(n_td_amount_d,0) + nvl(n_td_amount_e,0)
                            + nvl(n_td_amount_f,0) + nvl(n_td_amount_g,0) + nvl(n_td_amount_h,0) )</SQL>';
	insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
	values ('941', '校验估值表同一券的前后两天的数量差额是否等于对应的流水数量', 0, 'GH', '20180608 18:32:20', null, null, 
	content, null, '业务流水校验', 'JYGZBTYQQHLTCY', 'YWLSJY', 'xbrl信批');
end; ;qwq
	
insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('942', '校验库存表近日余额与凭证发生额加减后，金额与当日库存金额不一致的情况', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select C_PORT_CODE as 组合代码,
       C_KM_CODE as 科目代码,
       C_KM_NAME as 科目名称,
       D_STOCK as 交易时间,
       N_AMOUNT as 数量差异,
       N_ORIG_MONEY as 原币金额差异,
       N_PORT_MONEY as 组合货币差异
   from (
      select distinct a.c_port_code as C_PORT_CODE,
             a.c_km_code as C_KM_CODE,
             a.c_km_name as C_KM_NAME,
             a.d_stock as D_STOCK,
             d+g-a as N_AMOUNT,
             e+h-b as N_ORIG_MONEY, 
             f+i-c as N_PORT_MONEY 
      from(
          (select d_stock,c_port_code,c_km_code,c_km_name,N_AMOUNT as a ,N_ORIG_MONEY as b,N_PORT_MONEY as c from  T_D_AI_STOCK 
               where d_stock=#START_DATE and c_port_code=#PORT 
          )a
            
          left join 
               ( select c_port_code,c_km_code,c_km_name,N_AMOUNT as d,N_ORIG_MONEY as e,N_PORT_MONEY as f from T_D_AI_STOCK 
                     where d_stock=#HAVE_DATA_DATE and c_port_code=#PORT
               )b
          on a.c_km_code = b.c_km_code and a.c_km_name = b.c_km_name and a.c_port_code = b.c_port_code

          left join 
               ( select c_port_code,c_km_code,c_km_name, sum(N_AMOUNT*N_WAY) as g,sum(N_ORIG_MONEY*N_WAY) as h,sum(N_PORT_MONEY*N_WAY) as i from T_D_AI_ACT_VAL
                     where d_trade in(#UNCERTAIN_DATE) and c_port_code=#PORT group by c_km_code,c_port_code,c_km_name
               )c
          on a.c_km_code = c.c_km_code and a.c_km_name = c.c_km_name and a.c_port_code = c.c_port_code
      ) 
)
where N_AMOUNT !=0 or N_ORIG_MONEY!=0 or N_PORT_MONEY !=0</SQL>', null, '业务流水校验', 'JYKCBJRYEYPZFSEQK', 'YWLSJY', 'xbrl信批');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('943', '校验估值表估值指标项净值(成本)、净值(市值)新老系统不一致的情况', 0, 'GH', '20180608 18:32:20', null, null, '<SQL>select t.fjjdm    as 组合代码,
       t.fdate    as 业务日期,
       t.fzbv45   as 估值指标项,
       t.fhjv45   as 现系统估值指标项,
       t.fhjv25   as 原系估值指标项,
       t.fhj_diff as 差异
  from (select case
                 when A.fjjdm is null then
                  B.c_port_code
                 else
                  A.fjjdm
               end fjjdm,
               to_char(case
                         when A.ffdate is null then
                          B.d_aststat
                         else
                          A.ffdate
                       end,
                       ''yyyy-mm-dd'') fdate,
               A.fzb as fzbv25,
               B.c_key_name as fzbv45,
               A.fhj as fhjv25,
               B.c_km_name as fhjv45,
               case
                 when A.fhj = ''合计项'' or B.c_km_name = ''合计项'' then
                  0
                 else
                  to_number(replace(nvl(A.fhj, ''0''), ''%'', '''') -
                            replace(nvl(B.c_km_name, ''0''), ''%'', ''''))
               end as fhj_diff,
               A.fcb as fcbv25,
               B.n_port_cost as fcbv45,
               to_number(replace(nvl(A.fcb, ''0''), ''%'', '''') -
                         replace(nvl(B.n_port_cost, ''0''), ''%'', '''')) as fcb_diff,
               A.fsz as fszv25,
               B.n_port_mv as fszv45,
               to_number(replace(nvl(A.fsz, ''0''), ''%'', '''') -
                         replace(nvl(B.n_port_mv, ''0''), ''%'', '''')) as fsz_diff
          from (
                --2.5 
                select SUBSTR(t1.C_PATH, 3, 6) as fjjdm,
                        t1.ffdate,
                        t1.a0 as fzb,
                        case
                          when t1.a1 = ''HJ'' then
                           ''合计项''
                          when t1.a1 = '' '' then
                           ''0''
                          else
                           t1.a1
                        end as fhj,
                        t1.n_orit_cost as fcb,
                        t1.n_orit_mv as fsz,
                        t2.c_key_code
                  from t_d_od_gz t1
                  join (select * from MD_HJZB) t2
                    on t2.fkmbm = t1.a0
                 where t1.ffdate between #START_DATE and #END_DATE
                   and SUBSTR(t1.C_PATH, 3, 6) = #PORT
                   and (t1.a0 like ''801净值(按成本)%'' or t1.a0 like ''802净值(按市值)%'')) A
          full join (
                    --4.5 
                    select t1.c_port_code,
                            t1.d_aststat,
                            t1.c_key_code,
                            t1.c_key_name,
                            case
                              when t1.c_km_name = '' '' then
                               ''合计项''
                              else
                               t1.c_km_name
                            end as c_km_name,
                            t1.n_port_cost,
                            t1.n_port_mv,
                            t2.fkmbm
                      from t_r_fr_aststat t1
                      join (select * from MD_HJZB) t2
                        on t2.c_key_code = t1.c_key_code
                     where t1.d_aststat between #START_DATE and #END_DATE
                       and t1.c_port_code = #PORT
                       and t1.c_key_code in (''JZSZ'', ''JZCB'')
                    ) B
            on B.c_port_code = A.fjjdm
           and B.d_aststat = A.ffdate
           and B.c_key_code = A.c_key_code
           and B.fkmbm = A.fzb) t
 where not (t.fzbv25 is null and t.fzbv45 = ''实收资本'')
 and t.fhj_diff<>0 and t.fhjv45<>0 and t.fhjv25<>0
 order by t.fjjdm, t.fdate, t.fzbv25, t.fzbv45</SQL>', null, '业务流水校验', 'JYGZBGZZBXXLXTYZ', 'YWLSJY', 'V45估值历史');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('944', '估值增值台账校验', 1, 'GM ', ' 20180622 13:32:20 ', 'GH ', '20180622 13:32:20 ', null, null, null, 'GZZZTZJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('945', '校验估值增值台账明细数据中证券内码、交易属性、发行方式一致时存在重复的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_book_date as 业务日期,
       a.c_tax_way as 应税方式,
       a.c_sec_code as 证券内码,
       a.c_dta_code as 交易属性,
       a.c_dv_issue_mode as 发行方式
  from t_r_fr_vat_zr a
 where a.c_tax_type = ''XXS_ZG''
   and a.c_sec_code <> ''*''
   and a.c_port_code=#PORT
   and a.d_book_date between #START_DATE and #END_DATE
 group by a.c_port_code,
          a.d_book_date,
          a.c_tax_way,
          a.c_sec_code,
          a.c_dta_code,
          a.c_dv_issue_mode
 having count(1) > 1</SQL>', null, '估值增值台账校验', 'JYGZZZTZMXCFQK', 'GZZZTZJY', 'V45估值并帐');qwq

declare
    content clob;
begin
  content := '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.n_base as 汇总计费基准,
       t_sum.n_base as 明细计费基准,
       t.n_base - t_sum.n_base as 计费基准差异,
       t.n_base_bal as 汇总当日计税基准余额,
       t_sum.n_base_bal as 明细当日计税基准余额,
       t.n_base_bal - t_sum.n_base_bal as 当日计税基准余额差异,
       t.n_taxbal_last as 汇总上一日税费余额,
       t_sum.n_taxbal_last as 明细上一日税费余额,
       t.n_taxbal_last - t_sum.n_taxbal_last as 上一日税费余额差异,
       t.n_tax as 汇总当日税费余额,
       t_sum.n_tax as 明细当日税费余额,
       t.n_tax - t_sum.n_tax as 当日税费余额差异,
       t.n_tax_bal as 汇总当日科目余额,
       t_sum.n_tax_bal as 明细当日科目余额,
       t.n_tax_bal - t_sum.n_tax_bal as 当日科目余额差异,
       t.n_kmbal_last as 汇总上一日科目余额,
       t_sum.n_kmbal_last as 明细上一日科目余额,
       t.n_kmbal_last - t_sum.n_kmbal_last as 上一日科目余额差异,
       t.n_val_money as 汇总当日凭证计提,
       t_sum.n_val_money as 明细当日凭证计提,
       t.n_val_money - t_sum.n_val_money as 当日凭证计提差异,
       t.n_km_bal as 汇总当日科目余额,
       t_sum.n_km_bal as 明细当日科目余额,
       t.n_km_bal - t_sum.n_km_bal as 当日科目余额差异,
       t.n_port_cost as 汇总卖出对应成本,
       t_sum.n_port_cost as 明细卖出对应成本,
       t.n_port_cost - t_sum.n_port_cost as 卖出对应成本差异,
       t.n_port_price as 汇总卖出成交价格,
       t_sum.n_port_price as 明细卖出成交价格,
       t.n_port_price - t_sum.n_port_price as 卖出成交价格差异,
       t.n_val as 汇总差价发生额,
       t_sum.n_val as 明细差价发生额,
       t.n_val - t_sum.n_val as 差价发生额差异,
       t.n_dedu_bal as 汇总今日抵扣余额,
       t_sum.n_dedu_bal as 明细今日抵扣余额,
       t.n_dedu_bal - t_sum.n_dedu_bal as 今日抵扣余额差异,
       t.n_last_dedu_bal as 汇总上一日抵扣余额,
       t_sum.n_last_dedu_bal as 汇总上一日抵扣余额,
       t.n_last_dedu_bal - t_sum.n_last_dedu_bal as 上一日抵扣余额差异,
       t.n_dedu_money as 汇总当日估值抵扣发生额,
       t_sum.n_dedu_money as 明细当日估值抵扣发生额,
       t.n_dedu_money - t_sum.n_dedu_money as 当日估值抵扣发生额差异,
       t.n_initgz_bal as 汇总估值余额,
       t_sum.n_initgz_bal as 明细估值余额,
       t.n_initgz_bal - t_sum.n_initgz_bal as 估值余额差异
  from (select a.c_port_code,
               a.d_book_date,
               a.c_tax_way,
               a.n_base,
               a.n_base_bal,
               a.n_taxbal_last,
               a.n_tax,
               a.n_tax_bal,
               a.n_kmbal_last,
               a.n_val_money,
               a.n_km_bal,
               a.n_port_cost,
               a.n_port_price,
               a.n_val,
               a.n_dedu_bal,
               a.n_last_dedu_bal,
               a.n_dedu_money,
               a.n_initgz_bal
          from t_r_fr_vat_zr a
         where a.c_tax_type = ''XXS_ZG''
           and a.c_sec_code = ''*'') t
  full join (select a.c_port_code,
                    a.d_book_date,
                    a.c_tax_way,
                    sum(a.n_base) as n_base,
                    sum(a.n_base_bal) as n_base_bal,
                    sum(a.n_taxbal_last) as n_taxbal_last,
                    sum(a.n_tax) as n_tax,
                    sum(a.n_tax_bal) as n_tax_bal,
                    sum(a.n_kmbal_last) as n_kmbal_last,
                    sum(a.n_val_money) as n_val_money,
                    sum(a.n_km_bal) as n_km_bal,
                    sum(a.n_port_cost) as n_port_cost,
                    sum(a.n_port_price) as n_port_price,
                    sum(a.n_val) as n_val,
                    sum(a.n_dedu_bal) as n_dedu_bal,
                    sum(a.n_last_dedu_bal) as n_last_dedu_bal,
                    sum(a.n_dedu_money) as n_dedu_money,
                    sum(a.n_initgz_bal) as n_initgz_bal
               from t_r_fr_vat_zr a
              where a.c_tax_type = ''XXS_ZG''
                and a.c_sec_code <> ''*''
              group by a.c_port_code, a.d_book_date, a.c_tax_way) t_sum
    on t.c_port_code = t_sum.c_port_code
   and t.d_book_date = t_sum.d_book_date
   and t.c_tax_way = t_sum.c_tax_way
 where (t.n_base - t_sum.n_base <> 0 or
       t.n_base_bal - t_sum.n_base_bal <> 0 or
       t.n_taxbal_last - t_sum.n_taxbal_last <> 0 or
       t.n_tax - t_sum.n_tax <> 0 or t.n_tax_bal - t_sum.n_tax_bal <> 0 or
       t.n_kmbal_last - t_sum.n_kmbal_last <> 0 or
       t.n_val_money - t_sum.n_val_money <> 0 or
       t.n_km_bal - t_sum.n_km_bal <> 0 or
       t.n_port_cost - t_sum.n_port_cost <> 0 or
       t.n_port_price - t_sum.n_port_price <> 0 or
       t.n_val - t_sum.n_val <> 0 or t.n_dedu_bal - t_sum.n_dedu_bal <> 0 or
       t.n_last_dedu_bal - t_sum.n_last_dedu_bal <> 0 or
       t.n_dedu_money - t_sum.n_dedu_money <> 0 or
       t.n_initgz_bal - t_sum.n_initgz_bal <> 0)
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>';
  insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
	values ('946', '校验估值增值台账汇总与明细数据不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, 
	content, null, '估值增值台账校验', 'JYGZZZTZHZYMXBYZ', 'GZZZTZJY', 'V45估值并帐');
end; ;qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('947', '利息收入台账校验', 1, 'GM ', ' 20180622 13:32:20 ', 'GH ', '20180622 13:32:20 ', null, null, null, 'LXSRTZJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('948', '校验利息收入台账明细数据中证券内码、交易属性、发行方式一致时存在重复的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_book_date as 业务日期,
       a.c_tax_way as 应税方式,
       a.c_sec_code as 证券内码,
       a.c_dta_code as 交易属性,
       a.c_dv_issue_mode as 发行方式,
       a.c_tax_type as 税费类型
  from t_r_fr_vat_dk a
 where a.c_sec_code <> ''*''
   and a.c_port_code=#PORT
   and a.d_book_date between #START_DATE and #END_DATE
 group by a.c_port_code,
          a.d_book_date,
          a.c_tax_way,
          a.c_sec_code,
          a.c_dta_code,
          a.c_dv_issue_mode,
          a.c_tax_type
 having count(1) > 1</SQL>', null, '利息收入台账校验', 'JYLXSRTZMXCFQK', 'LXSRTZJY', 'V45估值并帐');qwq

declare
    content clob;
begin
  content := '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.n_interest_last as 汇总上一日利息余额,
       t_sum.n_interest_last as 明细上一日利息余额,
       t.n_interest_last - t_sum.n_interest_last as 上一日利息余额差异,
       t.n_interest as 汇总当日利息发生额,
       t_sum.n_interest as 明细当日利息发生额,
       t.n_interest - t_sum.n_interest as 当日利息发生额差异,
       t.n_interest_bal as 汇总当日利息余额,
       t_sum.n_interest_bal as 明细当日利息余额,
       t.n_interest_bal - t_sum.n_interest_bal as 当日利息余额差异,
       t.n_tax as 汇总当日税费发生额,
       t_sum.n_tax as 明细当日税费发生额,
       t.n_tax - t_sum.n_tax as 明细当日税费发生额差异,
       t.n_tax_bal as 汇总当日税费余额,
       t_sum.n_tax_bal as 明细当日税费余额,
       t.n_tax_bal - t_sum.n_tax_bal as 当日税费余额差异,
       t.n_tax_last as 汇总上一日税费余额,
       t_sum.n_tax_last as 明细上一日税费余额,
       t.n_tax_last - t_sum.n_tax_last as 上一日税费余额差异,
       t.n_kmbal_last as 汇总上一日科目余额,
       t_sum.n_kmbal_last as 明细上一日科目余额,
       t.n_kmbal_last - t_sum.n_kmbal_last as 上一日科目余额差异,
       t.n_val_money as 汇总当日凭证计提,
       t_sum.n_val_money as 明细当日凭证计提,
       t.n_val_money - t_sum.n_val_money as 当日凭证计提差异,
       t.n_km_bal as 汇总当日科目余额,
       t_sum.n_km_bal as 明细当日科目余额,
       t.n_km_bal - t_sum.n_km_bal as 当日科目余额差异,
       t.n_confirm_bal as 汇总确定税费余额,
       t_sum.n_confirm_bal as 明细确定税费余额,
       t.n_confirm_bal - t_sum.n_confirm_bal as 确定税费余额差异,
       t.n_interest_restore as 汇总还原税前计税基准,
       t_sum.n_interest_restore as 汇总还原税前计税基准,
       t.n_interest_restore - t_sum.n_interest_restore as 还原税前计税基准差异
  from (select a.c_port_code,
               a.d_book_date,
               a.c_tax_way,
               sum(a.n_interest_last) as n_interest_last,
               sum(a.n_interest) as n_interest,
               sum(a.n_interest_bal) as n_interest_bal,
               sum(a.n_tax) as n_tax,
               sum(a.n_tax_bal) as n_tax_bal,
               sum(a.n_tax_last) as n_tax_last,
               sum(a.n_kmbal_last) as n_kmbal_last,
               sum(a.n_val_money) as n_val_money,
               sum(a.n_km_bal) as n_km_bal,
               sum(a.n_confirm_bal) as n_confirm_bal,
               sum(a.n_interest_restore) as n_interest_restore
          from t_r_fr_vat_dk a
         where a.c_sec_code = ''*''
         group by a.c_port_code, a.d_book_date, a.c_tax_way) t
  full join (select a.c_port_code,
                    a.d_book_date,
                    a.c_tax_way,
                    sum(a.n_interest_last) as n_interest_last,
                    sum(a.n_interest) as n_interest,
                    sum(a.n_interest_bal) as n_interest_bal,
                    sum(a.n_tax) as n_tax,
                    sum(a.n_tax_bal) as n_tax_bal,
                    sum(a.n_tax_last) as n_tax_last,
                    sum(a.n_kmbal_last) as n_kmbal_last,
                    sum(a.n_val_money) as n_val_money,
                    sum(a.n_km_bal) as n_km_bal,
                    sum(a.n_confirm_bal) as n_confirm_bal,
                    sum(a.n_interest_restore) as n_interest_restore
               from t_r_fr_vat_dk a
              where a.c_sec_code <> ''*''
              group by a.c_port_code, a.d_book_date, a.c_tax_way) t_sum
    on t.c_port_code = t_sum.c_port_code
   and t.d_book_date = t_sum.d_book_date
   and t.c_tax_way = t_sum.c_tax_way
 where (t.n_interest_last - t_sum.n_interest_last <> 0 or
       t.n_interest - t_sum.n_interest <> 0 or
       t.n_interest_bal - t_sum.n_interest_bal <> 0 or
       t.n_tax - t_sum.n_tax <> 0 or t.n_tax_bal - t_sum.n_tax_bal <> 0 or
       t.n_tax_last - t_sum.n_tax_last <> 0 or
       t.n_kmbal_last - t_sum.n_kmbal_last <> 0 or
       t.n_val_money - t_sum.n_val_money <> 0 or
       t.n_km_bal - t_sum.n_km_bal <> 0 or
       t.n_confirm_bal - t_sum.n_confirm_bal <> 0 or
       t.n_interest_restore - t_sum.n_interest_restore <> 0)
       and t.c_port_code = #PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>';
  insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
  values ('949', '校验利息收入台账汇总与明细数据不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, 
          content, null, '利息收入台账校验', 'JYLXSRTZHZYMXBYZ', 'LXSRTZJY', 'V45估值并帐');
end; ;qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('950', '商品转让台账校验', 1, 'GM ', ' 20180622 13:32:20 ', 'GH ', '20180622 13:32:20 ', null, null, null, 'SPZRTZJY', '[root]', null);qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('951', '校验商品转让台账明细数据中证券内码、交易属性、发行方式一致时存在重复的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_book_date as 业务日期,
       a.c_tax_way as 应税方式,
       a.c_sec_code as 证券内码,
       a.c_dta_code as 交易属性,
       a.c_dv_issue_mode as 发行方式,
       a.c_tax_type as 税费类型
  from t_r_fr_vat_zr a
 where a.c_tax_type IN (''XXS_QD'', ''XXS_JZ'')
  and a.c_sec_code <> ''*''
  and a.c_port_code=#PORT
  and a.d_book_date between #START_DATE and #END_DATE
 group by a.c_port_code,
          a.d_book_date,
          a.c_tax_way,
          a.c_sec_code,
          a.c_dta_code,
          a.c_dv_issue_mode,
          a.c_tax_type
 having count(1) > 1</SQL>', null, '商品转让台账校验', 'JYSPZRTZMXCFQK', 'SPZRTZJY', 'V45估值并帐');qwq

declare
    content clob;
begin
  content := '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.n_base as 汇总计费基准,
       t_sum.n_base as 明细计费基准,
       t.n_base - t_sum.n_base as 计费基准差异,
       t.n_base_bal as 汇总当日计税基准余额,
       t_sum.n_base_bal as 明细当日计税基准余额,
       t.n_base_bal - t_sum.n_base_bal as 当日计税基准余额差异,
       t.n_taxbal_last as 汇总上一日税费余额,
       t_sum.n_taxbal_last as 明细上一日税费余额,
       t.n_taxbal_last - t_sum.n_taxbal_last as 上一日税费余额差异,
       t.n_tax as 汇总当日税费余额,
       t_sum.n_tax as 明细当日税费余额,
       t.n_tax - t_sum.n_tax as 当日税费余额差异,
       t.n_tax_bal as 汇总当日科目余额,
       t_sum.n_tax_bal as 明细当日科目余额,
       t.n_tax_bal - t_sum.n_tax_bal as 当日科目余额差异,
       t.n_kmbal_last as 汇总上一日科目余额,
       t_sum.n_kmbal_last as 明细上一日科目余额,
       t.n_kmbal_last - t_sum.n_kmbal_last as 上一日科目余额差异,
       t.n_val_money as 汇总当日凭证计提,
       t_sum.n_val_money as 明细当日凭证计提,
       t.n_val_money - t_sum.n_val_money as 当日凭证计提差异,
       t.n_km_bal as 汇总当日科目余额,
       t_sum.n_km_bal as 明细当日科目余额,
       t.n_km_bal - t_sum.n_km_bal as 当日科目余额差异,
       t.n_port_cost as 汇总卖出对应成本,
       t_sum.n_port_cost as 明细卖出对应成本,
       t.n_port_cost - t_sum.n_port_cost as 卖出对应成本差异,
       t.n_port_price as 汇总卖出成交价格,
       t_sum.n_port_price as 明细卖出成交价格,
       t.n_port_price - t_sum.n_port_price as 卖出成交价格差异,
       t.n_val as 汇总差价发生额,
       t_sum.n_val as 明细差价发生额,
       t.n_val - t_sum.n_val as 差价发生额差异,
       t.n_dedu_bal as 汇总今日抵扣余额,
       t_sum.n_dedu_bal as 明细今日抵扣余额,
       t.n_dedu_bal - t_sum.n_dedu_bal as 今日抵扣余额差异,
       t.n_last_dedu_bal as 汇总上一日抵扣余额,
       t_sum.n_last_dedu_bal as 汇总上一日抵扣余额,
       t.n_last_dedu_bal - t_sum.n_last_dedu_bal as 上一日抵扣余额差异,
       t.n_dedu_money as 汇总当日估值抵扣发生额,
       t_sum.n_dedu_money as 明细当日估值抵扣发生额,
       t.n_dedu_money - t_sum.n_dedu_money as 当日估值抵扣发生额差异,
       t.n_initgz_bal as 汇总估值余额,
       t_sum.n_initgz_bal as 明细估值余额,
       t.n_initgz_bal - t_sum.n_initgz_bal as 估值余额差异
  from (select a.c_port_code,
               a.d_book_date,
               a.c_tax_way,
               sum(a.n_base) as n_base,
               sum(a.n_base_bal) as n_base_bal,
               sum(a.n_taxbal_last) as n_taxbal_last,
               sum(a.n_tax) as n_tax,
               sum(a.n_tax_bal) as n_tax_bal,
               sum(a.n_kmbal_last) as n_kmbal_last,
               sum(a.n_val_money) as n_val_money,
               sum(a.n_km_bal) as n_km_bal,
               sum(a.n_port_cost) as n_port_cost,
               sum(a.n_port_price) as n_port_price,
               sum(a.n_val) as n_val,
               sum(a.n_dedu_bal) as n_dedu_bal,
               sum(a.n_last_dedu_bal) as n_last_dedu_bal,
               sum(a.n_dedu_money) as n_dedu_money,
               sum(a.n_initgz_bal) as n_initgz_bal
          from t_r_fr_vat_zr a
         where a.c_tax_type IN (''XXS_QD'', ''XXS_JZ'')
           and a.c_sec_code = ''*''
         group by a.c_port_code, a.d_book_date, a.c_tax_way) t
  full join (select a.c_port_code,
                    a.d_book_date,
                    a.c_tax_way,
                    sum(a.n_base) as n_base,
                    sum(a.n_base_bal) as n_base_bal,
                    sum(a.n_taxbal_last) as n_taxbal_last,
                    sum(a.n_tax) as n_tax,
                    sum(a.n_tax_bal) as n_tax_bal,
                    sum(a.n_kmbal_last) as n_kmbal_last,
                    sum(a.n_val_money) as n_val_money,
                    sum(a.n_km_bal) as n_km_bal,
                    sum(a.n_port_cost) as n_port_cost,
                    sum(a.n_port_price) as n_port_price,
                    sum(a.n_val) as n_val,
                    sum(a.n_dedu_bal) as n_dedu_bal,
                    sum(a.n_last_dedu_bal) as n_last_dedu_bal,
                    sum(a.n_dedu_money) as n_dedu_money,
                    sum(a.n_initgz_bal) as n_initgz_bal
               from t_r_fr_vat_zr a
              where a.c_tax_type IN (''XXS_QD'', ''XXS_JZ'')
                and a.c_sec_code <> ''*''
              group by a.c_port_code, a.d_book_date, a.c_tax_way) t_sum
    on t.c_port_code = t_sum.c_port_code
   and t.d_book_date = t_sum.d_book_date
   and t.c_tax_way = t_sum.c_tax_way
 where (t.n_base - t_sum.n_base <> 0 or
       t.n_base_bal - t_sum.n_base_bal <> 0 or
       t.n_taxbal_last - t_sum.n_taxbal_last <> 0 or
       t.n_tax - t_sum.n_tax <> 0 or t.n_tax_bal - t_sum.n_tax_bal <> 0 or
       t.n_kmbal_last - t_sum.n_kmbal_last <> 0 or
       t.n_val_money - t_sum.n_val_money <> 0 or
       t.n_km_bal - t_sum.n_km_bal <> 0 or
       t.n_port_cost - t_sum.n_port_cost <> 0 or
       t.n_port_price - t_sum.n_port_price <> 0 or
       t.n_val - t_sum.n_val <> 0 or t.n_dedu_bal - t_sum.n_dedu_bal <> 0 or
       t.n_last_dedu_bal - t_sum.n_last_dedu_bal <> 0 or
       t.n_dedu_money - t_sum.n_dedu_money <> 0 or
       t.n_initgz_bal - t_sum.n_initgz_bal <> 0)
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>';
  insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
  values ('952', '校验商品转让台账汇总与明细数据不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, 
          content, null, '商品转让台账校验', 'JYSPZRTZHZYMXBYZ', 'SPZRTZJY', 'V45估值并帐');
end; ;qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('953', '校验估值增值台账明细券的估增发生额与凭证表对应券的估增发生额不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_base, 0) as 台账估增发生额,
       nvl(t1.n_port_money, 0) as 凭证估增发生额,
       nvl(t.n_base, 0) - nvl(t1.n_port_money, 0) as 估增发生额差异
  from (select a.c_port_code,
               a.d_book_date,
               a.c_tax_way,
               a.c_sec_code,
               a.c_sec_var_code,
               a.c_dv_invest_cls,
               a.c_dta_code,
               a.c_dv_issue_mode,
               a.c_mkt_code,
               sum(a.n_base) as n_base
          from t_r_fr_vat_zr a
         where a.c_tax_type IN (''XXS_ZG'')
           and a.c_sec_code <> ''*''
           and a.c_sec_code<>''TZSY_CJSR''
           and a.n_base <> 0
         group by a.c_port_code,
                  a.d_book_date,
                  a.c_tax_way,
                  a.c_sec_code,
                  a.c_sec_var_code,
                  a.c_dv_invest_cls,
                  a.c_dta_code,
                  a.c_dv_issue_mode,
                  a.c_mkt_code) t
  left join (select b.c_port_code,
                    b.d_chk_acc,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    sum(b.n_port_money*b.n_way) as n_port_money
               from t_d_ai_act_val b
              where b.c_dai_code in(''ZQTZ_GYBD'',''YSGJ_GYBD'') and ((b.c_dt_code=''ZCGZ_ZQKC''
                and b.n_way in(''1'',''-1'')) or (b.c_dt_code like''%SELL'' and b.n_way=''-1'')
                or (b.c_dt_code=''ZQLT_ZQLT'' and b.n_way in(''-1'',''1''))
                or (b.c_dt_code=''SCCW_SCPZ_KMH'' and b.c_desc like''%基金合并%'')
                or (b.c_dt_code=''ZQSP_JJHB'' or b.n_way=''-1''))
              group by b.c_port_code,
                       b.d_chk_acc,
                       b.c_sec_code,
                       b.c_sec_var_code,
                       b.c_dv_invest_cls,
                       b.c_dta_code,
                       b.c_dv_issue_mode,
                       b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_chk_acc
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_base, 0) - nvl(t1.n_port_money, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>', null, '估值增值台账校验', 'JYGZZZTZMXQGZFSEYPZBBYZ', 'GZZZTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('954', '校验估值增值台账明细券的税费发生额与凭证表中对应的税费发生额不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_fee_code as 费用代码,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_val_money, 0) as 台账税费发生额,
       nvl(t1.n_port_money, 0) as 凭证差税费发生额,
       nvl(t.n_val_money, 0) - nvl(t1.n_port_money, 0) as 税费发生额差异
  from (select a.c_port_code,
               a.d_book_date,
               a.c_tax_way,
               a.c_fee_code,
               a.c_sec_code,
               a.c_sec_var_code,
               a.c_dv_invest_cls,
               a.c_dta_code,
               a.c_dv_issue_mode,
               a.c_mkt_code,
               sum(a.n_val_money) as n_val_money
          from t_r_fr_vat_zr a
         where a.c_tax_type IN (''XXS_ZG'')
           and a.c_sec_code <> ''*''
           and a.n_val_money <> 0
         group by a.c_port_code,
                  a.d_book_date,
                  a.c_tax_way,
                  a.c_fee_code,
                  a.c_sec_code,
                  a.c_sec_var_code,
                  a.c_dv_invest_cls,
                  a.c_dta_code,
                  a.c_dv_issue_mode,
                  a.c_mkt_code) t
  left join (select b.c_port_code,
                    b.d_chk_acc,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    sum(b.n_port_money) as n_port_money
               from t_d_ai_act_val b
              where b.c_dai_code = ''YFK_SF_ZQ_XXS''
                and b.n_way = ''-1''
              group by b.c_port_code,
                       b.d_chk_acc,
                       b.c_sec_code,
                       b.c_fee_code,
                       b.c_sec_var_code,
                       b.c_dv_invest_cls,
                       b.c_dta_code,
                       b.c_dv_issue_mode,
                       b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_chk_acc
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_val_money, 0) - nvl(t1.n_port_money, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>', null, '估值增值台账校验', 'JYGZZZTZMXQSFFSEYPZBBYZ', 'GZZZTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('955', '校验估值增值台账明细数据中明细券的税费余额与估值表中对应券的税费余额不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_fee_code as 费用代码,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_km_bal, 0) as 台账税费余额,
       nvl(t1.n_port_mv, 0) as 估值税费余额,
       nvl(t.n_km_bal, 0) - nvl(t1.n_port_mv, 0) as 税费余额差异
  from (select b.c_port_code,b.d_book_date,b.c_tax_way,b.c_fee_code,b.c_sec_code,
               b.c_sec_var_code,b.c_dv_invest_cls,b.c_dta_code,b.c_dv_issue_mode,b.c_mkt_code,
               case
                 when trim(c.n_km_bal) is null then
                  b.n_km_bal
                 else
                  c.n_km_bal
               end as n_km_bal
          from (select a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,a1.c_sec_code,a1.c_sec_var_code,a1.c_dv_invest_cls,
                       a1.c_dta_code,a1.c_dv_issue_mode,a1.c_mkt_code,sum(a1.n_km_bal) as n_km_bal
                  from t_r_fr_vat_zr a1
                 where a1.c_tax_type IN (''XXS_ZG'')
                   and a1.c_sec_code <> ''*''
                   and a1.n_km_bal <> 0
                 group by a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,a1.c_sec_code,a1.c_sec_var_code,
                          a1.c_dv_invest_cls,a1.c_dta_code,a1.c_dv_issue_mode,a1.c_mkt_code) b
          left join (select a.c_port_code,a.d_book_date,a.c_tax_way,a.c_fee_code,a.c_sec_code,a.c_sec_var_code,
                           a.c_dv_invest_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code,
                           sum(a.n_km_bal) as n_km_bal
                      from t_r_fr_vat_zr a
                     where a.c_tax_type IN (''XXS_JZ'')
                       and a.c_sec_code <> ''*''
                       and a.n_km_bal = 0
                     group by a.c_port_code,a.d_book_date,a.c_tax_way,a.c_fee_code,a.c_sec_code,a.c_sec_var_code,
                              a.c_dv_invest_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code) c
            on b.c_port_code = c.c_port_code
           and b.d_book_date = c.d_book_date
           and b.c_fee_code = c.c_fee_code
           and b.c_sec_code = c.c_sec_code
           and b.c_sec_var_code = c.c_sec_var_code
           and b.c_dv_invest_cls = c.c_dv_invest_cls
           and b.c_dta_code = c.c_dta_code
           and b.c_dv_issue_mode = c.c_dv_issue_mode
           and b.c_mkt_code = c.c_mkt_code) t
  left join (select b.c_port_code,
                    b.d_aststat,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    sum(b.n_port_mv * b.n_way) as n_port_mv
               from t_r_fr_aststat b
              where b.c_dai_code = ''YFK_SF_ZQ_XXS''
              group by b.c_port_code,
                       b.d_aststat,
                       b.c_sec_code,
                       b.c_fee_code,
                       b.c_sec_var_code,
                       b.c_dv_invest_cls,
                       b.c_dta_code,
                       b.c_dv_issue_mode,
                       b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_aststat
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_km_bal, 0) - nvl(t1.n_port_mv, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>', null, '估值增值台账校验', 'JYGZZZTZMXQSFYEYPZBBYZ', 'GZZZTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('956', '校验利息收入台账明细券的利息收入与凭证表对应券的利息收入不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,t.c_tax_way as 应税方式,
       t.c_sec_code as 证券内码,t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_interest, 0) as 台账利息收入发生额,
       nvl(t1.n_port_money, 0) as 凭证利息收入发生额,
       nvl(t.n_interest, 0) - nvl(t1.n_port_money, 0) as 差价收入发生额差异
  from (select a.c_port_code,a.d_book_date,a.c_tax_way,a.c_sec_code,a.c_sec_var_code,a.c_dv_invest_cls,
               a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code,sum(a.n_interest) as n_interest
          from t_r_fr_vat_dk a
         where a.c_tax_type IN (''XXS_QD'', ''XXS_JZ'')
           and a.c_sec_code <> ''*''
           and a.n_interest <> 0
           and a.c_tax_way=''Y_TAX''
         group by a.c_port_code,a.d_book_date,a.c_tax_way,a.c_sec_code,a.c_sec_var_code,
                  a.c_dv_invest_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code) t
  left join (select b.c_port_code,b.d_chk_acc,b.c_sec_code,b.c_sec_var_code,b.c_dv_invest_cls,
                    b.c_dta_code,b.c_dv_issue_mode,b.c_mkt_code,sum(b.n_port_money) as n_port_money
               from t_d_ai_act_val b
              where b.c_dai_code = ''LXSR_ZQ''
				and b.c_dt_code not in (''VATJT_VOUCHER'')
                and b.n_way = ''-1''
              group by b.c_port_code,b.d_chk_acc,b.c_sec_code,b.c_sec_var_code,b.c_dv_invest_cls,
                       b.c_dta_code,b.c_dv_issue_mode,b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_chk_acc
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_interest, 0) - nvl(t1.n_port_money, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE 
       order by t.c_port_code,t.d_book_date</SQL>', null, '利息收入台账校验', 'JYLXSRTZMXQLXSRYPZBBYZ', 'LXSRTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('957', '校验利息收入台账明细券的税费发生额与凭证表中对应的税费发生额不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_fee_code as 费用代码,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_val_money, 0) as 台账税费发生额,
       nvl(t1.n_port_money, 0) as 凭证差税费发生额,
       nvl(t.n_val_money, 0) - nvl(t1.n_port_money, 0) as 税费发生额差异
  from (select a.c_port_code,a.d_book_date,a.c_tax_way,a.c_fee_code,a.c_sec_code,a.c_sec_var_code,
               a.c_dv_invest_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code,sum(a.n_val_money) as n_val_money
          from t_r_fr_vat_dk a
         where a.c_tax_type IN (''XXS_QD'')
           and a.c_sec_code <> ''*''
           and a.n_val_money <> 0
           and a.c_tax_way=''Y_TAX''
         group by a.c_port_code,a.d_book_date,a.c_tax_way,a.c_fee_code,a.c_sec_code,a.c_sec_var_code,
                  a.c_dv_invest_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code) t
  left join (select b.c_port_code,b.d_chk_acc,b.c_fee_code,b.c_sec_code,b.c_sec_var_code,
                    b.c_dv_invest_cls,b.c_dta_code,b.c_dv_issue_mode,b.c_mkt_code,
                    sum(b.n_port_money) as n_port_money
               from t_d_ai_act_val b
              where b.c_dai_code = ''YFK_SF_ZQ_XXS''
                and b.n_way = ''-1''
              group by b.c_port_code,b.d_chk_acc,b.c_sec_code,b.c_fee_code,b.c_sec_var_code,
                       b.c_dv_invest_cls,b.c_dta_code,b.c_dv_issue_mode,b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_chk_acc
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_val_money, 0) - nvl(t1.n_port_money, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>', null, '利息收入台账校验', 'JYLXSRTZMXQSFFSEYPZBBYZ', 'LXSRTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('958', '校验利息收入台账明细数据中明细券的税费余额与估值表中对应券的税费余额不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_fee_code as 费用代码,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_km_bal, 0) as 台账税费余额,
       nvl(t1.n_port_mv, 0) as 估值税费余额,
       nvl(t.n_km_bal, 0) - nvl(t1.n_port_mv, 0) as 税费余额差异
  from (select b.c_port_code,b.d_book_date,b.c_tax_way,b.c_fee_code,b.c_sec_code,
               b.c_sec_var_code,b.c_dv_invest_cls,b.c_dta_code,b.c_dv_issue_mode,b.c_mkt_code,
               case
                 when trim(c.n_km_bal) is null then
                  b.n_km_bal
                 else
                  c.n_km_bal
               end as n_km_bal
          from (select a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,a1.c_sec_code,
                       a1.c_sec_var_code,a1.c_dv_invest_cls,a1.c_dta_code,a1.c_dv_issue_mode,
                       a1.c_mkt_code,sum(a1.n_km_bal) as n_km_bal
                  from t_r_fr_vat_dk a1
                 where a1.c_tax_type IN (''XXS_QD'')
                   and a1.c_sec_code <> ''*''
                   and a1.n_km_bal <> 0
                 group by a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,a1.c_sec_code,a1.c_sec_var_code,
                          a1.c_dv_invest_cls,a1.c_dta_code,a1.c_dv_issue_mode,a1.c_mkt_code) b
          left join (select a.c_port_code,a.d_book_date,a.c_tax_way,a.c_fee_code,a.c_sec_code,a.c_sec_var_code,
                           a.c_dv_invest_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code,sum(a.n_km_bal) as n_km_bal
                      from t_r_fr_vat_dk a
                     where a.c_tax_type IN (''XXS_JZ'')
                       and a.c_sec_code <> ''*''
                       and a.n_km_bal = 0
                     group by a.c_port_code,a.d_book_date,a.c_tax_way,a.c_fee_code,a.c_sec_code,a.c_sec_var_code,a.c_dv_invest_cls,a.c_dta_code,a.c_dv_issue_mode,a.c_mkt_code) c
            on b.c_port_code = c.c_port_code and b.d_book_date = c.d_book_date and b.c_fee_code = c.c_fee_code and b.c_sec_code = c.c_sec_code and b.c_sec_var_code = c.c_sec_var_code
           and b.c_dv_invest_cls = c.c_dv_invest_cls and b.c_dta_code = c.c_dta_code and b.c_dv_issue_mode = c.c_dv_issue_mode and b.c_mkt_code = c.c_mkt_code) t
  left join (select b.c_port_code,  b.d_aststat, b.c_fee_code, b.c_sec_code, b.c_sec_var_code, b.c_dv_invest_cls, b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code,
                    sum(b.n_port_mv * b.n_way) as n_port_mv
               from t_r_fr_aststat b
              where b.c_dai_code = ''YFK_SF_ZQ_XXS''
              group by b.c_port_code, b.d_aststat, b.c_sec_code, b.c_fee_code, b.c_sec_var_code, b.c_dv_invest_cls, b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_aststat
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_km_bal, 0) - nvl(t1.n_port_mv, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>', null, '利息收入台账校验', 'JYLXSRTZMXQSFYEYPZBBYZ', 'LXSRTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('959', '校验商品转让台账明细券的差价收入与凭证表对应券的差价收入不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_val, 0) as 台账差价收入发生额,
       nvl(t1.n_port_money, 0) as 凭证差价收入发生额,
       nvl(t.n_val, 0) - nvl(t1.n_port_money, 0) as 差价收入发生额差异
  from (select a.c_port_code, a.d_book_date, a.c_tax_way, a.c_sec_code, a.c_sec_var_code, a.c_dv_invest_cls,
               a.c_dta_code, a.c_dv_issue_mode, a.c_mkt_code, sum(a.n_val) as n_val
          from t_r_fr_vat_zr a
         where a.c_tax_type IN (''XXS_QD'', ''XXS_JZ'')
           and a.c_sec_code <> ''*''
           and a.n_val <> 0
         group by a.c_port_code, a.d_book_date, a.c_tax_way, a.c_sec_code, a.c_sec_var_code,
                  a.c_dv_invest_cls, a.c_dta_code, a.c_dv_issue_mode, a.c_mkt_code) t
  left join (select b.c_port_code, b.d_chk_acc, b.c_sec_code, b.c_sec_var_code, b.c_dv_invest_cls,
                    b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code, sum(b.n_port_money) as n_port_money
               from t_d_ai_act_val b
              where b.c_dai_code = ''TZSY_CJSR''
                and (b.c_dt_code like ''%SELL'' or b.c_dt_code = ''ZQJY_DF'' or b.c_dt_code = ''ZQJY_HS'' or
                    (b.c_dt_code = ''SCCW_SCPZ_KMH'' and (b.c_desc like ''%兑付%'' or b.c_desc like''%回售%'' or b.c_desc like''%基金合并%''))or
                     (b.c_sec_var_code like ''QH%'' and b.c_dt_code = ''ZCGZ_ZQKC''))
                and b.n_way = ''-1''
              group by b.c_port_code, b.d_chk_acc, b.c_sec_code, b.c_sec_var_code,
                       b.c_dv_invest_cls, b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_chk_acc
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_val, 0) - nvl(t1.n_port_money, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE 
       order by t.c_port_code,t.d_book_date</SQL> </SQL>', null, '商品转让台账校验', 'JYSPZRTZMXQCJSRYPZBBYZ', 'SPZRTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('960', '校验商品转让台账明细券的税费发生额与凭证表中对应的税费发生额不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_fee_code as 费用代码,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_val_money, 0) as 台账税费发生额,
       nvl(t1.n_port_money, 0) as 凭证差税费发生额,
       nvl(t.n_val_money, 0) - nvl(t1.n_port_money, 0) as 税费发生额差异
  from (select a.c_port_code, a.d_book_date, a.c_tax_way, a.c_fee_code, a.c_sec_code, a.c_sec_var_code, a.c_dv_invest_cls,
               a.c_dta_code, a.c_dv_issue_mode, a.c_mkt_code, sum(a.n_val_money) as n_val_money
          from t_r_fr_vat_zr a
         where a.c_tax_type IN (''XXS_QD'')
           and a.c_sec_code <> ''*''
           and a.n_val_money <> 0
         group by a.c_port_code, a.d_book_date, a.c_tax_way, a.c_fee_code, a.c_sec_code,
                  a.c_sec_var_code, a.c_dv_invest_cls, a.c_dta_code, a.c_dv_issue_mode, a.c_mkt_code) t
  left join (select b.c_port_code, b.d_chk_acc, b.c_fee_code, b.c_sec_code, b.c_sec_var_code, b.c_dv_invest_cls,
                    b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code, sum(b.n_port_money) as n_port_money
               from t_d_ai_act_val b
              where b.c_dai_code = ''YFK_SF_ZQ_XXS''
                and b.n_way = ''-1''
              group by b.c_port_code, b.d_chk_acc, b.c_sec_code, b.c_fee_code, b.c_sec_var_code,
                       b.c_dv_invest_cls, b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_chk_acc
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_val_money, 0) - nvl(t1.n_port_money, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
       order by t.c_port_code,t.d_book_date</SQL>', null, '商品转让台账校验', 'JYSPZRTZMXQSFFSEYPZBBYZ', 'SPZRTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('961', '校验商品转让台账明细数据中明细券的税费余额与估值表中对应券的税费余额不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t.c_port_code as 组合代码,
       t.d_book_date as 业务日期,
       t.c_tax_way as 应税方式,
       t.c_fee_code as 费用代码,
       t.c_sec_code as 证券内码,
       t.c_sec_var_code as 证券品种,
       t.c_dv_invest_cls as 投资分类,
       t.c_dta_code as 交易属性,
       t.c_dv_issue_mode as 发行方式,
       t.c_mkt_code as 交易市场,
       nvl(t.n_km_bal, 0) as 台账税费余额,
       nvl(t1.n_port_mv, 0) as 估值税费余额,
       nvl(t.n_km_bal, 0) - nvl(t1.n_port_mv, 0) as 税费余额差异
  from (select b.c_port_code, b.d_book_date, b.c_tax_way, b.c_fee_code, b.c_sec_code, b.c_sec_var_code,
               b.c_dv_invest_cls, b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code,
               case
                 when trim(c.n_km_bal) is null then
                  b.n_km_bal
                 else
                  c.n_km_bal
               end as n_km_bal
          from (select a1.c_port_code, a1.d_book_date, a1.c_tax_way, a1.c_fee_code, a1.c_sec_code, a1.c_sec_var_code,
                       a1.c_dv_invest_cls, a1.c_dta_code, a1.c_dv_issue_mode, a1.c_mkt_code, sum(a1.n_km_bal) as n_km_bal
                  from t_r_fr_vat_zr a1
                 where a1.c_tax_type IN (''XXS_QD'')
                   and a1.c_sec_code <> ''*''
                   and a1.n_km_bal <> 0
                 group by a1.c_port_code, a1.d_book_date, a1.c_tax_way, a1.c_fee_code, a1.c_sec_code, a1.c_sec_var_code,
                          a1.c_dv_invest_cls, a1.c_dta_code, a1.c_dv_issue_mode, a1.c_mkt_code) b
          left join (select a.c_port_code, a.d_book_date, a.c_tax_way, a.c_fee_code, a.c_sec_code, a.c_sec_var_code,
                           a.c_dv_invest_cls, a.c_dta_code, a.c_dv_issue_mode, a.c_mkt_code, sum(a.n_km_bal) as n_km_bal
                      from t_r_fr_vat_zr a
                     where a.c_tax_type IN (''XXS_JZ'')
                       and a.c_sec_code <> ''*''
                       and a.n_km_bal = 0
                     group by a.c_port_code, a.d_book_date, a.c_tax_way, a.c_fee_code, a.c_sec_code, a.c_sec_var_code,
                              a.c_dv_invest_cls, a.c_dta_code, a.c_dv_issue_mode, a.c_mkt_code) c
            on b.c_port_code = c.c_port_code
           and b.d_book_date = c.d_book_date
           and b.c_fee_code = c.c_fee_code
           and b.c_sec_code = c.c_sec_code
           and b.c_sec_var_code = c.c_sec_var_code
           and b.c_dv_invest_cls = c.c_dv_invest_cls
           and b.c_dta_code = c.c_dta_code
           and b.c_dv_issue_mode = c.c_dv_issue_mode
           and b.c_mkt_code = c.c_mkt_code) t
  left join (select b.c_port_code, b.d_aststat, b.c_fee_code, b.c_sec_code, b.c_sec_var_code, b.c_dv_invest_cls,
                    b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code, sum(b.n_port_mv * b.n_way) as n_port_mv
               from t_r_fr_aststat b
              where b.c_dai_code = ''YFK_SF_ZQ_XXS''
              group by b.c_port_code, b.d_aststat, b.c_sec_code, b.c_fee_code, b.c_sec_var_code,
                       b.c_dv_invest_cls, b.c_dta_code, b.c_dv_issue_mode, b.c_mkt_code) t1
    on t.c_port_code = t1.c_port_code
   and t.d_book_date = t1.d_aststat
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t.n_km_bal, 0) - nvl(t1.n_port_mv, 0) <> 0
       and t.c_port_code=#PORT
       and t.d_book_date between #START_DATE and #END_DATE
          order by t.c_port_code,t.d_book_date</SQL>', null, '商品转让台账校验', 'JYSPZRTZMXQSFYEYPZBBYZ', 'SPZRTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('962', '校验商品转让台账明细数据中期初估增余额与每天生产的台账明细数据不一致的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select a.c_port_code as 组合代码,
       a.d_book_date as 期初日期,
       b.d_book_date as 业务日期,
       a.c_sec_code  as 证券内码,
       a.c_sec_var_code as 证券品种,
       a.c_dv_invest_cls as 投资分类,
       a.c_dta_code as 交易属性,
       a.c_dv_issue_mode as 发行方式,
       a.c_mkt_code as 交易市场,
       nvl(a.n_initgz_bal,0) as 期初估增余额,
       nvl(b.n_initgz_bal,0) as 估增余额
  from t_r_fr_vat_zr a
  left join t_r_fr_vat_zr b
    on a.c_port_code = b.c_port_code
   and a.c_sec_code = b.c_sec_code
   and a.c_sec_var_code = b.c_sec_var_code
   and a.c_dv_invest_cls = b.c_dv_invest_cls
   and a.c_dta_code = b.c_dta_code
   and a.c_dv_issue_mode = b.c_dv_issue_mode
   and a.c_mkt_code = b.c_mkt_code
   and a.c_tax_type = b.c_tax_type
   and a.c_tax_way = b.c_tax_way
   and a.d_book_date < b.d_book_date
   and nvl(a.n_initgz_bal,0) <> nvl(b.n_initgz_bal,0)
 where a.c_tax_type = ''XXS_QD''
   and a.c_sec_code <> ''*''
   and a.d_book_date = date ''2017-12-31''
   and b.c_port_code=#PORT
   and b.d_book_date between #START_DATE and #END_DATE
   order by b.c_port_code,b.d_book_date</SQL>', null, '商品转让台账校验', 'JYSPZRTZMXQCGZYEYMTBYZ', 'SPZRTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('963', '校验估值增值台账明细数据中T日的科目余额不等于T日的科目发生额+T-1日的科目余额的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_km_bal, 0) as 当日科目余额,
       nvl(t1.n_val_money, 0) as 当日计提凭证发生额,
       nvl(t.n_kmbal_last, 0) as 上一日科目余额,
       nvl(t1.n_km_bal, 0) -
       (nvl(t.n_kmbal_last, 0) + nvl(t1.n_val_money, 0)) as 科目余额差异
  from (select a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,
               a1.c_sec_code,a1.c_sec_var_code,a1.c_dv_invest_cls,
               a1.c_dta_code,a1.c_dv_issue_mode,a1.c_mkt_code,
               sum(a1.n_km_bal) as n_km_bal,
               sum(a1.n_val_money) as n_val_money
          from t_r_fr_vat_zr a1
         where a1.c_tax_type IN (''XXS_ZG'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_km_bal <> 0
         group by a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,
                  a1.c_sec_code,a1.c_sec_var_code,a1.c_dv_invest_cls,
                  a1.c_dta_code,a1.c_dv_issue_mode,a1.c_mkt_code) t1
  left join (select b.c_port_code,b.d_book_date_last,b.c_tax_way,b.c_fee_code,
                    b.c_sec_code,b.c_sec_var_code,b.c_dv_invest_cls,
                    b.c_dta_code,b.c_dv_issue_mode,b.c_mkt_code,b.n_kmbal_last
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_km_bal) as n_kmbal_last
                       from t_r_fr_vat_zr a1
                      where a1.c_tax_type IN (''XXS_ZG'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_km_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code) b) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_km_bal, 0) -
       (nvl(t.n_kmbal_last, 0) + nvl(t1.n_val_money, 0)) <> 0
       and t1.c_port_code = #PORT
       and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>', null, '估值增值台账校验', 'JYGZZZTZMXKMTRHTJYRJY', 'GZZZTZJY', 'V45估值并帐');qwq

insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
values ('964', '校验估值增值台账明细数据中T日的税费余额不等于T日的税费余额+T-1日的税费余额的情况', 0, 'GH', '20180622 15:32:20', null, null, '<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_tax_bal, 0) as 当日税费余额,
       nvl(t1.n_tax, 0) as 当日税费发生额,
       nvl(t.n_tax_last, 0) as 上一日税费余额,
       nvl(t1.n_tax_bal, 0) -
       (nvl(t.n_tax_last, 0) + nvl(t1.n_tax, 0)) as 税费余额差异
  from (select a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,
               a1.c_sec_code,a1.c_sec_var_code,a1.c_dv_invest_cls,
               a1.c_dta_code,a1.c_dv_issue_mode,a1.c_mkt_code,
               sum(a1.n_tax_bal) as n_tax_bal,
               sum(a1.n_tax) as n_tax
          from t_r_fr_vat_zr a1
         where a1.c_tax_type IN (''XXS_ZG'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_tax_bal <> 0
         group by a1.c_port_code,a1.d_book_date,a1.c_tax_way,a1.c_fee_code,
                  a1.c_sec_code,a1.c_sec_var_code,a1.c_dv_invest_cls,
                  a1.c_dta_code,a1.c_dv_issue_mode,a1.c_mkt_code) t1
  left join (select b.c_port_code,b.d_book_date_last,b.c_tax_way,
                    b.c_fee_code,b.c_sec_code,b.c_sec_var_code,
                    b.c_dv_invest_cls,b.c_dta_code,b.c_dv_issue_mode,
                    b.c_mkt_code,b.n_tax_last
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_tax_bal) as n_tax_last
                       from t_r_fr_vat_zr a1
                      where a1.c_tax_type IN (''XXS_ZG'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_tax_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code)b) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_tax_bal, 0) -
       (nvl(t.n_tax_last, 0) + nvl(t1.n_tax, 0)) <> 0
      and t1.c_port_code = #PORT
      and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>', null, '估值增值台账校验', 'JYGZZZTZMXSFTRHTJYRJY', 'GZZZTZJY', 'V45估值并帐');qwq

declare
	content clob;
begin
	content:='<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_km_bal, 0) as 当日科目余额,
       nvl(t1.n_val_money, 0) as 当日计提凭证发生额,
       nvl(t.n_kmbal_last, 0) as 上一日科目余额,
       nvl(t1.n_km_bal, 0) -
       (nvl(t.n_kmbal_last, 0) + nvl(t1.n_val_money, 0)) as 科目余额差异
  from (select a1.c_port_code,
               a1.d_book_date,
               a1.c_tax_way,
               a1.c_fee_code,
               a1.c_sec_code,
               a1.c_sec_var_code,
               a1.c_dv_invest_cls,
               a1.c_dta_code,
               a1.c_dv_issue_mode,
               a1.c_mkt_code,
               sum(a1.n_km_bal) as n_km_bal,
               sum(a1.n_val_money) as n_val_money
          from t_r_fr_vat_zr a1
         where a1.c_tax_type IN (''XXS_QD'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_km_bal <> 0
         group by a1.c_port_code,
                  a1.d_book_date,
                  a1.c_tax_way,
                  a1.c_fee_code,
                  a1.c_sec_code,
                  a1.c_sec_var_code,
                  a1.c_dv_invest_cls,
                  a1.c_dta_code,
                  a1.c_dv_issue_mode,
                  a1.c_mkt_code) t1
  left join (select b.c_port_code,
                    b.d_book_date_last,
                    b.c_tax_way,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    case
                      when trim(c.n_kmbal_last) is null then
                       b.n_kmbal_last
                      else
                       c.n_kmbal_last
                    end as n_kmbal_last
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_km_bal) as n_kmbal_last
                       from t_r_fr_vat_zr a1
                      where a1.c_tax_type IN (''XXS_QD'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_km_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code) b
               left join (select a.c_port_code,
                                a.d_book_date as d_book_date_last,
                                a.c_tax_way,
                                a.c_fee_code,
                                a.c_sec_code,
                                a.c_sec_var_code,
                                a.c_dv_invest_cls,
                                a.c_dta_code,
                                a.c_dv_issue_mode,
                                a.c_mkt_code,
                                sum(a.n_km_bal) as n_kmbal_last
                           from t_r_fr_vat_zr a
                          where a.c_tax_type IN (''XXS_JZ'')
                            and a.c_tax_way = ''Y_TAX''
                            and a.c_sec_code <> ''*''
                            and a.n_km_bal = 0
                          group by a.c_port_code,
                                   a.d_book_date,
                                   a.c_tax_way,
                                   a.c_fee_code,
                                   a.c_sec_code,
                                   a.c_sec_var_code,
                                   a.c_dv_invest_cls,
                                   a.c_dta_code,
                                   a.c_dv_issue_mode,
                                   a.c_mkt_code) c
                 on b.c_port_code = c.c_port_code
                and b.d_book_date_last = c.d_book_date_last
                and b.c_fee_code = c.c_fee_code
                and b.c_sec_code = c.c_sec_code
                and b.c_sec_var_code = c.c_sec_var_code
                and b.c_dv_invest_cls = c.c_dv_invest_cls
                and b.c_dta_code = c.c_dta_code
                and b.c_dv_issue_mode = c.c_dv_issue_mode
                and b.c_mkt_code = c.c_mkt_code) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_km_bal, 0) -
       (nvl(t.n_kmbal_last, 0) + nvl(t1.n_val_money, 0)) <> 0
       and t1.c_port_code = #PORT
       and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>';
	insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
	values ('965', '校验利息收入台账明细数据中T日的科目余额不等于T日的科目发生额+T-1日的科目余额的情况', 0, 'GH', '20180608 18:32:20', null, null, 
	content, null, '利息收入台账校验', 'JYLXSRTZMXKMTRHTJYRJY', 'LXSRTZJY', 'V45估值并帐');
end; ;qwq

declare
	content clob;
begin
	content:='<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_tax_bal, 0) as 当日税费余额,
       nvl(t1.n_tax, 0) as 当日税费发生额,
       nvl(t.n_tax_last, 0) as 上一日税费余额,
       nvl(t1.n_tax_bal, 0) -
       (nvl(t.n_tax_last, 0) + nvl(t1.n_tax, 0)) as 税费余额差异
  from (select a1.c_port_code,
               a1.d_book_date,
               a1.c_tax_way,
               a1.c_fee_code,
               a1.c_sec_code,
               a1.c_sec_var_code,
               a1.c_dv_invest_cls,
               a1.c_dta_code,
               a1.c_dv_issue_mode,
               a1.c_mkt_code,
               sum(a1.n_tax_bal) as n_tax_bal,
               sum(a1.n_tax) as n_tax
          from t_r_fr_vat_dk a1
         where a1.c_tax_type IN (''XXS_QD'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_tax_bal <> 0
         group by a1.c_port_code,
                  a1.d_book_date,
                  a1.c_tax_way,
                  a1.c_fee_code,
                  a1.c_sec_code,
                  a1.c_sec_var_code,
                  a1.c_dv_invest_cls,
                  a1.c_dta_code,
                  a1.c_dv_issue_mode,
                  a1.c_mkt_code) t1
  left join (select b.c_port_code,
                    b.d_book_date_last,
                    b.c_tax_way,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    case
                      when trim(c.n_tax_last) is null then
                       b.n_tax_last
                      else
                       c.n_tax_last
                    end as n_tax_last
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_tax_bal) as n_tax_last
                       from t_r_fr_vat_dk a1
                      where a1.c_tax_type IN (''XXS_QD'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_tax_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code) b
               left join (select a.c_port_code,
                                a.d_book_date as d_book_date_last,
                                a.c_tax_way,
                                a.c_fee_code,
                                a.c_sec_code,
                                a.c_sec_var_code,
                                a.c_dv_invest_cls,
                                a.c_dta_code,
                                a.c_dv_issue_mode,
                                a.c_mkt_code,
                                sum(a.n_tax_bal) as n_tax_last
                           from t_r_fr_vat_dk a
                          where a.c_tax_type IN (''XXS_JZ'')
                            and a.c_tax_way = ''Y_TAX''
                            and a.c_sec_code <> ''*''
                            and a.n_tax_bal = 0
                          group by a.c_port_code,
                                   a.d_book_date,
                                   a.c_tax_way,
                                   a.c_fee_code,
                                   a.c_sec_code,
                                   a.c_sec_var_code,
                                   a.c_dv_invest_cls,
                                   a.c_dta_code,
                                   a.c_dv_issue_mode,
                                   a.c_mkt_code) c
                 on b.c_port_code = c.c_port_code
                and b.d_book_date_last = c.d_book_date_last
                and b.c_fee_code = c.c_fee_code
                and b.c_sec_code = c.c_sec_code
                and b.c_sec_var_code = c.c_sec_var_code
                and b.c_dv_invest_cls = c.c_dv_invest_cls
                and b.c_dta_code = c.c_dta_code
                and b.c_dv_issue_mode = c.c_dv_issue_mode
                and b.c_mkt_code = c.c_mkt_code) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_tax_bal, 0) -
       (nvl(t.n_tax_last, 0) + nvl(t1.n_tax, 0)) <> 0
      and t1.c_port_code = #PORT
      and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>';
	insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
	values ('966', '校验利息收入台账明细数据中T日的税费余额不等于T日的税费余额+T-1日的税费余额的情况', 0, 'GH', '20180608 18:32:20', null, null, 
	content, null, '利息收入台账校验', 'JYLXSRTZMXSFTRHTJYRJY', 'LXSRTZJY', 'V45估值并帐');
end; ;qwq

declare
	content clob;
begin
	content:='<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_interest_bal, 0) as 当日计税基准余额,
       nvl(t1.n_interest, 0) as 当日计税基准发生额,
       nvl(t.n_interest_bal_last, 0) as 上一日计税基准余额,
       nvl(t1.n_interest_bal, 0) -
       (nvl(t.n_interest_bal_last, 0) + nvl(t1.n_interest, 0)) as 计税基准余额差异
  from (select a1.c_port_code,
               a1.d_book_date,
               a1.c_tax_way,
               a1.c_fee_code,
               a1.c_sec_code,
               a1.c_sec_var_code,
               a1.c_dv_invest_cls,
               a1.c_dta_code,
               a1.c_dv_issue_mode,
               a1.c_mkt_code,
               sum(a1.n_interest_bal) as n_interest_bal,
               sum(a1.n_interest) as n_interest
          from t_r_fr_vat_dk a1
         where a1.c_tax_type IN (''XXS_QD'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_interest_bal <> 0
         group by a1.c_port_code,
                  a1.d_book_date,
                  a1.c_tax_way,
                  a1.c_fee_code,
                  a1.c_sec_code,
                  a1.c_sec_var_code,
                  a1.c_dv_invest_cls,
                  a1.c_dta_code,
                  a1.c_dv_issue_mode,
                  a1.c_mkt_code) t1
  left join (select b.c_port_code,
                    b.d_book_date_last,
                    b.c_tax_way,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    case
                      when trim(c.n_interest_bal_last) is null then
                       b.n_interest_bal_last
                      else
                       c.n_interest_bal_last
                    end as n_interest_bal_last
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_interest_bal) as n_interest_bal_last
                       from t_r_fr_vat_dk a1
                      where a1.c_tax_type IN (''XXS_QD'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_interest_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code) b
               left join (select a.c_port_code,
                                a.d_book_date as d_book_date_last,
                                a.c_tax_way,
                                a.c_fee_code,
                                a.c_sec_code,
                                a.c_sec_var_code,
                                a.c_dv_invest_cls,
                                a.c_dta_code,
                                a.c_dv_issue_mode,
                                a.c_mkt_code,
                                sum(a.n_interest_bal) as n_interest_bal_last
                           from t_r_fr_vat_dk a
                          where a.c_tax_type IN (''XXS_JZ'')
                            and a.c_tax_way = ''Y_TAX''
                            and a.c_sec_code <> ''*''
                            and a.n_interest_bal = 0
                          group by a.c_port_code,
                                   a.d_book_date,
                                   a.c_tax_way,
                                   a.c_fee_code,
                                   a.c_sec_code,
                                   a.c_sec_var_code,
                                   a.c_dv_invest_cls,
                                   a.c_dta_code,
                                   a.c_dv_issue_mode,
                                   a.c_mkt_code) c
                 on b.c_port_code = c.c_port_code
                and b.d_book_date_last = c.d_book_date_last
                and b.c_fee_code = c.c_fee_code
                and b.c_sec_code = c.c_sec_code
                and b.c_sec_var_code = c.c_sec_var_code
                and b.c_dv_invest_cls = c.c_dv_invest_cls
                and b.c_dta_code = c.c_dta_code
                and b.c_dv_issue_mode = c.c_dv_issue_mode
                and b.c_mkt_code = c.c_mkt_code) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_interest_bal, 0) -
       (nvl(t.n_interest_bal_last, 0) + nvl(t1.n_interest, 0)) <> 0
   and t1.c_port_code = #PORT
   and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>';
	insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
	values ('967', '校验利息收入台账明细数据中T日的余额不等于T日的计税基准发生额+T-1日计税基准余额的情况', 0, 'GH', '20180608 18:32:20', null, null, 
	content, null, '利息收入台账校验', 'JYLXSRTZMXYETRHTJYRJY', 'LXSRTZJY', 'V45估值并帐');
end; ;qwq

declare
    content clob;
begin
  content := '<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_dedu_bal, 0) as 当日剩余抵扣估增余额,
       nvl(t1.n_dedu_money, 0) as 当日剩余抵扣估增发生额,
       nvl(t.n_last_dedu_bal, 0) as 上一日剩余抵扣估增余额,
       nvl(t1.n_dedu_bal, 0) -
       (nvl(t.n_last_dedu_bal, 0) + nvl(t1.n_dedu_money, 0)) as 剩余抵扣估增余额差异
  from (select a1.c_port_code,
               a1.d_book_date,
               a1.c_tax_way,
               a1.c_fee_code,
               a1.c_sec_code,
               a1.c_sec_var_code,
               a1.c_dv_invest_cls,
               a1.c_dta_code,
               a1.c_dv_issue_mode,
               a1.c_mkt_code,
               sum(a1.n_dedu_bal) as n_dedu_bal,
               sum(a1.n_dedu_money) as n_dedu_money
          from t_r_fr_vat_zr a1
         where a1.c_tax_type IN (''XXS_QD'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_dedu_bal <> 0
         group by a1.c_port_code,
                  a1.d_book_date,
                  a1.c_tax_way,
                  a1.c_fee_code,
                  a1.c_sec_code,
                  a1.c_sec_var_code,
                  a1.c_dv_invest_cls,
                  a1.c_dta_code,
                  a1.c_dv_issue_mode,
                  a1.c_mkt_code) t1
  left join (select b.c_port_code,
                    b.d_book_date_last,
                    b.c_tax_way,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    case
                      when trim(c.n_last_dedu_bal) is null then
                       b.n_last_dedu_bal
                      else
                       c.n_last_dedu_bal
                    end as n_last_dedu_bal
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_dedu_bal) as n_last_dedu_bal
                       from t_r_fr_vat_zr a1
                      where a1.c_tax_type IN (''XXS_QD'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_dedu_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code) b
               left join (select a.c_port_code,
                                a.d_book_date as d_book_date_last,
                                a.c_tax_way,
                                a.c_fee_code,
                                a.c_sec_code,
                                a.c_sec_var_code,
                                a.c_dv_invest_cls,
                                a.c_dta_code,
                                a.c_dv_issue_mode,
                                a.c_mkt_code,
                                sum(a.n_dedu_bal) as n_last_dedu_bal
                           from t_r_fr_vat_zr a
                          where a.c_tax_type IN (''XXS_JZ'')
                            and a.c_tax_way = ''Y_TAX''
                            and a.c_sec_code <> ''*''
                            and a.n_dedu_bal = 0
                          group by a.c_port_code,
                                   a.d_book_date,
                                   a.c_tax_way,
                                   a.c_fee_code,
                                   a.c_sec_code,
                                   a.c_sec_var_code,
                                   a.c_dv_invest_cls,
                                   a.c_dta_code,
                                   a.c_dv_issue_mode,
                                   a.c_mkt_code) c
                 on b.c_port_code = c.c_port_code
                and b.d_book_date_last = c.d_book_date_last
                and b.c_fee_code = c.c_fee_code
                and b.c_sec_code = c.c_sec_code
                and b.c_sec_var_code = c.c_sec_var_code
                and b.c_dv_invest_cls = c.c_dv_invest_cls
                and b.c_dta_code = c.c_dta_code
                and b.c_dv_issue_mode = c.c_dv_issue_mode
                and b.c_mkt_code = c.c_mkt_code) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_dedu_bal, 0) -
       (nvl(t.n_last_dedu_bal, 0) + nvl(t1.n_dedu_money, 0)) <> 0
   and t1.c_port_code = #PORT
   and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>';
  insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
  values ('968', '校验商品转让台账明细数据中T日的当日剩余抵扣估增余额不等于T日的估增抵扣发生额+T-1日期初剩余抵扣估增余额的情况', 0, 'GH', '20180622 15:32:20', null, null, 
          content, null, '商品转让台账校验', 'JYSPZRTZMXSYDKYETRHTJYRJY', 'SPZRTZJY', 'V45估值并帐');
end; ;qwq

declare
    content clob;
begin
  content := '<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_km_bal, 0) as 当日科目余额,
       nvl(t1.n_val_money, 0) as 当日计提凭证发生额,
       nvl(t.n_kmbal_last, 0) as 上一日科目余额,
       nvl(t1.n_km_bal, 0) -
       (nvl(t.n_kmbal_last, 0) + nvl(t1.n_val_money, 0)) as 科目余额差异
  from (select a1.c_port_code,
               a1.d_book_date,
               a1.c_tax_way,
               a1.c_fee_code,
               a1.c_sec_code,
               a1.c_sec_var_code,
               a1.c_dv_invest_cls,
               a1.c_dta_code,
               a1.c_dv_issue_mode,
               a1.c_mkt_code,
               sum(a1.n_km_bal) as n_km_bal,
               sum(a1.n_val_money) as n_val_money
          from t_r_fr_vat_zr a1
         where a1.c_tax_type IN (''XXS_QD'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_km_bal <> 0
         group by a1.c_port_code,
                  a1.d_book_date,
                  a1.c_tax_way,
                  a1.c_fee_code,
                  a1.c_sec_code,
                  a1.c_sec_var_code,
                  a1.c_dv_invest_cls,
                  a1.c_dta_code,
                  a1.c_dv_issue_mode,
                  a1.c_mkt_code) t1
  left join (select b.c_port_code,
                    b.d_book_date_last,
                    b.c_tax_way,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    case
                      when trim(c.n_kmbal_last) is null then
                       b.n_kmbal_last
                      else
                       c.n_kmbal_last
                    end as n_kmbal_last
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_km_bal) as n_kmbal_last
                       from t_r_fr_vat_zr a1
                      where a1.c_tax_type IN (''XXS_QD'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_km_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code) b
               left join (select a.c_port_code,
                                a.d_book_date as d_book_date_last,
                                a.c_tax_way,
                                a.c_fee_code,
                                a.c_sec_code,
                                a.c_sec_var_code,
                                a.c_dv_invest_cls,
                                a.c_dta_code,
                                a.c_dv_issue_mode,
                                a.c_mkt_code,
                                sum(a.n_km_bal) as n_kmbal_last
                           from t_r_fr_vat_zr a
                          where a.c_tax_type IN (''XXS_JZ'')
                            and a.c_tax_way = ''Y_TAX''
                            and a.c_sec_code <> ''*''
                            and a.n_km_bal = 0
                          group by a.c_port_code,
                                   a.d_book_date,
                                   a.c_tax_way,
                                   a.c_fee_code,
                                   a.c_sec_code,
                                   a.c_sec_var_code,
                                   a.c_dv_invest_cls,
                                   a.c_dta_code,
                                   a.c_dv_issue_mode,
                                   a.c_mkt_code) c
                 on b.c_port_code = c.c_port_code
                and b.d_book_date_last = c.d_book_date_last
                and b.c_fee_code = c.c_fee_code
                and b.c_sec_code = c.c_sec_code
                and b.c_sec_var_code = c.c_sec_var_code
                and b.c_dv_invest_cls = c.c_dv_invest_cls
                and b.c_dta_code = c.c_dta_code
                and b.c_dv_issue_mode = c.c_dv_issue_mode
                and b.c_mkt_code = c.c_mkt_code) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_km_bal, 0) -
       (nvl(t.n_kmbal_last, 0) + nvl(t1.n_val_money, 0)) <> 0
       and t1.c_port_code = #PORT
       and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>';
  insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
  values ('969', '校验商品转让台账明细数据中T日的科目余额不等于T日的科目发生额+T-1日的科目余额的情况', 0, 'GH', '20180622 15:32:20', null, null, 
          content, null, '商品转让台账校验', 'JYSPZRTZMXKMYETRHTJYRJY', 'SPZRTZJY', 'V45估值并帐');
end; ;qwq

declare
    content clob;
begin
  content := '<SQL>select t1.c_port_code as 组合代码,
       t1.d_book_date as 业务日期,
       t.d_book_date_last as 上一日业务日期,
       t1.c_tax_way as 应税方式,
       t1.c_fee_code as 费用代码,
       t1.c_sec_code as 证券内码,
       t1.c_sec_var_code as 证券品种,
       t1.c_dv_invest_cls as 投资分类,
       t1.c_dta_code as 交易属性,
       t1.c_dv_issue_mode as 发行方式,
       t1.c_mkt_code as 交易市场,
       nvl(t1.n_tax_bal, 0) as 当日税费余额,
       nvl(t1.n_tax, 0) as 当日税费发生额,
       nvl(t.n_tax_last, 0) as 上一日税费余额,
       nvl(t1.n_tax_bal, 0) -
       (nvl(t.n_tax_last, 0) + nvl(t1.n_tax, 0)) as 税费余额差异
  from (select a1.c_port_code,
               a1.d_book_date,
               a1.c_tax_way,
               a1.c_fee_code,
               a1.c_sec_code,
               a1.c_sec_var_code,
               a1.c_dv_invest_cls,
               a1.c_dta_code,
               a1.c_dv_issue_mode,
               a1.c_mkt_code,
               sum(a1.n_tax_bal) as n_tax_bal,
               sum(a1.n_tax) as n_tax
          from t_r_fr_vat_zr a1
         where a1.c_tax_type IN (''XXS_QD'')
           and a1.c_tax_way = ''Y_TAX''
           and a1.c_sec_code <> ''*''
           and a1.n_tax_bal <> 0
         group by a1.c_port_code,
                  a1.d_book_date,
                  a1.c_tax_way,
                  a1.c_fee_code,
                  a1.c_sec_code,
                  a1.c_sec_var_code,
                  a1.c_dv_invest_cls,
                  a1.c_dta_code,
                  a1.c_dv_issue_mode,
                  a1.c_mkt_code) t1
  left join (select b.c_port_code,
                    b.d_book_date_last,
                    b.c_tax_way,
                    b.c_fee_code,
                    b.c_sec_code,
                    b.c_sec_var_code,
                    b.c_dv_invest_cls,
                    b.c_dta_code,
                    b.c_dv_issue_mode,
                    b.c_mkt_code,
                    case
                      when trim(c.n_tax_last) is null then
                       b.n_tax_last
                      else
                       c.n_tax_last
                    end as n_tax_last
               from (select a1.c_port_code,
                            a1.d_book_date as d_book_date_last,
                            a1.c_tax_way,
                            a1.c_fee_code,
                            a1.c_sec_code,
                            a1.c_sec_var_code,
                            a1.c_dv_invest_cls,
                            a1.c_dta_code,
                            a1.c_dv_issue_mode,
                            a1.c_mkt_code,
                            sum(a1.n_tax_bal) as n_tax_last
                       from t_r_fr_vat_zr a1
                      where a1.c_tax_type IN (''XXS_QD'')
                        and a1.c_tax_way = ''Y_TAX''
                        and a1.c_sec_code <> ''*''
                        and a1.n_tax_bal <> 0
                      group by a1.c_port_code,
                               a1.d_book_date,
                               a1.c_tax_way,
                               a1.c_fee_code,
                               a1.c_sec_code,
                               a1.c_sec_var_code,
                               a1.c_dv_invest_cls,
                               a1.c_dta_code,
                               a1.c_dv_issue_mode,
                               a1.c_mkt_code) b
               left join (select a.c_port_code,
                                a.d_book_date as d_book_date_last,
                                a.c_tax_way,
                                a.c_fee_code,
                                a.c_sec_code,
                                a.c_sec_var_code,
                                a.c_dv_invest_cls,
                                a.c_dta_code,
                                a.c_dv_issue_mode,
                                a.c_mkt_code,
                                sum(a.n_tax_bal) as n_tax_last
                           from t_r_fr_vat_zr a
                          where a.c_tax_type IN (''XXS_JZ'')
                            and a.c_tax_way = ''Y_TAX''
                            and a.c_sec_code <> ''*''
                            and a.n_tax_bal = 0
                          group by a.c_port_code,
                                   a.d_book_date,
                                   a.c_tax_way,
                                   a.c_fee_code,
                                   a.c_sec_code,
                                   a.c_sec_var_code,
                                   a.c_dv_invest_cls,
                                   a.c_dta_code,
                                   a.c_dv_issue_mode,
                                   a.c_mkt_code) c
                 on b.c_port_code = c.c_port_code
                and b.d_book_date_last = c.d_book_date_last
                and b.c_fee_code = c.c_fee_code
                and b.c_sec_code = c.c_sec_code
                and b.c_sec_var_code = c.c_sec_var_code
                and b.c_dv_invest_cls = c.c_dv_invest_cls
                and b.c_dta_code = c.c_dta_code
                and b.c_dv_issue_mode = c.c_dv_issue_mode
                and b.c_mkt_code = c.c_mkt_code) t
    on t.c_port_code = t1.c_port_code
   and t.d_book_date_last = t1.d_book_date - 1
   and t.c_fee_code = t1.c_fee_code
   and t.c_sec_code = t1.c_sec_code
   and t.c_sec_var_code = t1.c_sec_var_code
   and t.c_dv_invest_cls = t1.c_dv_invest_cls
   and t.c_dta_code = t1.c_dta_code
   and t.c_dv_issue_mode = t1.c_dv_issue_mode
   and t.c_mkt_code = t1.c_mkt_code
 where nvl(t1.n_tax_bal, 0) -
       (nvl(t.n_tax_last, 0) + nvl(t1.n_tax, 0)) <> 0
      and t1.c_port_code = #PORT
      and t1.d_book_date between #START_DATE and #END_DATE
 order by t1.c_port_code, t1.d_book_date</SQL>';
  insert into t_d_ck_sjjy (C_IDEN, C_CK_NAME, N_CHECK_STATE, C_UPDATE_BY, C_UPDATE_TIME, C_CHECK_BY, C_CHECK_TIME, C_CK_SENTENCE, C_CK_HANDLE, C_CK_P_NAME, C_CK_CODE, C_GROUP_CODE, C_DATA_SCENE)
  values ('970', '校验商品转让台账明细数据中T日的税费余额不等于T日的税费余额+T-1日的税费余额的情况', 0, 'GH', '20180622 15:32:20', null, null, 
          content, null, '商品转让台账校验', 'JYSPZRTZMXSFYETRHTJYRJY', 'SPZRTZJY', 'V45估值并帐');
end; ;qwq






   

   
   
	  